(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target5) => (target5 = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target5, "default", { value: mod2, enumerable: true }) : target5,
    mod2
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack2) {
            {
              currentExtraStackFrame = stack2;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack2) {
              {
                currentExtraStackFrame = stack2;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack2 = "";
              if (currentExtraStackFrame) {
                stack2 += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack2 += impl() || "";
              }
              return stack2;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn2(format4) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format4, args);
              }
            }
          }
          function error2(format4) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format4, args);
              }
            }
          }
          function printWarning(level, format4, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format4 += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format4);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a3) {
            return isArrayImpl(a3);
          }
          function typeName(value12) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type2 = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
              return type2;
            }
          }
          function willCoercionThrow(value12) {
            {
              try {
                testStringCoercion(value12);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value12) {
            return "" + value12;
          }
          function checkKeyStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName2 = outerType.displayName;
            if (displayName2) {
              return displayName2;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type2) {
            return type2.displayName || "Context";
          }
          function getComponentNameFromType(type2) {
            if (type2 == null) {
              return null;
            }
            {
              if (typeof type2.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type2 === "function") {
              return type2.displayName || type2.name || null;
            }
            if (typeof type2 === "string") {
              return type2;
            }
            switch (type2) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type2;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type2;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type2, type2.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type2.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type2.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init3(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName2) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName2);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName2) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName2);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type2, key, ref, self, source3, owner, props) {
            var element2 = {
              $$typeof: REACT_ELEMENT_TYPE,
              type: type2,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element2._store = {};
              Object.defineProperty(element2._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element2, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element2, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source3
              });
              if (Object.freeze) {
                Object.freeze(element2.props);
                Object.freeze(element2);
              }
            }
            return element2;
          };
          function createElement2(type2, config, children3) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source3 = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source3 = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children3;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type2 && type2.defaultProps) {
              var defaultProps = type2.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName2 = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName2);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName2);
                }
              }
            }
            return ReactElement(type2, key, ref, self, source3, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element2, config, children3) {
            if (element2 === null || element2 === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element2 + ".");
            }
            var propName;
            var props = assign2({}, element2.props);
            var key = element2.key;
            var ref = element2.ref;
            var self = element2._self;
            var source3 = element2._source;
            var owner = element2._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element2.type && element2.type.defaultProps) {
                defaultProps = element2.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children3;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element2.type, key, ref, self, source3, owner, props);
          }
          function isValidElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text6) {
            return text6.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element2, index5) {
            if (typeof element2 === "object" && element2 !== null && element2.key != null) {
              {
                checkKeyStringCoercion(element2.key);
              }
              return escape("" + element2.key);
            }
            return index5.toString(36);
          }
          function mapIntoArray(children3, array3, escapedPrefix, nameSoFar, callback) {
            var type2 = typeof children3;
            if (type2 === "undefined" || type2 === "boolean") {
              children3 = null;
            }
            var invokeCallback = false;
            if (children3 === null) {
              invokeCallback = true;
            } else {
              switch (type2) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children3.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children3;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array3, escapedChildKey, "", function(c4) {
                  return c4;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                  );
                }
                array3.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children3)) {
              for (var i2 = 0; i2 < children3.length; i2++) {
                child = children3[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array3, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children3);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children3;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator2 = iteratorFn.call(iterableChildren);
                var step3;
                var ii = 0;
                while (!(step3 = iterator2.next()).done) {
                  child = step3.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array3, escapedPrefix, nextName, callback);
                }
              } else if (type2 === "object") {
                var childrenString = String(children3);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children3).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children3, func, context) {
            if (children3 == null) {
              return children3;
            }
            var result = [];
            var count2 = 0;
            mapIntoArray(children3, result, "", "", function(child) {
              return func.call(context, child, count2++);
            });
            return result;
          }
          function countChildren(children3) {
            var n = 0;
            mapChildren(children3, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children3, forEachFunc, forEachContext) {
            mapChildren(children3, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children3) {
            return mapChildren(children3, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children3) {
            if (!isValidElement(children3)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children3;
          }
          function createContext2(defaultValue4) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue4,
              _currentValue2: defaultValue4,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName2) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName2);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error3) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error3;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name15) {
                  ownName = name15;
                  if (!render.name && !render.displayName) {
                    render.displayName = name15;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type2) {
            if (typeof type2 === "string" || typeof type2 === "function") {
              return true;
            }
            if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type2 === "object" && type2 !== null) {
              if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type2, compare4) {
            {
              if (!isValidElementType(type2)) {
                error2("memo: The first argument must be a component. Instead received: %s", type2 === null ? "null" : typeof type2);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type: type2,
              compare: compare4 === void 0 ? null : compare4
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name15) {
                  ownName = name15;
                  if (!type2.name && !type2.displayName) {
                    type2.displayName = name15;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error2("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context2) {
            var dispatcher = resolveDispatcher();
            {
              if (Context2._context !== void 0) {
                var realContext = Context2._context;
                if (realContext.Consumer === Context2) {
                  error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context2) {
                  error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context2);
          }
          function useState2(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer2, initialArg, init3) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer2, initialArg, init3);
          }
          function useRef3(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect3(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create5, deps);
          }
          function useInsertionEffect(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create5, deps);
          }
          function useLayoutEffect(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create5, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo2(create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create5, deps);
          }
          function useImperativeHandle(ref, create5, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create5, deps);
          }
          function useDebugValue(value12, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value12, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value12) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value12);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name15, source3, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name15;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c4 = controlLines.length - 1;
                while (s3 >= 1 && c4 >= 0 && sampleLines[s3] !== controlLines[c4]) {
                  c4--;
                }
                for (; s3 >= 1 && c4 >= 0; s3--, c4--) {
                  if (sampleLines[s3] !== controlLines[c4]) {
                    if (s3 !== 1 || c4 !== 1) {
                      do {
                        s3--;
                        c4--;
                        if (c4 < 0 || sampleLines[s3] !== controlLines[c4]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c4 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name15 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source3, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type2, source3, ownerFn) {
            if (type2 == null) {
              return "";
            }
            if (typeof type2 === "function") {
              {
                return describeNativeComponentFrame(type2, shouldConstruct(type2));
              }
            }
            if (typeof type2 === "string") {
              return describeBuiltInComponentFrame(type2);
            }
            switch (type2) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type2.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type2.type, source3, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init3(payload), source3, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location2, componentName, element2) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                setExtraStackFrame(stack2);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name15 = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name15) {
                return "\n\nCheck the render method of `" + name15 + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source3) {
            if (source3 !== void 0) {
              var fileName = source3.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source3.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element2, parentType) {
            if (!element2._store || element2._store.validated || element2.key != null) {
              return;
            }
            element2._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element2 && element2._owner && element2._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element2._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element2);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray2(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator2 = iteratorFn.call(node);
                  var step3;
                  while (!(step3 = iterator2.next()).done) {
                    if (isValidElement(step3.value)) {
                      validateExplicitKey(step3.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element2) {
            {
              var type2 = element2.type;
              if (type2 === null || type2 === void 0 || typeof type2 === "string") {
                return;
              }
              var propTypes;
              if (typeof type2 === "function") {
                propTypes = type2.propTypes;
              } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type2.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name15 = getComponentNameFromType(type2);
                checkPropTypes(propTypes, element2.props, "prop", name15, element2);
              } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type2);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment2) {
            {
              var keys3 = Object.keys(fragment2.props);
              for (var i2 = 0; i2 < keys3.length; i2++) {
                var key = keys3[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment2);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment2.ref !== null) {
                setCurrentlyValidatingElement$1(fragment2);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type2, props, children3) {
            var validType = isValidElementType(type2);
            if (!validType) {
              var info = "";
              if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type2 === null) {
                typeString = "null";
              } else if (isArray2(type2)) {
                typeString = "array";
              } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type2;
              }
              {
                error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element2 = createElement2.apply(this, arguments);
            if (element2 == null) {
              return element2;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type2);
              }
            }
            if (type2 === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element2);
            } else {
              validatePropTypes(element2);
            }
            return element2;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type2) {
            var validatedFactory = createElementWithValidation.bind(null, type2);
            validatedFactory.type = type2;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type2
                  });
                  return type2;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element2, props, children3) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope2, options2) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope2();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error3) {
                popActScope(prevActScopeDepth);
                throw error3;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error3) {
                      popActScope(prevActScopeDepth);
                      reject(error3);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error3) {
                  reject(error3);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error3) {
                  queue = queue.slice(i2 + 1);
                  throw error3;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext2;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect3;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo2;
          exports.useReducer = useReducer2;
          exports.useRef = useRef3;
          exports.useState = useState2;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push2(heap, node) {
            var index5 = heap.length;
            heap.push(node);
            siftUp(heap, node, index5);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop2(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first2 = heap[0];
            var last3 = heap.pop();
            if (last3 !== first2) {
              heap[0] = last3;
              siftDown(heap, last3, 0);
            }
            return first2;
          }
          function siftUp(heap, node, i2) {
            var index5 = i2;
            while (index5 > 0) {
              var parentIndex = index5 - 1 >>> 1;
              var parent2 = heap[parentIndex];
              if (compare4(parent2, node) > 0) {
                heap[parentIndex] = node;
                heap[index5] = parent2;
                index5 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i2) {
            var index5 = i2;
            var length8 = heap.length;
            var halfLength = length8 >>> 1;
            while (index5 < halfLength) {
              var leftIndex = (index5 + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (compare4(left2, node) < 0) {
                if (rightIndex < length8 && compare4(right2, left2) < 0) {
                  heap[index5] = right2;
                  heap[rightIndex] = node;
                  index5 = rightIndex;
                } else {
                  heap[index5] = left2;
                  heap[leftIndex] = node;
                  index5 = leftIndex;
                }
              } else if (rightIndex < length8 && compare4(right2, node) < 0) {
                heap[index5] = right2;
                heap[rightIndex] = node;
                index5 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare4(a3, b2) {
            var diff = a3.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a3.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate2 = Date;
            var initialTime = localDate2.now();
            exports.unstable_now = function() {
              return localDate2.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime2) {
            var timer2 = peek(timerQueue);
            while (timer2 !== null) {
              if (timer2.callback === null) {
                pop2(timerQueue);
              } else if (timer2.startTime <= currentTime2) {
                pop2(timerQueue);
                timer2.sortIndex = timer2.expirationTime;
                push2(taskQueue, timer2);
              } else {
                return;
              }
              timer2 = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime2) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime2);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime2);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error2) {
                  if (currentTask !== null) {
                    var currentTime2 = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime2);
                    currentTask.isQueued = false;
                  }
                  throw error2;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime2 = initialTime2;
            advanceTimers(currentTime2);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime2 && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime2;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime2 = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop2(taskQueue);
                  }
                }
                advanceTimers(currentTime2);
              } else {
                pop2(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime2);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options2) {
            var currentTime2 = exports.unstable_now();
            var startTime2;
            if (typeof options2 === "object" && options2 !== null) {
              var delay2 = options2.delay;
              if (typeof delay2 === "number" && delay2 > 0) {
                startTime2 = currentTime2 + delay2;
              } else {
                startTime2 = currentTime2;
              }
            } else {
              startTime2 = currentTime2;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime2) {
              newTask.sortIndex = startTime2;
              push2(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime2);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime2 = exports.unstable_now();
              startTime = currentTime2;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime2);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port2 = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port2.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React9 = require_react();
          var Scheduler2 = require_scheduler();
          var ReactSharedInternals = React9.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn2(format4) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format4, args);
              }
            }
          }
          function error2(format4) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format4, args);
              }
            }
          }
          function printWarning(level, format4, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format4 += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format4);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment2 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value12) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type2 = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
              return type2;
            }
          }
          function willCoercionThrow(value12) {
            {
              try {
                testStringCoercion(value12);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value12) {
            return "" + value12;
          }
          function checkAttributeStringCoercion(value12, attributeName) {
            {
              if (willCoercionThrow(value12)) {
                error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkKeyStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkPropStringCoercion(value12, propName) {
            {
              if (willCoercionThrow(value12)) {
                error2("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value12, propName) {
            {
              if (willCoercionThrow(value12)) {
                error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkHtmlStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error2("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error2("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name15, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name15.length > 2 && (name15[0] === "o" || name15[0] === "O") && (name15[1] === "n" || name15[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value12) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name15.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name15, value12, propertyInfo, isCustomComponentTag) {
            if (value12 === null || typeof value12 === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value12;
                case OVERLOADED_BOOLEAN:
                  return value12 === false;
                case NUMERIC:
                  return isNaN(value12);
                case POSITIVE_NUMERIC:
                  return isNaN(value12) || value12 < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name15) {
            return properties.hasOwnProperty(name15) ? properties[name15] : null;
          }
          function PropertyInfoRecord(name15, type2, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type2 === BOOLEANISH_STRING || type2 === BOOLEAN || type2 === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name15;
            this.type = type2;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(
              name15,
              RESERVED,
              false,
              name15,
              null,
              false,
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref2) {
            var name15 = _ref2[0], attributeName = _ref2[1];
            properties[name15] = new PropertyInfoRecord(
              name15,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(
              name15,
              BOOLEANISH_STRING,
              false,
              name15.toLowerCase(),
              null,
              false,
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(
              name15,
              BOOLEANISH_STRING,
              false,
              name15,
              null,
              false,
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(
              name15,
              BOOLEAN,
              false,
              name15.toLowerCase(),
              null,
              false,
              false
            );
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(
              name15,
              BOOLEAN,
              true,
              name15,
              null,
              false,
              false
            );
          });
          [
            "capture",
            "download"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(
              name15,
              OVERLOADED_BOOLEAN,
              false,
              name15,
              null,
              false,
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(
              name15,
              POSITIVE_NUMERIC,
              false,
              name15,
              null,
              false,
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(
              name15,
              NUMERIC,
              false,
              name15.toLowerCase(),
              null,
              false,
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(
              name15,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(
              name15,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(
              name15,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name15, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name15);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value12 = node.getAttribute(attributeName);
                    if (value12 === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name15, expected, propertyInfo, false)) {
                      return value12;
                    }
                    if (value12 === "" + expected) {
                      return expected;
                    }
                    return value12;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name15, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name15, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name15, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name15)) {
                return;
              }
              if (!node.hasAttribute(name15)) {
                return expected === void 0 ? void 0 : null;
              }
              var value12 = node.getAttribute(name15);
              {
                checkAttributeStringCoercion(expected, name15);
              }
              if (value12 === "" + expected) {
                return expected;
              }
              return value12;
            }
          }
          function setValueForProperty(node, name15, value12, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name15);
            if (shouldIgnoreAttribute(name15, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name15, value12, propertyInfo, isCustomComponentTag)) {
              value12 = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name15)) {
                var _attributeName = name15;
                if (value12 === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value12, name15);
                  }
                  node.setAttribute(_attributeName, "" + value12);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value12 === null) {
                var type2 = propertyInfo.type;
                node[propertyName] = type2 === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value12;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value12 === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value12 === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value12, attributeName);
                  }
                  attributeValue = "" + value12;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name15, source3, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name15;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c4 = controlLines.length - 1;
                while (s3 >= 1 && c4 >= 0 && sampleLines[s3] !== controlLines[c4]) {
                  c4--;
                }
                for (; s3 >= 1 && c4 >= 0; s3--, c4--) {
                  if (sampleLines[s3] !== controlLines[c4]) {
                    if (s3 !== 1 || c4 !== 1) {
                      do {
                        s3--;
                        c4--;
                        if (c4 < 0 || sampleLines[s3] !== controlLines[c4]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c4 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name15 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source3, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source3, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type2, source3, ownerFn) {
            if (type2 == null) {
              return "";
            }
            if (typeof type2 === "function") {
              {
                return describeNativeComponentFrame(type2, shouldConstruct(type2));
              }
            }
            if (typeof type2 === "string") {
              return describeBuiltInComponentFrame(type2);
            }
            switch (type2) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type2.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type2.type, source3, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init3(payload), source3, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source3 = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName2 = outerType.displayName;
            if (displayName2) {
              return displayName2;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type2) {
            return type2.displayName || "Context";
          }
          function getComponentNameFromType(type2) {
            if (type2 == null) {
              return null;
            }
            {
              if (typeof type2.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type2 === "function") {
              return type2.displayName || type2.name || null;
            }
            if (typeof type2 === "string") {
              return type2;
            }
            switch (type2) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type2;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type2;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type2, type2.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type2.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type2.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init3(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type2) {
            return type2.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type2 = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type2;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider2 = type2;
                return getContextName$1(provider2._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type2, type2.render, "ForwardRef");
              case Fragment2:
                return "Fragment";
              case HostComponent:
                return type2;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type2);
              case Mode:
                if (type2 === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type2 === "function") {
                  return type2.displayName || type2.name || null;
                }
                if (typeof type2 === "string") {
                  return type2;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value12) {
            return "" + value12;
          }
          function getToStringValue(value12) {
            switch (typeof value12) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value12;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value12);
                }
                return value12;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName2, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem2) {
            var type2 = elem2.type;
            var nodeName = elem2.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type2 === "checkbox" || type2 === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value12 = "";
            if (!node) {
              return value12;
            }
            if (isCheckable(node)) {
              value12 = node.checked ? "true" : "false";
            } else {
              value12 = node.value;
            }
            return value12;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get5 = descriptor.get, set4 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get5.call(this);
              },
              set: function(value12) {
                {
                  checkFormFieldValueStringCoercion(value12);
                }
                currentValue = "" + value12;
                set4.call(this, value12);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value12) {
                {
                  checkFormFieldValueStringCoercion(value12);
                }
                currentValue = "" + value12;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track2(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element2, props) {
            var node = element2;
            var checked2 = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked2 != null ? checked2 : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element2, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element2;
            var defaultValue4 = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue4),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element2, props) {
            var node = element2;
            var checked2 = props.checked;
            if (checked2 != null) {
              setValueForProperty(node, "checked", checked2, false);
            }
          }
          function updateWrapper(element2, props) {
            var node = element2;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element2, props);
            var value12 = getToStringValue(props.value);
            var type2 = props.type;
            if (value12 != null) {
              if (type2 === "number") {
                if (value12 === 0 && node.value === "" || node.value != value12) {
                  node.value = toString(value12);
                }
              } else if (node.value !== toString(value12)) {
                node.value = toString(value12);
              }
            } else if (type2 === "submit" || type2 === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue4(node, props.type, value12);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue4(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element2, props, isHydrating2) {
            var node = element2;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type2 = props.type;
              var isButton = type2 === "submit" || type2 === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name15 = node.name;
            if (name15 !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name15 !== "") {
              node.name = name15;
            }
          }
          function restoreControlledState(element2, props) {
            var node = element2;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name15 = props.name;
            if (props.type === "radio" && name15 != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name15, "name");
              }
              var group3 = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name15) + '][type="radio"]');
              for (var i2 = 0; i2 < group3.length; i2++) {
                var otherNode = group3[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue4(node, type2, value12) {
            if (type2 !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value12 == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value12)) {
                node.defaultValue = toString(value12);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element2, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React9.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element2, props) {
            if (props.value != null) {
              element2.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a3) {
            return isArrayImpl(a3);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple3, propValue, setDefaultSelected2) {
            var options3 = node.options;
            if (multiple3) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options3.length; _i++) {
                var selected2 = selectedValue.hasOwnProperty("$" + options3[_i].value);
                if (options3[_i].selected !== selected2) {
                  options3[_i].selected = selected2;
                }
                if (selected2 && setDefaultSelected2) {
                  options3[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected2 = null;
              for (var _i2 = 0; _i2 < options3.length; _i2++) {
                if (options3[_i2].value === _selectedValue) {
                  options3[_i2].selected = true;
                  if (setDefaultSelected2) {
                    options3[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected2 === null && !options3[_i2].disabled) {
                  defaultSelected2 = options3[_i2];
                }
              }
              if (defaultSelected2 !== null) {
                defaultSelected2.selected = true;
              }
            }
          }
          function getHostProps$1(element2, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element2, props) {
            var node = element2;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element2, props) {
            var node = element2;
            node.multiple = !!props.multiple;
            var value12 = props.value;
            if (value12 != null) {
              updateOptions(node, !!props.multiple, value12, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element2, props) {
            var node = element2;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value12 = props.value;
            if (value12 != null) {
              updateOptions(node, !!props.multiple, value12, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element2, props) {
            var node = element2;
            var value12 = props.value;
            if (value12 != null) {
              updateOptions(node, !!props.multiple, value12, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element2, props) {
            var node = element2;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element2, props) {
            var node = element2;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children3 = props.children, defaultValue4 = props.defaultValue;
              if (children3 != null) {
                {
                  error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue4 != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children3)) {
                    if (children3.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children3 = children3[0];
                  }
                  defaultValue4 = children3;
                }
              }
              if (defaultValue4 == null) {
                defaultValue4 = "";
              }
              initialValue = defaultValue4;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element2, props) {
            var node = element2;
            var value12 = getToStringValue(props.value);
            var defaultValue4 = getToStringValue(props.defaultValue);
            if (value12 != null) {
              var newValue = toString(value12);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue4 != null) {
              node.defaultValue = toString(defaultValue4);
            }
          }
          function postMountWrapper$3(element2, props) {
            var node = element2;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element2, props) {
            updateWrapper$1(element2, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type2) {
            switch (type2) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type2) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type2);
            }
            if (parentNamespace === SVG_NAMESPACE && type2 === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode2 = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode2.firstChild) {
                  node.appendChild(svgNode2.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text6) {
            if (text6) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text6;
                return;
              }
            }
            node.textContent = text6;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes2 = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes2.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name15, value12, isCustomProperty) {
            var isEmpty2 = value12 == null || typeof value12 === "boolean" || value12 === "";
            if (isEmpty2) {
              return "";
            }
            if (!isCustomProperty && typeof value12 === "number" && value12 !== 0 && !(isUnitlessNumber.hasOwnProperty(name15) && isUnitlessNumber[name15])) {
              return value12 + "px";
            }
            {
              checkCSSPropertyStringCoercion(value12, name15);
            }
            return ("" + value12).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name15) {
            return name15.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string2) {
              return string2.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name15) {
              if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
                return;
              }
              warnedStyleNames[name15] = true;
              error2(
                "Unsupported style property %s. Did you mean %s?",
                name15,
                camelize(name15.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name15) {
              if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
                return;
              }
              warnedStyleNames[name15] = true;
              error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name15, name15.charAt(0).toUpperCase() + name15.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name15, value12) {
              if (warnedStyleValues.hasOwnProperty(value12) && warnedStyleValues[value12]) {
                return;
              }
              warnedStyleValues[value12] = true;
              error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name15, value12.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name15, value12) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error2("`NaN` is an invalid value for the `%s` css style property.", name15);
            };
            var warnStyleValueIsInfinity = function(name15, value12) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error2("`Infinity` is an invalid value for the `%s` css style property.", name15);
            };
            warnValidStyle = function(name15, value12) {
              if (name15.indexOf("-") > -1) {
                warnHyphenatedStyleName(name15);
              } else if (badVendoredStyleNamePattern.test(name15)) {
                warnBadVendoredStyleName(name15);
              } else if (badStyleValueWithSemicolonPattern.test(value12)) {
                warnStyleValueWithSemicolon(name15, value12);
              }
              if (typeof value12 === "number") {
                if (isNaN(value12)) {
                  warnStyleValueIsNaN(name15, value12);
                } else if (!isFinite(value12)) {
                  warnStyleValueIsInfinity(name15, value12);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue2 = styles2[styleName];
                if (styleValue2 != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue2, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles2) {
            var style3 = node.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue2 = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue2);
              } else {
                style3[styleName] = styleValue2;
              }
            }
          }
          function isValueEmpty(value12) {
            return value12 == null || typeof value12 === "boolean" || value12 === "";
          }
          function expandShorthandMap(styles2) {
            var expanded = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName2, props) {
            if (tagName2.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName2) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName2, name15) {
            {
              if (hasOwnProperty.call(warnedProperties, name15) && warnedProperties[name15]) {
                return true;
              }
              if (rARIACamel.test(name15)) {
                var ariaName = "aria-" + name15.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name15);
                  warnedProperties[name15] = true;
                  return true;
                }
                if (name15 !== correctName) {
                  error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name15, correctName);
                  warnedProperties[name15] = true;
                  return true;
                }
              }
              if (rARIA.test(name15)) {
                var lowerCasedName = name15.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name15] = true;
                  return false;
                }
                if (name15 !== standardName) {
                  error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name15, standardName);
                  warnedProperties[name15] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type2, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type2, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2);
              } else if (invalidProps.length > 1) {
                error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2);
              }
            }
          }
          function validateProperties(type2, props) {
            if (isCustomComponent(type2, props)) {
              return;
            }
            warnInvalidARIAProps(type2, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type2, props) {
            {
              if (type2 !== "input" && type2 !== "textarea" && type2 !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type2 === "select" && props.multiple) {
                  error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type2);
                } else {
                  error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type2);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName2, name15, value12, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name15) && warnedProperties$1[name15]) {
                return true;
              }
              var lowerCasedName = name15.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name15)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error2("Invalid event handler property `%s`. Did you mean `%s`?", name15, registrationName);
                  warnedProperties$1[name15] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name15)) {
                  error2("Unknown event handler property `%s`. It will be ignored.", name15);
                  warnedProperties$1[name15] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name15)) {
                if (INVALID_EVENT_NAME_REGEX.test(name15)) {
                  error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name15);
                }
                warnedProperties$1[name15] = true;
                return true;
              }
              if (rARIA$1.test(name15) || rARIACamel$1.test(name15)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (lowerCasedName === "is" && value12 !== null && value12 !== void 0 && typeof value12 !== "string") {
                error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value12);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (typeof value12 === "number" && isNaN(value12)) {
                error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name15);
                warnedProperties$1[name15] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name15);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name15) {
                  error2("Invalid DOM property `%s`. Did you mean `%s`?", name15, standardName);
                  warnedProperties$1[name15] = true;
                  return true;
                }
              } else if (!isReserved && name15 !== lowerCasedName) {
                error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name15, lowerCasedName);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (typeof value12 === "boolean" && shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
                if (value12) {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value12, name15, name15, value12, name15);
                } else {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value12, name15, name15, value12, name15, name15, name15);
                }
                warnedProperties$1[name15] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
                warnedProperties$1[name15] = true;
                return false;
              }
              if ((value12 === "false" || value12 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value12, name15, value12 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name15, value12);
                warnedProperties$1[name15] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type2, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type2, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2);
              } else if (unknownProps.length > 1) {
                error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2);
              }
            }
          };
          function validateProperties$2(type2, props, eventRegistry) {
            if (isCustomComponent(type2, props)) {
              return;
            }
            warnUnknownProperties(type2, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error2("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error2("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target5 = nativeEvent.target || nativeEvent.srcElement || window;
            if (target5.correspondingUseElement) {
              target5 = target5.correspondingUseElement;
            }
            return target5.nodeType === TEXT_NODE ? target5.parentNode : target5;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target5) {
            var internalInstance = getInstanceFromNode(target5);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target5) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target5);
              } else {
                restoreQueue = [target5];
              }
            } else {
              restoreTarget = target5;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target5 = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target5);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a3, b2) {
            if (isInsideEventHandler) {
              return fn(a3, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a3, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name15, type2, props) {
            switch (name15) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type2));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options2 = {};
              Object.defineProperty(options2, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options2, options2);
              window.removeEventListener("test", options2, options2);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name15, func, context, a3, b2, c4, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name15, func, context, a3, b2, c4, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error3;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error3 = event.error;
                  didSetError = true;
                  if (error3 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error3 != null && typeof error3 === "object") {
                      try {
                        error3._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name15 ? name15 : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error3);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error3) {
              hasError = true;
              caughtError = error3;
            }
          };
          function invokeGuardedCallback(name15, func, context, a3, b2, c4, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name15, func, context, a3, b2, c4, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error3 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error3;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error3 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error3;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error3 = caughtError;
              hasError = false;
              caughtError = null;
              return error3;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get4(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set3(key, value12) {
            key._reactInternals = value12;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot | 0;
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component2) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get4(component2);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a3 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a3.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a3 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a3) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a3.return !== b2.return) {
                a3 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a3 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a3) {
                      didFindChild = true;
                      a3 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a3 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a3.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a3.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a3.stateNode.current === a3) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler2.unstable_scheduleCallback;
          var cancelCallback = Scheduler2.unstable_cancelCallback;
          var shouldYield = Scheduler2.unstable_shouldYield;
          var requestPaint = Scheduler2.unstable_requestPaint;
          var now3 = Scheduler2.unstable_now;
          var getCurrentPriorityLevel = Scheduler2.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler2.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler2.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler2.unstable_NormalPriority;
          var LowPriority = Scheduler2.unstable_LowPriority;
          var IdlePriority = Scheduler2.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler2.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler2.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error2("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children3) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children3);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error2("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map14 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index6 = 0; index6 < TotalLanes; index6++) {
                var label5 = getLabelForLane(lane);
                map14.set(lane, label5);
                lane *= 2;
              }
              return map14;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log3 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x2) {
            var asUint = x2 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log3(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index6 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index6;
                nextLanes |= entanglements[index6];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              var eventTime = eventTimes[index6];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime2) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime2 + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime2 + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime2) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              var expirationTime = expirationTimes[index6];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index6] = computeExpirationTime(lane, currentTime2);
                }
              } else if (expirationTime <= currentTime2) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a3, b2) {
            return (a3 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set4, subset) {
            return (set4 & subset) === subset;
          }
          function mergeLanes(a3, b2) {
            return a3 | b2;
          }
          function removeLanes(set4, subset) {
            return set4 & ~subset;
          }
          function intersectLanes(a3, b2) {
            return a3 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a3, b2) {
            return a3 !== NoLane && a3 < b2 ? a3 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index6 = laneToIndex(updateLane);
            eventTimes[index6] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              expirationTimes[index6] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              entanglements[index6] = NoLanes;
              eventTimes[index6] = NoTimestamp;
              expirationTimes[index6] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index6 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index6;
              if (lane & entangledLanes | entanglements[index6] & entangledLanes) {
                entanglements[index6] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index6 = laneToIndex(lanes);
              var lane = 1 << index6;
              var updaters = pendingUpdatersLaneMap[index6];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index6 = laneToIndex(lanes);
              var lane = 1 << index6;
              var updaters = pendingUpdatersLaneMap[index6];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a3, b2) {
            return a3 !== 0 && a3 < b2 ? a3 : b2;
          }
          function lowerEventPriority(a3, b2) {
            return a3 === 0 || a3 > b2 ? a3 : b2;
          }
          function isHigherEventPriority(a3, b2) {
            return a3 !== 0 && a3 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target5) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target: target5,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map14) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map14.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler2.unstable_scheduleCallback(Scheduler2.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent2;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target5, eventType, listener) {
            target5.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target5, eventType, listener) {
            target5.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target5, eventType, listener, passive) {
            target5.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target5, eventType, listener, passive) {
            target5.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset2() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start3;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start3 = 0; start3 < startLength; start3++) {
              if (startValue[start3] !== endValue[start3]) {
                break;
              }
            }
            var minEnd = startLength - start3;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start3, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset2();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem2) {
            var nodeName = elem2 && elem2.nodeName && elem2.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem2.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element2 = document.createElement("div");
              element2.setAttribute(eventName, "return;");
              isSupported = typeof element2[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target5) {
            enqueueStateRestore(target5);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target5);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem2) {
            var nodeName = elem2.nodeName && elem2.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem2.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target5, targetInst) {
            activeElement = target5;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target5, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target5, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem2) {
            var nodeName = elem2.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem2.type === "checkbox" || elem2.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state3 = node._wrapperState;
            if (!state3 || !state3.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue4(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode2 = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode2;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode2;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset2) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection2 = win.getSelection && win.getSelection();
            if (!selection2 || selection2.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection2.anchorNode, anchorOffset = selection2.anchorOffset, focusNode = selection2.focusNode, focusOffset = selection2.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length8 = 0;
            var start3 = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start3 = length8 + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length8 + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length8 += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start3 = length8;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length8;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start3 === -1 || end === -1) {
              return null;
            }
            return {
              start: start3,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection2 = win.getSelection();
            var length8 = node.textContent.length;
            var start3 = Math.min(offsets.start, length8);
            var end = offsets.end === void 0 ? start3 : Math.min(offsets.end, length8);
            if (!selection2.extend && start3 > end) {
              var temp = end;
              end = start3;
              start3 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start3);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection2.rangeCount === 1 && selection2.anchorNode === startMarker.node && selection2.anchorOffset === startMarker.offset && selection2.focusNode === endMarker.node && selection2.focusOffset === endMarker.offset) {
                return;
              }
              var range5 = doc.createRange();
              range5.setStart(startMarker.node, startMarker.offset);
              selection2.removeAllRanges();
              if (start3 > end) {
                selection2.addRange(range5);
                selection2.extend(endMarker.node, endMarker.offset);
              } else {
                range5.setEnd(endMarker.node, endMarker.offset);
                selection2.addRange(range5);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe2) {
            try {
              return typeof iframe2.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element2 = getActiveElement();
            while (element2 instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element2)) {
                win = element2.contentWindow;
              } else {
                return element2;
              }
              element2 = getActiveElement(win.document);
            }
            return element2;
          }
          function hasSelectionCapabilities(elem2) {
            var nodeName = elem2 && elem2.nodeName && elem2.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem2.type === "text" || elem2.type === "search" || elem2.type === "tel" || elem2.type === "url" || elem2.type === "password") || nodeName === "textarea" || elem2.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input3) {
            var selection2;
            if ("selectionStart" in input3) {
              selection2 = {
                start: input3.selectionStart,
                end: input3.selectionEnd
              };
            } else {
              selection2 = getOffsets(input3);
            }
            return selection2 || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input3, offsets) {
            var start3 = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start3;
            }
            if ("selectionStart" in input3) {
              input3.selectionStart = start3;
              input3.selectionEnd = Math.min(end, input3.value.length);
            } else {
              setOffsets(input3, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection2 = win.getSelection();
              return {
                anchorNode: selection2.anchorNode,
                anchorOffset: selection2.anchorOffset,
                focusNode: selection2.focusNode,
                focusOffset: selection2.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes3 = {};
            prefixes3[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes3["Webkit" + styleProp] = "webkit" + eventName;
            prefixes3["Moz" + styleProp] = "moz" + eventName;
            return prefixes3;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style2 = {};
          if (canUseDOM) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type2 = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type2, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error2('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target5) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error2('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target5, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target5, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target5;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type2, props) {
              validateProperties(type2, props);
              validateProperties$1(type2, props);
              validateProperties$2(type2, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name15) {
                names.push(name15);
              });
              error2("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent2, html2) {
              var testElement = parent2.namespaceURI === HTML_NAMESPACE ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement2(type2, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type2);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type2, props);
                if (!isCustomComponentTag && type2 !== type2.toLowerCase()) {
                  error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type2);
                }
              }
              if (type2 === "script") {
                var div3 = ownerDocument.createElement("div");
                div3.innerHTML = "<script><\/script>";
                var firstChild = div3.firstChild;
                domElement = div3.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type2, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type2);
                if (type2 === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type2);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type2)) {
                  warnedUnknownTags[type2] = true;
                  error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type2);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text6, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text6);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name15 = attributes[_i].name.toLowerCase();
                switch (name15) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text6, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text6;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text6) {
            {
              if (text6 === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text6, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error2("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type2;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type2 = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type2 = container.tagName;
                namespace = getChildNamespace(ownNamespace, type2);
                break;
              }
            }
            {
              var validatedTag = type2.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type2, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type2);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type2);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type2, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type2, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string2 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement2(type2, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type2, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type2, props, rootContainerInstance);
            switch (type2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type2, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string2 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type2, oldProps, newProps);
          }
          function shouldSetTextContent(type2, props) {
            return type2 === "textarea" || type2 === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text6, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text6, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text6, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error3) {
            setTimeout(function() {
              throw error3;
            });
          }
          function commitMount(domElement, type2, newProps, internalInstanceHandle) {
            switch (type2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type2, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type2, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text6) {
            textInstance.nodeValue = text6;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type2, props) {
            if (instance.nodeType !== ELEMENT_NODE || type2.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text6) {
            if (text6 === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message2, stack2;
            if (dataset) {
              digest = dataset.dgst;
              {
                message2 = dataset.msg;
                stack2 = dataset.stck;
              }
            }
            {
              return {
                message: message2,
                digest,
                stack: stack2
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type2, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type2, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text6, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text6);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text6, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text6, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text6, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text6, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type2, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type2);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text6) {
            {
              warnForInsertedHydratedText(parentContainer, text6);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type2, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type2);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text6) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text6);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type2, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type2);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text6, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text6);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error2("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location2, componentName, element2) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index5 = -1;
          function createCursor(defaultValue4) {
            return {
              current: defaultValue4
            };
          }
          function pop2(cursor, fiber) {
            if (index5 < 0) {
              {
                error2("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index5]) {
                error2("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index5];
            valueStack[index5] = null;
            {
              fiberStack[index5] = null;
            }
            index5--;
          }
          function push2(cursor, value12, fiber) {
            index5++;
            valueStack[index5] = cursor.current;
            {
              fiberStack[index5] = fiber;
            }
            cursor.current = value12;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type2 = workInProgress2.type;
              var contextTypes = type2.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name15 = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name15);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type2) {
            {
              var childContextTypes = type2.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type2, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type2.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name15 = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name15);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type2, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type2, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop2(didPerformWorkStackCursor, workInProgress2);
                pop2(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop2(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error3) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error3;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id3 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id3.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index6) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot2 = index6 + 1;
            var length8 = getBitLength(totalChildren) + baseLength;
            if (length8 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot2 << restOfBaseLength;
              var id3 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id3;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot2 << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length8 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number6) {
            return 32 - clz32(number6);
          }
          function getLeadingBit(id3) {
            return 1 << getBitLength(id3) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error2("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error2("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type2 = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type2);
                      break;
                    case HostText:
                      var text6 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text6);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type2 = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type2);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text6 = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text6);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
              parent2 = parent2.return;
            }
            hydrationParentFiber = parent2;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error3) {
            if (hydrationErrors === null) {
              hydrationErrors = [error3];
            } else {
              hydrationErrors.push(error3);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set4) {
              var array3 = [];
              set4.forEach(function(value12) {
                array3.push(value12);
              });
              return array3.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop2(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent2, renderLanes2, propagationRoot) {
            var node = parent2;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error2("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update2 = createUpdate(NoTimestamp, lane);
                      update2.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update2.next = update2;
                        } else {
                          update2.next = pending.next;
                          pending.next = update2;
                        }
                        sharedQueue.pending = update2;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value12 = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value12,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value12;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent2 = sourceFiber.return;
            while (parent2 !== null) {
              parent2.childLanes = mergeLanes(parent2.childLanes, lane);
              alternate = parent2.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent2.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent2;
              parent2 = parent2.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update2 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update2;
          }
          function enqueueUpdate(fiber, update2, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update2.next = update2;
              } else {
                update2.next = pending.next;
                pending.next = update2;
              }
              sharedQueue.pending = update2;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update2, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update2 = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update2.eventTime,
                      lane: update2.lane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update2 = update2.next;
                  } while (update2 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update2, prevState, nextProps, instance) {
            switch (update2.tag) {
              case ReplaceState: {
                var payload = update2.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update2.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update2 = firstBaseUpdate;
              do {
                var updateLane = update2.lane;
                var updateEventTime = update2.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update2.tag,
                    payload: update2.payload,
                    callback: update2.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update2, newState, props, instance);
                  var callback = update2.callback;
                  if (callback !== null && update2.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update2];
                    } else {
                      effects.push(update2);
                    }
                  }
                }
                update2 = update2.next;
                if (update2 === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update2 = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React9.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type2, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type2) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update2.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update2, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ReplaceState;
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update2.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update2, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update2.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update2, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name15 = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name15);
                } else {
                  error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name15);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name15);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name15);
              }
              if (instance.propTypes) {
                error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name15);
              }
              if (instance.contextType) {
                error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name15);
              }
              {
                if (instance.contextTypes) {
                  error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name15);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name15);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name15);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name15);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name15);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name15);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name15);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name15, name15);
              }
              if (instance.defaultProps) {
                error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name15, name15);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name15);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error2("%s.state: must be set to an object or null", name15);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name15);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set3(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state3 = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state3 === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element2) {
            var mixedRef = element2.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element2._owner && element2._self && element2._owner.stateNode !== element2._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element2._owner) {
                var owner = element2._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value12) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value12 === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value12;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element2._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init3 = lazyType._init;
            return init3(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element2, lanes) {
              var elementType = element2.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element2.props.children, lanes, element2.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element2) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element2.props);
                  existing.ref = coerceRef(returnFiber, current2, element2);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element2._source;
                    existing._debugOwner = element2._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element2, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element2);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment2, lanes, key) {
              if (current2 === null || current2.tag !== Fragment2) {
                var created = createFiberFromFragment(fragment2, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment2);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init3 = newChild._init;
                    return createChild(returnFiber, init3(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init3 = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init3(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init3 = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init3(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init3 = child._init;
                    warnOnInvalidKey(init3(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step3 = newChildren.next();
              for (; oldFiber !== null && !step3.done; newIdx++, step3 = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step3.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step3.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step3.done; newIdx++, step3 = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step3.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step3.done; newIdx++, step3 = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step3.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element2, lanes) {
              var key = element2.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element2.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment2) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element2.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element2._source;
                        existing._debugOwner = element2._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element2) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element2.props);
                      _existing.ref = coerceRef(returnFiber, child, element2);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element2._source;
                        _existing._debugOwner = element2._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element2.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element2.props.children, returnFiber.mode, lanes, element2.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element2, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element2);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init3 = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init3(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c4) {
            if (c4 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c4;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop2(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
            pop2(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop2(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state3 = node.memoizedState;
                if (state3 !== null) {
                  var dehydrated = state3.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table2 = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table2 += row;
                  }
                  error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children3 = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children3 = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error2("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children3;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state3, action2) {
            return typeof action2 === "function" ? action2(state3) : action2;
          }
          function mountReducer(reducer2, initialArg, init3) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init3 !== void 0) {
              initialState = init3(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer2,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateReducer(reducer2, initialArg, init3) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer2;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first2 = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update2 = first2;
              do {
                var updateLane = update2.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update2.action,
                    hasEagerState: update2.hasEagerState,
                    eagerState: update2.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update2.action,
                      hasEagerState: update2.hasEagerState,
                      eagerState: update2.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update2.hasEagerState) {
                    newState = update2.eagerState;
                  } else {
                    var action2 = update2.action;
                    newState = reducer2(newState, action2);
                  }
                }
                update2 = update2.next;
              } while (update2 !== null && update2 !== first2);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch2 = queue.dispatch;
            return [hook.memoizedState, dispatch2];
          }
          function rerenderReducer(reducer2, initialArg, init3) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer2;
            var dispatch2 = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update2 = firstRenderPhaseUpdate;
              do {
                var action2 = update2.action;
                newState = reducer2(newState, action2);
                update2 = update2.next;
              } while (update2 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch2];
          }
          function mountMutableSource(source3, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source3, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error2("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error2("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error2("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error3) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create5, destroy, deps) {
            var effect = {
              tag,
              create: create5,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create5, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create5, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create5, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create5, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create5, destroy, nextDeps);
          }
          function mountEffect(create5, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create5, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create5, deps);
            }
          }
          function updateEffect(create5, deps) {
            return updateEffectImpl(Passive, Passive$1, create5, deps);
          }
          function mountInsertionEffect(create5, deps) {
            return mountEffectImpl(Update, Insertion, create5, deps);
          }
          function updateInsertionEffect(create5, deps) {
            return updateEffectImpl(Update, Insertion, create5, deps);
          }
          function mountLayoutEffect(create5, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create5, deps);
          }
          function updateLayoutEffect(create5, deps) {
            return updateEffectImpl(Update, Layout, create5, deps);
          }
          function imperativeHandleEffect(create5, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create5();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create5();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create5, deps) {
            {
              if (typeof create5 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create5 !== null ? typeof create5 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create5, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create5, deps) {
            {
              if (typeof create5 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create5 !== null ? typeof create5 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create5, ref), effectDeps);
          }
          function mountDebugValue(value12, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value12) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value12;
            return value12;
          }
          function updateDeferredValue(value12) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value12);
          }
          function rerenderDeferredValue(value12) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value12;
              return value12;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value12);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value12) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value12, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value12;
              return value12;
            }
          }
          function startTransition(setPending, callback, options3) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start3 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start3;
            return [isPending, start3];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start3 = hook.memoizedState;
            return [isPending, start3];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start3 = hook.memoizedState;
            return [isPending, start3];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id3;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id3 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id3 += "H" + localId.toString(32);
              }
              id3 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id3 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id3;
            return id3;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id3 = hook.memoizedState;
            return id3;
          }
          function dispatchReducerAction(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action2);
                    update2.hasEagerState = true;
                    update2.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane);
                      return;
                    }
                  } catch (error3) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update2) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update2.next = update2;
            } else {
              update2.next = pending.next;
              pending.next = update2;
            }
            queue.pending = update2;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action2) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create5, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create5, deps);
              },
              useImperativeHandle: function(ref, create5, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create5, deps);
              },
              useInsertionEffect: function(create5, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create5, deps);
              },
              useLayoutEffect: function(create5, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create5, deps);
              },
              useMemo: function(create5, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create5, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler2.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value12, source3) {
            return {
              value: value12,
              source: source3,
              stack: getStackByFiberInDevAndProd(source3),
              digest: null
            };
          }
          function createCapturedValue(value12, digest, stack2) {
            return {
              value: value12,
              source: null,
              stack: stack2 != null ? stack2 : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error3 = errorInfo.value;
              if (true) {
                var source3 = errorInfo.source;
                var stack2 = errorInfo.stack;
                var componentStack = stack2 !== null ? stack2 : "";
                if (error3 != null && error3._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error3);
                }
                var componentName = source3 ? getComponentNameFromFiber(source3) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error3);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            update2.payload = {
              element: null
            };
            var error3 = errorInfo.value;
            update2.callback = function() {
              onUncaughtError(error3);
              logCapturedError(fiber, errorInfo);
            };
            return update2;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update2.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update2.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update2.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack2 = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack2 !== null ? stack2 : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update2;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update2 = createUpdate(NoTimestamp, SyncLane);
                    update2.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update2, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException2(root3, returnFiber, sourceFiber, value12, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value12 !== null && typeof value12 === "object" && typeof value12.then === "function") {
              var wakeable = value12;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value12 = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value12, sourceFiber));
                  return;
                }
              }
            }
            value12 = createCapturedValueAtFiber(value12, sourceFiber);
            renderDidError(value12);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value12;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value12;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type2 = Component.type;
              if (isSimpleFunctionComponent(type2) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type2;
                {
                  resolvedType = resolveFunctionForHotReloading(type2);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type2);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(type2)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare4 = Component.compare;
              compare4 = compare4 !== null ? compare4 : shallowEqual;
              if (compare4(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    outerMemoType = init3(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state3 = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state3, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type2 = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type2, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type2, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init3 = lazyComponent._init;
            var Component = init3(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value12;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value12 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value12.state !== null && value12.state !== void 0 ? value12.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value12);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value12 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value12, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error2("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error2("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode2 & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode2, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode2, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode2 & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error2("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message2, stack2;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message2 = _getSuspenseInstanceF.message;
                  stack2 = _getSuspenseInstanceF.stack;
                }
                var error3;
                if (message2) {
                  error3 = new Error(message2);
                } else {
                  error3 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error3, digest, stack2);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state3 = node.memoizedState;
                if (state3 !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index6) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable2 = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable2) {
                var type2 = isAnArray ? "array" : "iterable";
                error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type2, index6, type2);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children3, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children3 !== void 0 && children3 !== null && children3 !== false) {
                if (isArray2(children3)) {
                  for (var i2 = 0; i2 < children3.length; i2++) {
                    if (!validateSuspenseListNestedChild(children3[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children3);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children3);
                    if (childrenIterator) {
                      var step3 = childrenIterator.next();
                      var _i = 0;
                      for (; !step3.done; step3 = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step3.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    _tail,
                    null,
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    null,
                    null,
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state3 = workInProgress2.memoizedState;
                if (state3 !== null) {
                  if (state3.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type2 = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type2 ? _unresolvedProps2 : resolveDefaultProps(type2, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type2, _resolvedProps2, renderLanes2);
              }
              case Fragment2:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden2) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent2, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type2, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment2:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type2 = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type2, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type2, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type2, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now3() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now3() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now3();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error3) {
            {
              invokeGuardedCallback(null, function() {
                throw error3;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error3) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error3);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create5 = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create5();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error2("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id3 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id3, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type2 = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type2, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden2) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden2) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden2) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null) {
              if (isHostParent(parent2)) {
                return parent2;
              }
              parent2 = parent2.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent2 = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent2);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent2);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent2) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent2, stateNode, before);
              } else {
                appendChildToContainer(parent2, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent2) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent2, stateNode, before);
              } else {
                appendChild(parent2, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent2 = returnFiber;
              findParent:
                while (parent2 !== null) {
                  switch (parent2.tag) {
                    case HostComponent: {
                      hostParent = parent2.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent2 = parent2.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent2) {
            var child = parent2.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (deletedFiber.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error3) {
                  captureCommitPhaseError(childToDelete, parentFiber, error3);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type2 = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type2, oldProps, newProps, finishedWork);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden2 = newState !== null;
                  offscreenInstance.isHidden = isHidden2;
                  if (isHidden2) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden2 = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden2 || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden2 = fiber.memoizedState !== null;
                  if (isHidden2) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden2 = fiber.memoizedState !== null;
                if (isHidden2) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error2("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil2 = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now3() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now3();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now3();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition2 = ReactCurrentBatchConfig$3.transition;
                if (!transition2._updatedFibers) {
                  transition2._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition2._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error2("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (executionContext & RenderContext) !== NoContext;
          }
          function ensureRootIsScheduled(root3, currentTime2) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime2);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error2("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now3());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now3());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now3());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now3();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now3() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i2 = 0; i2 < checks.length; i2++) {
                      var check = checks[i2];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error3) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now3());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now3());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now3());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now3());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a3, b2, c4, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a3, b2, c4, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop2(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException2(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now3();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error3) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error3];
            } else {
              workInProgressRootConcurrentErrors.push(error3);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error2("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now3());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error3) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error3;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
            var errorInfo = createCapturedValueAtFiber(error3, sourceFiber);
            var update2 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update2, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update2 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update2, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error2("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now3() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil2(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error2("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler2) {
            {
              resolveFamily = handler2;
            }
          };
          function resolveFunctionForHotReloading(type2) {
            {
              if (resolveFamily === null) {
                return type2;
              }
              var family = resolveFamily(type2);
              if (family === void 0) {
                return type2;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type2) {
            return resolveFunctionForHotReloading(type2);
          }
          function resolveForwardRefForHotReloading(type2) {
            {
              if (resolveFamily === null) {
                return type2;
              }
              var family = resolveFamily(type2);
              if (family === void 0) {
                if (type2 !== null && type2 !== void 0 && typeof type2.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type2.render);
                  if (type2.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type2.displayName !== void 0) {
                      syntheticType.displayName = type2.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type2;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element2) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element2.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update2) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update2.staleFamilies, updatedFamilies = update2.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element2) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element2, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type2;
                  break;
                case ForwardRef:
                  candidateType = type2.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type2;
                  break;
                case ForwardRef:
                  candidateType = type2.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode2) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode2;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode2) {
            return new FiberNode(tag, pendingProps, key, mode2);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type2) {
            return typeof type2 === "function" && !shouldConstruct$1(type2) && type2.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode2;
            if (tag === ConcurrentRoot) {
              mode2 = ConcurrentMode;
              if (isStrictMode === true) {
                mode2 |= StrictLegacyMode;
                {
                  mode2 |= StrictEffectsMode;
                }
              }
            } else {
              mode2 = NoMode;
            }
            if (isDevToolsPresent) {
              mode2 |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode2);
          }
          function createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode2, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type2;
            if (typeof type2 === "function") {
              if (shouldConstruct$1(type2)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type2 === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type2) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode2, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode2 |= StrictLegacyMode;
                    if ((mode2 & ConcurrentMode) !== NoMode) {
                      mode2 |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode2, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode2, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type2 === "object" && type2 !== null) {
                      switch (type2.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type2 == null ? type2 : typeof type2) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode2);
            fiber.elementType = type2;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element2, mode2, lanes) {
            var owner = null;
            {
              owner = element2._owner;
            }
            var type2 = element2.type;
            var key = element2.key;
            var pendingProps = element2.props;
            var fiber = createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode2, lanes);
            {
              fiber._debugSource = element2._source;
              fiber._debugOwner = element2._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode2, lanes, key) {
            var fiber = createFiber(Fragment2, elements, key, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode2, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error2('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode2 | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content3, mode2, lanes) {
            var fiber = createFiber(HostText, content3, null, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode2, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode2);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target5, source3) {
            if (target5 === null) {
              target5 = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target5.tag = source3.tag;
            target5.key = source3.key;
            target5.elementType = source3.elementType;
            target5.type = source3.type;
            target5.stateNode = source3.stateNode;
            target5.return = source3.return;
            target5.child = source3.child;
            target5.sibling = source3.sibling;
            target5.index = source3.index;
            target5.ref = source3.ref;
            target5.pendingProps = source3.pendingProps;
            target5.memoizedProps = source3.memoizedProps;
            target5.updateQueue = source3.updateQueue;
            target5.memoizedState = source3.memoizedState;
            target5.dependencies = source3.dependencies;
            target5.mode = source3.mode;
            target5.flags = source3.flags;
            target5.subtreeFlags = source3.subtreeFlags;
            target5.deletions = source3.deletions;
            target5.lanes = source3.lanes;
            target5.childLanes = source3.childLanes;
            target5.alternate = source3.alternate;
            {
              target5.actualDuration = source3.actualDuration;
              target5.actualStartTime = source3.actualStartTime;
              target5.selfBaseDuration = source3.selfBaseDuration;
              target5.treeBaseDuration = source3.treeBaseDuration;
            }
            target5._debugSource = source3._debugSource;
            target5._debugOwner = source3._debugOwner;
            target5._debugNeedsRemount = source3._debugNeedsRemount;
            target5._debugHookTypes = source3._debugHookTypes;
            return target5;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children3, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children: children3,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get4(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component2, methodName) {
            {
              var fiber = get4(component2);
              if (fiber === void 0) {
                if (typeof component2.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys3 = Object.keys(component2).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys3);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update2 = createUpdate(eventTime, lane);
            update2.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update2, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element2, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element2);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update2 = createUpdate(eventTime, lane);
            update2.payload = {
              element: element2
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update2.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update2, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path2, index6) {
              var key = path2[index6];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index6 + 1 === path2.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path2, index6 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path2) {
              return copyWithDeleteImpl(obj, path2, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index6) {
              var oldKey = oldPath[index6];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index6 + 1 === oldPath.length) {
                var newKey = newPath[index6];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index6 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path2, index6, value12) {
              if (index6 >= path2.length) {
                return value12;
              }
              var key = path2[index6];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path2, index6 + 1, value12);
              return updated;
            };
            var copyWithSet = function(obj, path2, value12) {
              return copyWithSetImpl(obj, path2, 0, value12);
            };
            var findHook = function(fiber, id3) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id3 > 0) {
                currentHook2 = currentHook2.next;
                id3--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id3, path2, value12) {
              var hook = findHook(fiber, id3);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path2, value12);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id3, path2) {
              var hook = findHook(fiber, id3);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id3, oldPath, newPath) {
              var hook = findHook(fiber, id3);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path2, value12) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value12);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path2) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error3) {
            console["error"](error3);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children3) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error2("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error2("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children3, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error2("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options3) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options3 !== null && options3 !== void 0) {
              {
                if (options3.hydrate) {
                  warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options3 === "object" && options3 !== null && options3.$$typeof === REACT_ELEMENT_TYPE) {
                    error2("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options3.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options3.identifierPrefix !== void 0) {
                identifierPrefix = options3.identifierPrefix;
              }
              if (options3.onRecoverableError !== void 0) {
                onRecoverableError = options3.onRecoverableError;
              }
              if (options3.transitionCallbacks !== void 0) {
                transitionCallbacks = options3.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target5) {
            if (target5) {
              queueExplicitHydrationTarget(target5);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot2(container, initialChildren, options3) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error2("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options3 != null ? options3 : null;
            var mutableSources = options3 != null && options3.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options3 !== null && options3 !== void 0) {
              if (options3.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options3.identifierPrefix !== void 0) {
                identifierPrefix = options3.identifierPrefix;
              }
              if (options3.onRecoverableError !== void 0) {
                onRecoverableError = options3.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error2("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error2("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children3, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children3, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children3, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element2, container, callback) {
            {
              error2("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, true, callback);
          }
          function render(element2, container, callback) {
            {
              error2("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            {
              error2("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element2, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children3, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children3, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options3) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options3);
          }
          function hydrateRoot$1(container, initialChildren, options3) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot2(container, initialChildren, options3);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol2 = window.location.protocol;
                if (/^(https?|file):$/.test(protocol2)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol2 === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i2 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c4, o) {
          i2.usingClientEntryPoint = true;
          try {
            return m.createRoot(c4, o);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c4, h, o) {
          i2.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c4, h, o);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // output/Control.Semigroupoid/index.js
  var semigroupoidFn = {
    compose: function(f) {
      return function(g) {
        return function(x2) {
          return f(g(x2));
        };
      };
    }
  };

  // output/Control.Category/index.js
  var identity = function(dict) {
    return dict.identity;
  };
  var categoryFn = {
    identity: function(x2) {
      return x2;
    },
    Semigroupoid0: function() {
      return semigroupoidFn;
    }
  };

  // output/Data.Boolean/index.js
  var otherwise = true;

  // output/Data.Function/index.js
  var flip = function(f) {
    return function(b2) {
      return function(a3) {
        return f(a3)(b2);
      };
    };
  };
  var $$const = function(a3) {
    return function(v) {
      return a3;
    };
  };

  // output/Data.Functor/foreign.js
  var arrayMap = function(f) {
    return function(arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i2 = 0; i2 < l; i2++) {
        result[i2] = f(arr[i2]);
      }
      return result;
    };
  };

  // output/Data.Unit/foreign.js
  var unit = void 0;

  // output/Type.Proxy/index.js
  var $$Proxy = /* @__PURE__ */ function() {
    function $$Proxy2() {
    }
    ;
    $$Proxy2.value = new $$Proxy2();
    return $$Proxy2;
  }();

  // output/Data.Functor/index.js
  var map = function(dict) {
    return dict.map;
  };
  var mapFlipped = function(dictFunctor) {
    var map1 = map(dictFunctor);
    return function(fa) {
      return function(f) {
        return map1(f)(fa);
      };
    };
  };
  var $$void = function(dictFunctor) {
    return map(dictFunctor)($$const(unit));
  };
  var functorArray = {
    map: arrayMap
  };

  // output/Control.Apply/index.js
  var identity2 = /* @__PURE__ */ identity(categoryFn);
  var apply = function(dict) {
    return dict.apply;
  };
  var applySecond = function(dictApply) {
    var apply1 = apply(dictApply);
    var map14 = map(dictApply.Functor0());
    return function(a3) {
      return function(b2) {
        return apply1(map14($$const(identity2))(a3))(b2);
      };
    };
  };
  var lift2 = function(dictApply) {
    var apply1 = apply(dictApply);
    var map14 = map(dictApply.Functor0());
    return function(f) {
      return function(a3) {
        return function(b2) {
          return apply1(map14(f)(a3))(b2);
        };
      };
    };
  };

  // output/Control.Applicative/index.js
  var pure = function(dict) {
    return dict.pure;
  };
  var liftA1 = function(dictApplicative) {
    var apply3 = apply(dictApplicative.Apply0());
    var pure13 = pure(dictApplicative);
    return function(f) {
      return function(a3) {
        return apply3(pure13(f))(a3);
      };
    };
  };

  // output/Control.Bind/index.js
  var discard = function(dict) {
    return dict.discard;
  };
  var bind = function(dict) {
    return dict.bind;
  };
  var discardUnit = {
    discard: function(dictBind) {
      return bind(dictBind);
    }
  };

  // output/Data.Array/foreign.js
  var replicateFill = function(count2) {
    return function(value12) {
      if (count2 < 1) {
        return [];
      }
      var result = new Array(count2);
      return result.fill(value12);
    };
  };
  var replicatePolyfill = function(count2) {
    return function(value12) {
      var result = [];
      var n = 0;
      for (var i2 = 0; i2 < count2; i2++) {
        result[n++] = value12;
      }
      return result;
    };
  };
  var replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
  var fromFoldableImpl = function() {
    function Cons3(head3, tail) {
      this.head = head3;
      this.tail = tail;
    }
    var emptyList = {};
    function curryCons(head3) {
      return function(tail) {
        return new Cons3(head3, tail);
      };
    }
    function listToArray(list) {
      var result = [];
      var count2 = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count2++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }
    return function(foldr3) {
      return function(xs) {
        return listToArray(foldr3(curryCons)(emptyList)(xs));
      };
    };
  }();
  var length = function(xs) {
    return xs.length;
  };
  var indexImpl = function(just) {
    return function(nothing) {
      return function(xs) {
        return function(i2) {
          return i2 < 0 || i2 >= xs.length ? nothing : just(xs[i2]);
        };
      };
    };
  };
  var findIndexImpl = function(just) {
    return function(nothing) {
      return function(f) {
        return function(xs) {
          for (var i2 = 0, l = xs.length; i2 < l; i2++) {
            if (f(xs[i2]))
              return just(i2);
          }
          return nothing;
        };
      };
    };
  };
  var sortByImpl = function() {
    function mergeFromTo(compare4, fromOrdering, xs1, xs2, from2, to) {
      var mid3;
      var i2;
      var j;
      var k2;
      var x2;
      var y2;
      var c4;
      mid3 = from2 + (to - from2 >> 1);
      if (mid3 - from2 > 1)
        mergeFromTo(compare4, fromOrdering, xs2, xs1, from2, mid3);
      if (to - mid3 > 1)
        mergeFromTo(compare4, fromOrdering, xs2, xs1, mid3, to);
      i2 = from2;
      j = mid3;
      k2 = from2;
      while (i2 < mid3 && j < to) {
        x2 = xs2[i2];
        y2 = xs2[j];
        c4 = fromOrdering(compare4(x2)(y2));
        if (c4 > 0) {
          xs1[k2++] = y2;
          ++j;
        } else {
          xs1[k2++] = x2;
          ++i2;
        }
      }
      while (i2 < mid3) {
        xs1[k2++] = xs2[i2++];
      }
      while (j < to) {
        xs1[k2++] = xs2[j++];
      }
    }
    return function(compare4) {
      return function(fromOrdering) {
        return function(xs) {
          var out;
          if (xs.length < 2)
            return xs;
          out = xs.slice(0);
          mergeFromTo(compare4, fromOrdering, out, xs.slice(0), 0, xs.length);
          return out;
        };
      };
    };
  }();
  var slice = function(s3) {
    return function(e) {
      return function(l) {
        return l.slice(s3, e);
      };
    };
  };
  var zipWith = function(f) {
    return function(xs) {
      return function(ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i2 = 0; i2 < l; i2++) {
          result[i2] = f(xs[i2])(ys[i2]);
        }
        return result;
      };
    };
  };

  // output/Data.Semigroup/foreign.js
  var concatString = function(s1) {
    return function(s22) {
      return s1 + s22;
    };
  };
  var concatArray = function(xs) {
    return function(ys) {
      if (xs.length === 0)
        return ys;
      if (ys.length === 0)
        return xs;
      return xs.concat(ys);
    };
  };

  // output/Data.Symbol/index.js
  var reflectSymbol = function(dict) {
    return dict.reflectSymbol;
  };

  // output/Record.Unsafe/foreign.js
  var unsafeGet = function(label5) {
    return function(rec) {
      return rec[label5];
    };
  };

  // output/Data.Semigroup/index.js
  var semigroupUnit = {
    append: function(v) {
      return function(v1) {
        return unit;
      };
    }
  };
  var semigroupString = {
    append: concatString
  };
  var semigroupArray = {
    append: concatArray
  };
  var append = function(dict) {
    return dict.append;
  };

  // output/Control.Monad/index.js
  var ap = function(dictMonad) {
    var bind7 = bind(dictMonad.Bind1());
    var pure8 = pure(dictMonad.Applicative0());
    return function(f) {
      return function(a3) {
        return bind7(f)(function(f$prime) {
          return bind7(a3)(function(a$prime2) {
            return pure8(f$prime(a$prime2));
          });
        });
      };
    };
  };

  // output/Data.Bounded/foreign.js
  var topInt = 2147483647;
  var bottomInt = -2147483648;
  var topChar = String.fromCharCode(65535);
  var bottomChar = String.fromCharCode(0);
  var topNumber = Number.POSITIVE_INFINITY;
  var bottomNumber = Number.NEGATIVE_INFINITY;

  // output/Data.Ord/foreign.js
  var unsafeCompareImpl = function(lt) {
    return function(eq5) {
      return function(gt) {
        return function(x2) {
          return function(y2) {
            return x2 < y2 ? lt : x2 === y2 ? eq5 : gt;
          };
        };
      };
    };
  };
  var ordIntImpl = unsafeCompareImpl;

  // output/Data.Eq/foreign.js
  var refEq = function(r1) {
    return function(r2) {
      return r1 === r2;
    };
  };
  var eqIntImpl = refEq;
  var eqNumberImpl = refEq;

  // output/Data.Eq/index.js
  var eqRowNil = {
    eqRecord: function(v) {
      return function(v1) {
        return function(v2) {
          return true;
        };
      };
    }
  };
  var eqRecord = function(dict) {
    return dict.eqRecord;
  };
  var eqRec = function() {
    return function(dictEqRecord) {
      return {
        eq: eqRecord(dictEqRecord)($$Proxy.value)
      };
    };
  };
  var eqNumber = {
    eq: eqNumberImpl
  };
  var eqInt = {
    eq: eqIntImpl
  };
  var eq = function(dict) {
    return dict.eq;
  };
  var eqRowCons = function(dictEqRecord) {
    var eqRecord1 = eqRecord(dictEqRecord);
    return function() {
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        return function(dictEq) {
          var eq32 = eq(dictEq);
          return {
            eqRecord: function(v) {
              return function(ra) {
                return function(rb2) {
                  var tail = eqRecord1($$Proxy.value)(ra)(rb2);
                  var key = reflectSymbol2($$Proxy.value);
                  var get4 = unsafeGet(key);
                  return eq32(get4(ra))(get4(rb2)) && tail;
                };
              };
            }
          };
        };
      };
    };
  };

  // output/Data.Ordering/index.js
  var LT = /* @__PURE__ */ function() {
    function LT2() {
    }
    ;
    LT2.value = new LT2();
    return LT2;
  }();
  var GT = /* @__PURE__ */ function() {
    function GT2() {
    }
    ;
    GT2.value = new GT2();
    return GT2;
  }();
  var EQ = /* @__PURE__ */ function() {
    function EQ2() {
    }
    ;
    EQ2.value = new EQ2();
    return EQ2;
  }();

  // output/Data.Ord/index.js
  var ordInt = /* @__PURE__ */ function() {
    return {
      compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqInt;
      }
    };
  }();
  var compare = function(dict) {
    return dict.compare;
  };

  // output/Data.Bounded/index.js
  var top = function(dict) {
    return dict.top;
  };
  var boundedInt = {
    top: topInt,
    bottom: bottomInt,
    Ord0: function() {
      return ordInt;
    }
  };
  var bottom = function(dict) {
    return dict.bottom;
  };

  // output/Data.Show/foreign.js
  var showIntImpl = function(n) {
    return n.toString();
  };

  // output/Data.Show/index.js
  var showInt = {
    show: showIntImpl
  };
  var show = function(dict) {
    return dict.show;
  };

  // output/Data.Maybe/index.js
  var identity3 = /* @__PURE__ */ identity(categoryFn);
  var Nothing = /* @__PURE__ */ function() {
    function Nothing2() {
    }
    ;
    Nothing2.value = new Nothing2();
    return Nothing2;
  }();
  var Just = /* @__PURE__ */ function() {
    function Just2(value0) {
      this.value0 = value0;
    }
    ;
    Just2.create = function(value0) {
      return new Just2(value0);
    };
    return Just2;
  }();
  var maybe = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Nothing) {
          return v;
        }
        ;
        if (v2 instanceof Just) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var functorMaybe = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof Just) {
          return new Just(v(v1.value0));
        }
        ;
        return Nothing.value;
      };
    }
  };
  var map2 = /* @__PURE__ */ map(functorMaybe);
  var fromMaybe = function(a3) {
    return maybe(a3)(identity3);
  };
  var fromJust = function() {
    return function(v) {
      if (v instanceof Just) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): " + [v.constructor.name]);
    };
  };
  var eqMaybe = function(dictEq) {
    var eq5 = eq(dictEq);
    return {
      eq: function(x2) {
        return function(y2) {
          if (x2 instanceof Nothing && y2 instanceof Nothing) {
            return true;
          }
          ;
          if (x2 instanceof Just && y2 instanceof Just) {
            return eq5(x2.value0)(y2.value0);
          }
          ;
          return false;
        };
      }
    };
  };
  var applyMaybe = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return map2(v.value0)(v1);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var bindMaybe = {
    bind: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return v1(v.value0);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyMaybe;
    }
  };
  var applicativeMaybe = /* @__PURE__ */ function() {
    return {
      pure: Just.create,
      Apply0: function() {
        return applyMaybe;
      }
    };
  }();

  // output/Data.Either/index.js
  var Left = /* @__PURE__ */ function() {
    function Left2(value0) {
      this.value0 = value0;
    }
    ;
    Left2.create = function(value0) {
      return new Left2(value0);
    };
    return Left2;
  }();
  var Right = /* @__PURE__ */ function() {
    function Right2(value0) {
      this.value0 = value0;
    }
    ;
    Right2.create = function(value0) {
      return new Right2(value0);
    };
    return Right2;
  }();
  var note = function(a3) {
    return maybe(new Left(a3))(Right.create);
  };
  var functorEither = {
    map: function(f) {
      return function(m) {
        if (m instanceof Left) {
          return new Left(m.value0);
        }
        ;
        if (m instanceof Right) {
          return new Right(f(m.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): " + [m.constructor.name]);
      };
    }
  };
  var map3 = /* @__PURE__ */ map(functorEither);
  var either = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Left) {
          return v(v2.value0);
        }
        ;
        if (v2 instanceof Right) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var applyEither = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof Left) {
          return new Left(v.value0);
        }
        ;
        if (v instanceof Right) {
          return map3(v.value0)(v1);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorEither;
    }
  };
  var bindEither = {
    bind: /* @__PURE__ */ either(function(e) {
      return function(v) {
        return new Left(e);
      };
    })(function(a3) {
      return function(f) {
        return f(a3);
      };
    }),
    Apply0: function() {
      return applyEither;
    }
  };
  var applicativeEither = /* @__PURE__ */ function() {
    return {
      pure: Right.create,
      Apply0: function() {
        return applyEither;
      }
    };
  }();

  // output/Data.Monoid/index.js
  var monoidUnit = {
    mempty: unit,
    Semigroup0: function() {
      return semigroupUnit;
    }
  };
  var monoidString = {
    mempty: "",
    Semigroup0: function() {
      return semigroupString;
    }
  };
  var monoidArray = {
    mempty: [],
    Semigroup0: function() {
      return semigroupArray;
    }
  };
  var mempty = function(dict) {
    return dict.mempty;
  };
  var guard = function(dictMonoid) {
    var mempty1 = mempty(dictMonoid);
    return function(v) {
      return function(v1) {
        if (v) {
          return v1;
        }
        ;
        if (!v) {
          return mempty1;
        }
        ;
        throw new Error("Failed pattern match at Data.Monoid (line 96, column 1 - line 96, column 49): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };

  // output/Effect/foreign.js
  var pureE = function(a3) {
    return function() {
      return a3;
    };
  };
  var bindE = function(a3) {
    return function(f) {
      return function() {
        return f(a3())();
      };
    };
  };

  // output/Effect/index.js
  var $runtime_lazy = function(name15, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var monadEffect = {
    Applicative0: function() {
      return applicativeEffect;
    },
    Bind1: function() {
      return bindEffect;
    }
  };
  var bindEffect = {
    bind: bindE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var applicativeEffect = {
    pure: pureE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
    return {
      map: liftA1(applicativeEffect)
    };
  });
  var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
    return {
      apply: ap(monadEffect),
      Functor0: function() {
        return $lazy_functorEffect(0);
      }
    };
  });
  var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);
  var applyEffect = /* @__PURE__ */ $lazy_applyEffect(23);
  var lift22 = /* @__PURE__ */ lift2(applyEffect);
  var semigroupEffect = function(dictSemigroup) {
    return {
      append: lift22(append(dictSemigroup))
    };
  };
  var monoidEffect = function(dictMonoid) {
    var semigroupEffect1 = semigroupEffect(dictMonoid.Semigroup0());
    return {
      mempty: pureE(mempty(dictMonoid)),
      Semigroup0: function() {
        return semigroupEffect1;
      }
    };
  };

  // output/Data.Array.ST/foreign.js
  var sortByImpl2 = function() {
    function mergeFromTo(compare4, fromOrdering, xs1, xs2, from2, to) {
      var mid3;
      var i2;
      var j;
      var k2;
      var x2;
      var y2;
      var c4;
      mid3 = from2 + (to - from2 >> 1);
      if (mid3 - from2 > 1)
        mergeFromTo(compare4, fromOrdering, xs2, xs1, from2, mid3);
      if (to - mid3 > 1)
        mergeFromTo(compare4, fromOrdering, xs2, xs1, mid3, to);
      i2 = from2;
      j = mid3;
      k2 = from2;
      while (i2 < mid3 && j < to) {
        x2 = xs2[i2];
        y2 = xs2[j];
        c4 = fromOrdering(compare4(x2)(y2));
        if (c4 > 0) {
          xs1[k2++] = y2;
          ++j;
        } else {
          xs1[k2++] = x2;
          ++i2;
        }
      }
      while (i2 < mid3) {
        xs1[k2++] = xs2[i2++];
      }
      while (j < to) {
        xs1[k2++] = xs2[j++];
      }
    }
    return function(compare4) {
      return function(fromOrdering) {
        return function(xs) {
          return function() {
            if (xs.length < 2)
              return xs;
            mergeFromTo(compare4, fromOrdering, xs, xs.slice(0), 0, xs.length);
            return xs;
          };
        };
      };
    };
  }();

  // output/Data.Foldable/foreign.js
  var foldrArray = function(f) {
    return function(init3) {
      return function(xs) {
        var acc = init3;
        var len = xs.length;
        for (var i2 = len - 1; i2 >= 0; i2--) {
          acc = f(xs[i2])(acc);
        }
        return acc;
      };
    };
  };
  var foldlArray = function(f) {
    return function(init3) {
      return function(xs) {
        var acc = init3;
        var len = xs.length;
        for (var i2 = 0; i2 < len; i2++) {
          acc = f(acc)(xs[i2]);
        }
        return acc;
      };
    };
  };

  // output/Data.Tuple/index.js
  var Tuple = /* @__PURE__ */ function() {
    function Tuple2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Tuple2.create = function(value0) {
      return function(value1) {
        return new Tuple2(value0, value1);
      };
    };
    return Tuple2;
  }();
  var uncurry = function(f) {
    return function(v) {
      return f(v.value0)(v.value1);
    };
  };
  var eqTuple = function(dictEq) {
    var eq5 = eq(dictEq);
    return function(dictEq1) {
      var eq13 = eq(dictEq1);
      return {
        eq: function(x2) {
          return function(y2) {
            return eq5(x2.value0)(y2.value0) && eq13(x2.value1)(y2.value1);
          };
        }
      };
    };
  };
  var ordTuple = function(dictOrd) {
    var compare4 = compare(dictOrd);
    var eqTuple1 = eqTuple(dictOrd.Eq0());
    return function(dictOrd1) {
      var compare13 = compare(dictOrd1);
      var eqTuple2 = eqTuple1(dictOrd1.Eq0());
      return {
        compare: function(x2) {
          return function(y2) {
            var v = compare4(x2.value0)(y2.value0);
            if (v instanceof LT) {
              return LT.value;
            }
            ;
            if (v instanceof GT) {
              return GT.value;
            }
            ;
            return compare13(x2.value1)(y2.value1);
          };
        },
        Eq0: function() {
          return eqTuple2;
        }
      };
    };
  };

  // output/Data.Bifunctor/index.js
  var identity4 = /* @__PURE__ */ identity(categoryFn);
  var bimap = function(dict) {
    return dict.bimap;
  };
  var rmap = function(dictBifunctor) {
    return bimap(dictBifunctor)(identity4);
  };
  var bifunctorTuple = {
    bimap: function(f) {
      return function(g) {
        return function(v) {
          return new Tuple(f(v.value0), g(v.value1));
        };
      };
    }
  };

  // output/Unsafe.Coerce/foreign.js
  var unsafeCoerce2 = function(x2) {
    return x2;
  };

  // output/Data.Foldable/index.js
  var foldr = function(dict) {
    return dict.foldr;
  };
  var traverse_ = function(dictApplicative) {
    var applySecond2 = applySecond(dictApplicative.Apply0());
    var pure8 = pure(dictApplicative);
    return function(dictFoldable) {
      var foldr22 = foldr(dictFoldable);
      return function(f) {
        return foldr22(function($449) {
          return applySecond2(f($449));
        })(pure8(unit));
      };
    };
  };
  var for_ = function(dictApplicative) {
    var traverse_1 = traverse_(dictApplicative);
    return function(dictFoldable) {
      return flip(traverse_1(dictFoldable));
    };
  };
  var foldl = function(dict) {
    return dict.foldl;
  };
  var foldableMaybe = {
    foldr: function(v) {
      return function(z) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return z;
          }
          ;
          if (v1 instanceof Just) {
            return v(v1.value0)(z);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
        };
      };
    },
    foldl: function(v) {
      return function(z) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return z;
          }
          ;
          if (v1 instanceof Just) {
            return v(z)(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty4 = mempty(dictMonoid);
      return function(v) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return mempty4;
          }
          ;
          if (v1 instanceof Just) {
            return v(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    }
  };
  var foldMapDefaultR = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictMonoid) {
      var append2 = append(dictMonoid.Semigroup0());
      var mempty4 = mempty(dictMonoid);
      return function(f) {
        return foldr22(function(x2) {
          return function(acc) {
            return append2(f(x2))(acc);
          };
        })(mempty4);
      };
    };
  };
  var foldableArray = {
    foldr: foldrArray,
    foldl: foldlArray,
    foldMap: function(dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
    }
  };
  var foldMap = function(dict) {
    return dict.foldMap;
  };

  // output/Data.Traversable/foreign.js
  var traverseArrayImpl = function() {
    function array1(a3) {
      return [a3];
    }
    function array22(a3) {
      return function(b2) {
        return [a3, b2];
      };
    }
    function array3(a3) {
      return function(b2) {
        return function(c4) {
          return [a3, b2, c4];
        };
      };
    }
    function concat2(xs) {
      return function(ys) {
        return xs.concat(ys);
      };
    }
    return function(apply3) {
      return function(map14) {
        return function(pure8) {
          return function(f) {
            return function(array4) {
              function go2(bot, top4) {
                switch (top4 - bot) {
                  case 0:
                    return pure8([]);
                  case 1:
                    return map14(array1)(f(array4[bot]));
                  case 2:
                    return apply3(map14(array22)(f(array4[bot])))(f(array4[bot + 1]));
                  case 3:
                    return apply3(apply3(map14(array3)(f(array4[bot])))(f(array4[bot + 1])))(f(array4[bot + 2]));
                  default:
                    var pivot = bot + Math.floor((top4 - bot) / 4) * 2;
                    return apply3(map14(concat2)(go2(bot, pivot)))(go2(pivot, top4));
                }
              }
              return go2(0, array4.length);
            };
          };
        };
      };
    };
  }();

  // output/Data.Traversable/index.js
  var identity5 = /* @__PURE__ */ identity(categoryFn);
  var traverse = function(dict) {
    return dict.traverse;
  };
  var sequenceDefault = function(dictTraversable) {
    var traverse2 = traverse(dictTraversable);
    return function(dictApplicative) {
      return traverse2(dictApplicative)(identity5);
    };
  };
  var traversableArray = {
    traverse: function(dictApplicative) {
      var Apply0 = dictApplicative.Apply0();
      return traverseArrayImpl(apply(Apply0))(map(Apply0.Functor0()))(pure(dictApplicative));
    },
    sequence: function(dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
    },
    Functor0: function() {
      return functorArray;
    },
    Foldable1: function() {
      return foldableArray;
    }
  };
  var $$for = function(dictApplicative) {
    return function(dictTraversable) {
      var traverse2 = traverse(dictTraversable)(dictApplicative);
      return function(x2) {
        return function(f) {
          return traverse2(f)(x2);
        };
      };
    };
  };

  // output/Data.Array/index.js
  var index = /* @__PURE__ */ function() {
    return indexImpl(Just.create)(Nothing.value);
  }();
  var last = function(xs) {
    return index(xs)(length(xs) - 1 | 0);
  };
  var fromFoldable = function(dictFoldable) {
    return fromFoldableImpl(foldr(dictFoldable));
  };
  var findIndex = /* @__PURE__ */ function() {
    return findIndexImpl(Just.create)(Nothing.value);
  }();
  var drop = function(n) {
    return function(xs) {
      var $170 = n < 1;
      if ($170) {
        return xs;
      }
      ;
      return slice(n)(length(xs))(xs);
    };
  };

  // output/Data.Date/foreign.js
  var createDate = function(y2, m, d) {
    var date3 = new Date(Date.UTC(y2, m, d));
    if (y2 >= 0 && y2 < 100) {
      date3.setUTCFullYear(y2);
    }
    return date3;
  };
  function canonicalDateImpl(ctor, y2, m, d) {
    var date3 = createDate(y2, m - 1, d);
    return ctor(date3.getUTCFullYear())(date3.getUTCMonth() + 1)(date3.getUTCDate());
  }

  // output/Data.Enum/index.js
  var toEnum = function(dict) {
    return dict.toEnum;
  };
  var fromEnum = function(dict) {
    return dict.fromEnum;
  };

  // output/Data.Date.Component/index.js
  var $runtime_lazy2 = function(name15, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var January = /* @__PURE__ */ function() {
    function January2() {
    }
    ;
    January2.value = new January2();
    return January2;
  }();
  var February = /* @__PURE__ */ function() {
    function February2() {
    }
    ;
    February2.value = new February2();
    return February2;
  }();
  var March = /* @__PURE__ */ function() {
    function March2() {
    }
    ;
    March2.value = new March2();
    return March2;
  }();
  var April = /* @__PURE__ */ function() {
    function April2() {
    }
    ;
    April2.value = new April2();
    return April2;
  }();
  var May = /* @__PURE__ */ function() {
    function May2() {
    }
    ;
    May2.value = new May2();
    return May2;
  }();
  var June = /* @__PURE__ */ function() {
    function June2() {
    }
    ;
    June2.value = new June2();
    return June2;
  }();
  var July = /* @__PURE__ */ function() {
    function July2() {
    }
    ;
    July2.value = new July2();
    return July2;
  }();
  var August = /* @__PURE__ */ function() {
    function August2() {
    }
    ;
    August2.value = new August2();
    return August2;
  }();
  var September = /* @__PURE__ */ function() {
    function September2() {
    }
    ;
    September2.value = new September2();
    return September2;
  }();
  var October = /* @__PURE__ */ function() {
    function October2() {
    }
    ;
    October2.value = new October2();
    return October2;
  }();
  var November = /* @__PURE__ */ function() {
    function November2() {
    }
    ;
    November2.value = new November2();
    return November2;
  }();
  var December = /* @__PURE__ */ function() {
    function December2() {
    }
    ;
    December2.value = new December2();
    return December2;
  }();
  var showMonth = {
    show: function(v) {
      if (v instanceof January) {
        return "January";
      }
      ;
      if (v instanceof February) {
        return "February";
      }
      ;
      if (v instanceof March) {
        return "March";
      }
      ;
      if (v instanceof April) {
        return "April";
      }
      ;
      if (v instanceof May) {
        return "May";
      }
      ;
      if (v instanceof June) {
        return "June";
      }
      ;
      if (v instanceof July) {
        return "July";
      }
      ;
      if (v instanceof August) {
        return "August";
      }
      ;
      if (v instanceof September) {
        return "September";
      }
      ;
      if (v instanceof October) {
        return "October";
      }
      ;
      if (v instanceof November) {
        return "November";
      }
      ;
      if (v instanceof December) {
        return "December";
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 101, column 1 - line 113, column 29): " + [v.constructor.name]);
    }
  };
  var ordYear = ordInt;
  var ordDay = ordInt;
  var eqYear = eqInt;
  var eqMonth = {
    eq: function(x2) {
      return function(y2) {
        if (x2 instanceof January && y2 instanceof January) {
          return true;
        }
        ;
        if (x2 instanceof February && y2 instanceof February) {
          return true;
        }
        ;
        if (x2 instanceof March && y2 instanceof March) {
          return true;
        }
        ;
        if (x2 instanceof April && y2 instanceof April) {
          return true;
        }
        ;
        if (x2 instanceof May && y2 instanceof May) {
          return true;
        }
        ;
        if (x2 instanceof June && y2 instanceof June) {
          return true;
        }
        ;
        if (x2 instanceof July && y2 instanceof July) {
          return true;
        }
        ;
        if (x2 instanceof August && y2 instanceof August) {
          return true;
        }
        ;
        if (x2 instanceof September && y2 instanceof September) {
          return true;
        }
        ;
        if (x2 instanceof October && y2 instanceof October) {
          return true;
        }
        ;
        if (x2 instanceof November && y2 instanceof November) {
          return true;
        }
        ;
        if (x2 instanceof December && y2 instanceof December) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordMonth = {
    compare: function(x2) {
      return function(y2) {
        if (x2 instanceof January && y2 instanceof January) {
          return EQ.value;
        }
        ;
        if (x2 instanceof January) {
          return LT.value;
        }
        ;
        if (y2 instanceof January) {
          return GT.value;
        }
        ;
        if (x2 instanceof February && y2 instanceof February) {
          return EQ.value;
        }
        ;
        if (x2 instanceof February) {
          return LT.value;
        }
        ;
        if (y2 instanceof February) {
          return GT.value;
        }
        ;
        if (x2 instanceof March && y2 instanceof March) {
          return EQ.value;
        }
        ;
        if (x2 instanceof March) {
          return LT.value;
        }
        ;
        if (y2 instanceof March) {
          return GT.value;
        }
        ;
        if (x2 instanceof April && y2 instanceof April) {
          return EQ.value;
        }
        ;
        if (x2 instanceof April) {
          return LT.value;
        }
        ;
        if (y2 instanceof April) {
          return GT.value;
        }
        ;
        if (x2 instanceof May && y2 instanceof May) {
          return EQ.value;
        }
        ;
        if (x2 instanceof May) {
          return LT.value;
        }
        ;
        if (y2 instanceof May) {
          return GT.value;
        }
        ;
        if (x2 instanceof June && y2 instanceof June) {
          return EQ.value;
        }
        ;
        if (x2 instanceof June) {
          return LT.value;
        }
        ;
        if (y2 instanceof June) {
          return GT.value;
        }
        ;
        if (x2 instanceof July && y2 instanceof July) {
          return EQ.value;
        }
        ;
        if (x2 instanceof July) {
          return LT.value;
        }
        ;
        if (y2 instanceof July) {
          return GT.value;
        }
        ;
        if (x2 instanceof August && y2 instanceof August) {
          return EQ.value;
        }
        ;
        if (x2 instanceof August) {
          return LT.value;
        }
        ;
        if (y2 instanceof August) {
          return GT.value;
        }
        ;
        if (x2 instanceof September && y2 instanceof September) {
          return EQ.value;
        }
        ;
        if (x2 instanceof September) {
          return LT.value;
        }
        ;
        if (y2 instanceof September) {
          return GT.value;
        }
        ;
        if (x2 instanceof October && y2 instanceof October) {
          return EQ.value;
        }
        ;
        if (x2 instanceof October) {
          return LT.value;
        }
        ;
        if (y2 instanceof October) {
          return GT.value;
        }
        ;
        if (x2 instanceof November && y2 instanceof November) {
          return EQ.value;
        }
        ;
        if (x2 instanceof November) {
          return LT.value;
        }
        ;
        if (y2 instanceof November) {
          return GT.value;
        }
        ;
        if (x2 instanceof December && y2 instanceof December) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 0, column 0 - line 0, column 0): " + [x2.constructor.name, y2.constructor.name]);
      };
    },
    Eq0: function() {
      return eqMonth;
    }
  };
  var boundedYear = /* @__PURE__ */ function() {
    return {
      bottom: -271820 | 0,
      top: 275759,
      Ord0: function() {
        return ordYear;
      }
    };
  }();
  var boundedMonth = /* @__PURE__ */ function() {
    return {
      bottom: January.value,
      top: December.value,
      Ord0: function() {
        return ordMonth;
      }
    };
  }();
  var boundedEnumYear = {
    cardinality: 547580,
    toEnum: function(n) {
      if (n >= (-271820 | 0) && n <= 275759) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedYear;
    },
    Enum1: function() {
      return $lazy_enumYear(0);
    }
  };
  var $lazy_enumYear = /* @__PURE__ */ $runtime_lazy2("enumYear", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $55 = toEnum(boundedEnumYear);
        var $56 = fromEnum(boundedEnumYear);
        return function($57) {
          return $55(function(v) {
            return v + 1 | 0;
          }($56($57)));
        };
      }(),
      pred: function() {
        var $58 = toEnum(boundedEnumYear);
        var $59 = fromEnum(boundedEnumYear);
        return function($60) {
          return $58(function(v) {
            return v - 1 | 0;
          }($59($60)));
        };
      }(),
      Ord0: function() {
        return ordYear;
      }
    };
  });
  var boundedEnumMonth = {
    cardinality: 12,
    toEnum: function(v) {
      if (v === 1) {
        return new Just(January.value);
      }
      ;
      if (v === 2) {
        return new Just(February.value);
      }
      ;
      if (v === 3) {
        return new Just(March.value);
      }
      ;
      if (v === 4) {
        return new Just(April.value);
      }
      ;
      if (v === 5) {
        return new Just(May.value);
      }
      ;
      if (v === 6) {
        return new Just(June.value);
      }
      ;
      if (v === 7) {
        return new Just(July.value);
      }
      ;
      if (v === 8) {
        return new Just(August.value);
      }
      ;
      if (v === 9) {
        return new Just(September.value);
      }
      ;
      if (v === 10) {
        return new Just(October.value);
      }
      ;
      if (v === 11) {
        return new Just(November.value);
      }
      ;
      if (v === 12) {
        return new Just(December.value);
      }
      ;
      return Nothing.value;
    },
    fromEnum: function(v) {
      if (v instanceof January) {
        return 1;
      }
      ;
      if (v instanceof February) {
        return 2;
      }
      ;
      if (v instanceof March) {
        return 3;
      }
      ;
      if (v instanceof April) {
        return 4;
      }
      ;
      if (v instanceof May) {
        return 5;
      }
      ;
      if (v instanceof June) {
        return 6;
      }
      ;
      if (v instanceof July) {
        return 7;
      }
      ;
      if (v instanceof August) {
        return 8;
      }
      ;
      if (v instanceof September) {
        return 9;
      }
      ;
      if (v instanceof October) {
        return 10;
      }
      ;
      if (v instanceof November) {
        return 11;
      }
      ;
      if (v instanceof December) {
        return 12;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [v.constructor.name]);
    },
    Bounded0: function() {
      return boundedMonth;
    },
    Enum1: function() {
      return $lazy_enumMonth(0);
    }
  };
  var $lazy_enumMonth = /* @__PURE__ */ $runtime_lazy2("enumMonth", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $67 = toEnum(boundedEnumMonth);
        var $68 = fromEnum(boundedEnumMonth);
        return function($69) {
          return $67(function(v) {
            return v + 1 | 0;
          }($68($69)));
        };
      }(),
      pred: function() {
        var $70 = toEnum(boundedEnumMonth);
        var $71 = fromEnum(boundedEnumMonth);
        return function($72) {
          return $70(function(v) {
            return v - 1 | 0;
          }($71($72)));
        };
      }(),
      Ord0: function() {
        return ordMonth;
      }
    };
  });
  var boundedDay = {
    bottom: 1,
    top: 31,
    Ord0: function() {
      return ordDay;
    }
  };
  var boundedEnumDay = {
    cardinality: 31,
    toEnum: function(n) {
      if (n >= 1 && n <= 31) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedDay;
    },
    Enum1: function() {
      return $lazy_enumDay(0);
    }
  };
  var $lazy_enumDay = /* @__PURE__ */ $runtime_lazy2("enumDay", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $73 = toEnum(boundedEnumDay);
        var $74 = fromEnum(boundedEnumDay);
        return function($75) {
          return $73(function(v) {
            return v + 1 | 0;
          }($74($75)));
        };
      }(),
      pred: function() {
        var $76 = toEnum(boundedEnumDay);
        var $77 = fromEnum(boundedEnumDay);
        return function($78) {
          return $76(function(v) {
            return v - 1 | 0;
          }($77($78)));
        };
      }(),
      Ord0: function() {
        return ordDay;
      }
    };
  });

  // output/Data.Int/foreign.js
  var fromNumberImpl = function(just) {
    return function(nothing) {
      return function(n) {
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
  var toNumber = function(n) {
    return n;
  };

  // output/Data.Number/foreign.js
  var isFiniteImpl = isFinite;
  function fromStringImpl(str, isFinite2, just, nothing) {
    var num = parseFloat(str);
    if (isFinite2(num)) {
      return just(num);
    } else {
      return nothing;
    }
  }
  var floor = Math.floor;

  // output/Data.Number/index.js
  var fromString = function(str) {
    return fromStringImpl(str, isFiniteImpl, Just.create, Nothing.value);
  };

  // output/Data.Int/index.js
  var top2 = /* @__PURE__ */ top(boundedInt);
  var bottom2 = /* @__PURE__ */ bottom(boundedInt);
  var fromNumber = /* @__PURE__ */ function() {
    return fromNumberImpl(Just.create)(Nothing.value);
  }();
  var unsafeClamp = function(x2) {
    if (!isFiniteImpl(x2)) {
      return 0;
    }
    ;
    if (x2 >= toNumber(top2)) {
      return top2;
    }
    ;
    if (x2 <= toNumber(bottom2)) {
      return bottom2;
    }
    ;
    if (otherwise) {
      return fromMaybe(0)(fromNumber(x2));
    }
    ;
    throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x2.constructor.name]);
  };
  var floor2 = function($39) {
    return unsafeClamp(floor($39));
  };

  // output/Data.Date/index.js
  var fromEnum2 = /* @__PURE__ */ fromEnum(boundedEnumMonth);
  var fromJust2 = /* @__PURE__ */ fromJust();
  var toEnum2 = /* @__PURE__ */ toEnum(boundedEnumMonth);
  var $$Date = /* @__PURE__ */ function() {
    function $$Date2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    $$Date2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new $$Date2(value0, value1, value22);
        };
      };
    };
    return $$Date2;
  }();
  var year = function(v) {
    return v.value0;
  };
  var month = function(v) {
    return v.value1;
  };
  var day = function(v) {
    return v.value2;
  };
  var canonicalDate = function(y2) {
    return function(m) {
      return function(d) {
        var mkDate = function(y$prime) {
          return function(m$prime) {
            return function(d$prime) {
              return new $$Date(y$prime, fromJust2(toEnum2(m$prime)), d$prime);
            };
          };
        };
        return canonicalDateImpl(mkDate, y2, fromEnum2(m), d);
      };
    };
  };

  // output/Data.FoldableWithIndex/index.js
  var foldrWithIndex = function(dict) {
    return dict.foldrWithIndex;
  };
  var foldlWithIndex = function(dict) {
    return dict.foldlWithIndex;
  };
  var foldMapWithIndex = function(dict) {
    return dict.foldMapWithIndex;
  };

  // output/Data.List.Types/index.js
  var Nil = /* @__PURE__ */ function() {
    function Nil3() {
    }
    ;
    Nil3.value = new Nil3();
    return Nil3;
  }();
  var Cons = /* @__PURE__ */ function() {
    function Cons3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Cons3.create = function(value0) {
      return function(value1) {
        return new Cons3(value0, value1);
      };
    };
    return Cons3;
  }();
  var foldableList = {
    foldr: function(f) {
      return function(b2) {
        var rev3 = function() {
          var go2 = function($copy_acc) {
            return function($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                if (v instanceof Nil) {
                  $tco_done = true;
                  return acc;
                }
                ;
                if (v instanceof Cons) {
                  $tco_var_acc = new Cons(v.value0, acc);
                  $copy_v = v.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Types (line 107, column 7 - line 107, column 23): " + [acc.constructor.name, v.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
              }
              ;
              return $tco_result;
            };
          };
          return go2(Nil.value);
        }();
        var $281 = foldl(foldableList)(flip(f))(b2);
        return function($282) {
          return $281(rev3($282));
        };
      };
    },
    foldl: function(f) {
      var go2 = function($copy_b) {
        return function($copy_v) {
          var $tco_var_b = $copy_b;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(b2, v) {
            if (v instanceof Nil) {
              $tco_done1 = true;
              return b2;
            }
            ;
            if (v instanceof Cons) {
              $tco_var_b = f(b2)(v.value0);
              $copy_v = v.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Types (line 111, column 12 - line 113, column 30): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_b, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go2;
    },
    foldMap: function(dictMonoid) {
      var append2 = append(dictMonoid.Semigroup0());
      var mempty4 = mempty(dictMonoid);
      return function(f) {
        return foldl(foldableList)(function(acc) {
          var $283 = append2(acc);
          return function($284) {
            return $283(f($284));
          };
        })(mempty4);
      };
    }
  };

  // output/Partial.Unsafe/foreign.js
  var _unsafePartial = function(f) {
    return f();
  };

  // output/Partial/foreign.js
  var _crashWith = function(msg2) {
    throw new Error(msg2);
  };

  // output/Partial/index.js
  var crashWith = function() {
    return _crashWith;
  };

  // output/Partial.Unsafe/index.js
  var crashWith2 = /* @__PURE__ */ crashWith();
  var unsafePartial = _unsafePartial;
  var unsafeCrashWith = function(msg2) {
    return unsafePartial(function() {
      return crashWith2(msg2);
    });
  };

  // output/Data.Map.Internal/index.js
  var Leaf = /* @__PURE__ */ function() {
    function Leaf2() {
    }
    ;
    Leaf2.value = new Leaf2();
    return Leaf2;
  }();
  var Two = /* @__PURE__ */ function() {
    function Two2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Two2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Two2(value0, value1, value22, value32);
          };
        };
      };
    };
    return Two2;
  }();
  var Three = /* @__PURE__ */ function() {
    function Three2(value0, value1, value22, value32, value42, value52, value62) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
      this.value6 = value62;
    }
    ;
    Three2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return function(value62) {
                  return new Three2(value0, value1, value22, value32, value42, value52, value62);
                };
              };
            };
          };
        };
      };
    };
    return Three2;
  }();
  var TwoLeft = /* @__PURE__ */ function() {
    function TwoLeft2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    TwoLeft2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new TwoLeft2(value0, value1, value22);
        };
      };
    };
    return TwoLeft2;
  }();
  var TwoRight = /* @__PURE__ */ function() {
    function TwoRight2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    TwoRight2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new TwoRight2(value0, value1, value22);
        };
      };
    };
    return TwoRight2;
  }();
  var ThreeLeft = /* @__PURE__ */ function() {
    function ThreeLeft2(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    ThreeLeft2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new ThreeLeft2(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return ThreeLeft2;
  }();
  var ThreeMiddle = /* @__PURE__ */ function() {
    function ThreeMiddle2(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    ThreeMiddle2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new ThreeMiddle2(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return ThreeMiddle2;
  }();
  var ThreeRight = /* @__PURE__ */ function() {
    function ThreeRight2(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    ThreeRight2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new ThreeRight2(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return ThreeRight2;
  }();
  var KickUp = /* @__PURE__ */ function() {
    function KickUp2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    KickUp2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new KickUp2(value0, value1, value22, value32);
          };
        };
      };
    };
    return KickUp2;
  }();
  var lookup = function(dictOrd) {
    var compare4 = compare(dictOrd);
    return function(k2) {
      var go2 = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Leaf) {
            $tco_done = true;
            return Nothing.value;
          }
          ;
          if (v instanceof Two) {
            var v2 = compare4(k2)(v.value1);
            if (v2 instanceof EQ) {
              $tco_done = true;
              return new Just(v.value2);
            }
            ;
            if (v2 instanceof LT) {
              $copy_v = v.value0;
              return;
            }
            ;
            $copy_v = v.value3;
            return;
          }
          ;
          if (v instanceof Three) {
            var v3 = compare4(k2)(v.value1);
            if (v3 instanceof EQ) {
              $tco_done = true;
              return new Just(v.value2);
            }
            ;
            var v4 = compare4(k2)(v.value4);
            if (v4 instanceof EQ) {
              $tco_done = true;
              return new Just(v.value5);
            }
            ;
            if (v3 instanceof LT) {
              $copy_v = v.value0;
              return;
            }
            ;
            if (v4 instanceof GT) {
              $copy_v = v.value6;
              return;
            }
            ;
            $copy_v = v.value3;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return go2;
    };
  };
  var functorMap = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof Leaf) {
          return Leaf.value;
        }
        ;
        if (v1 instanceof Two) {
          return new Two(map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), map(functorMap)(v)(v1.value3));
        }
        ;
        if (v1 instanceof Three) {
          return new Three(map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), map(functorMap)(v)(v1.value6));
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 116, column 1 - line 119, column 110): " + [v.constructor.name, v1.constructor.name]);
      };
    }
  };
  var fromZipper = function($copy_dictOrd) {
    return function($copy_v) {
      return function($copy_tree) {
        var $tco_var_dictOrd = $copy_dictOrd;
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(dictOrd, v, tree) {
          if (v instanceof Nil) {
            $tco_done = true;
            return tree;
          }
          ;
          if (v instanceof Cons) {
            if (v.value0 instanceof TwoLeft) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
              return;
            }
            ;
            if (v.value0 instanceof TwoRight) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
              return;
            }
            ;
            if (v.value0 instanceof ThreeLeft) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
              return;
            }
            ;
            if (v.value0 instanceof ThreeMiddle) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
              return;
            }
            ;
            if (v.value0 instanceof ThreeRight) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v.value1;
              $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 462, column 3 - line 467, column 88): " + [v.value0.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 459, column 1 - line 459, column 80): " + [v.constructor.name, tree.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
        }
        ;
        return $tco_result;
      };
    };
  };
  var insert = function(dictOrd) {
    var fromZipper1 = fromZipper(dictOrd);
    var compare4 = compare(dictOrd);
    return function(k2) {
      return function(v) {
        var up = function($copy_v1) {
          return function($copy_v2) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v1, v2) {
              if (v1 instanceof Nil) {
                $tco_done = true;
                return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
              }
              ;
              if (v1 instanceof Cons) {
                if (v1.value0 instanceof TwoLeft) {
                  $tco_done = true;
                  return fromZipper1(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                }
                ;
                if (v1.value0 instanceof TwoRight) {
                  $tco_done = true;
                  return fromZipper1(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                }
                ;
                if (v1.value0 instanceof ThreeLeft) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                  return;
                }
                ;
                if (v1.value0 instanceof ThreeMiddle) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                  return;
                }
                ;
                if (v1.value0 instanceof ThreeRight) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.Map.Internal (line 498, column 5 - line 503, column 108): " + [v1.value0.constructor.name, v2.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 3 - line 495, column 56): " + [v1.constructor.name, v2.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v1, $copy_v2);
            }
            ;
            return $tco_result;
          };
        };
        var down = function($copy_ctx) {
          return function($copy_v1) {
            var $tco_var_ctx = $copy_ctx;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(ctx, v1) {
              if (v1 instanceof Leaf) {
                $tco_done1 = true;
                return up(ctx)(new KickUp(Leaf.value, k2, v, Leaf.value));
              }
              ;
              if (v1 instanceof Two) {
                var v2 = compare4(k2)(v1.value1);
                if (v2 instanceof EQ) {
                  $tco_done1 = true;
                  return fromZipper1(ctx)(new Two(v1.value0, k2, v, v1.value3));
                }
                ;
                if (v2 instanceof LT) {
                  $tco_var_ctx = new Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                $tco_var_ctx = new Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                $copy_v1 = v1.value3;
                return;
              }
              ;
              if (v1 instanceof Three) {
                var v3 = compare4(k2)(v1.value1);
                if (v3 instanceof EQ) {
                  $tco_done1 = true;
                  return fromZipper1(ctx)(new Three(v1.value0, k2, v, v1.value3, v1.value4, v1.value5, v1.value6));
                }
                ;
                var v4 = compare4(k2)(v1.value4);
                if (v4 instanceof EQ) {
                  $tco_done1 = true;
                  return fromZipper1(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k2, v, v1.value6));
                }
                ;
                if (v3 instanceof LT) {
                  $tco_var_ctx = new Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                if (v3 instanceof GT && v4 instanceof LT) {
                  $tco_var_ctx = new Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                  $copy_v1 = v1.value3;
                  return;
                }
                ;
                $tco_var_ctx = new Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                $copy_v1 = v1.value6;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 478, column 3 - line 478, column 55): " + [ctx.constructor.name, v1.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
        return down(Nil.value);
      };
    };
  };
  var foldableMap = {
    foldr: function(f) {
      return function(z) {
        return function(m) {
          if (m instanceof Leaf) {
            return z;
          }
          ;
          if (m instanceof Two) {
            return foldr(foldableMap)(f)(f(m.value2)(foldr(foldableMap)(f)(z)(m.value3)))(m.value0);
          }
          ;
          if (m instanceof Three) {
            return foldr(foldableMap)(f)(f(m.value2)(foldr(foldableMap)(f)(f(m.value5)(foldr(foldableMap)(f)(z)(m.value6)))(m.value3)))(m.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 133, column 17 - line 136, column 85): " + [m.constructor.name]);
        };
      };
    },
    foldl: function(f) {
      return function(z) {
        return function(m) {
          if (m instanceof Leaf) {
            return z;
          }
          ;
          if (m instanceof Two) {
            return foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(z)(m.value0))(m.value2))(m.value3);
          }
          ;
          if (m instanceof Three) {
            return foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(z)(m.value0))(m.value2))(m.value3))(m.value5))(m.value6);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 137, column 17 - line 140, column 85): " + [m.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty4 = mempty(dictMonoid);
      var append2 = append(dictMonoid.Semigroup0());
      return function(f) {
        return function(m) {
          if (m instanceof Leaf) {
            return mempty4;
          }
          ;
          if (m instanceof Two) {
            return append2(foldMap(foldableMap)(dictMonoid)(f)(m.value0))(append2(f(m.value2))(foldMap(foldableMap)(dictMonoid)(f)(m.value3)));
          }
          ;
          if (m instanceof Three) {
            return append2(foldMap(foldableMap)(dictMonoid)(f)(m.value0))(append2(f(m.value2))(append2(foldMap(foldableMap)(dictMonoid)(f)(m.value3))(append2(f(m.value5))(foldMap(foldableMap)(dictMonoid)(f)(m.value6)))));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 141, column 17 - line 144, column 93): " + [m.constructor.name]);
        };
      };
    }
  };
  var foldableWithIndexMap = {
    foldrWithIndex: function(f) {
      return function(z) {
        return function(m) {
          if (m instanceof Leaf) {
            return z;
          }
          ;
          if (m instanceof Two) {
            return foldrWithIndex(foldableWithIndexMap)(f)(f(m.value1)(m.value2)(foldrWithIndex(foldableWithIndexMap)(f)(z)(m.value3)))(m.value0);
          }
          ;
          if (m instanceof Three) {
            return foldrWithIndex(foldableWithIndexMap)(f)(f(m.value1)(m.value2)(foldrWithIndex(foldableWithIndexMap)(f)(f(m.value4)(m.value5)(foldrWithIndex(foldableWithIndexMap)(f)(z)(m.value6)))(m.value3)))(m.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 147, column 26 - line 150, column 120): " + [m.constructor.name]);
        };
      };
    },
    foldlWithIndex: function(f) {
      return function(z) {
        return function(m) {
          if (m instanceof Leaf) {
            return z;
          }
          ;
          if (m instanceof Two) {
            return foldlWithIndex(foldableWithIndexMap)(f)(f(m.value1)(foldlWithIndex(foldableWithIndexMap)(f)(z)(m.value0))(m.value2))(m.value3);
          }
          ;
          if (m instanceof Three) {
            return foldlWithIndex(foldableWithIndexMap)(f)(f(m.value4)(foldlWithIndex(foldableWithIndexMap)(f)(f(m.value1)(foldlWithIndex(foldableWithIndexMap)(f)(z)(m.value0))(m.value2))(m.value3))(m.value5))(m.value6);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 151, column 26 - line 154, column 120): " + [m.constructor.name]);
        };
      };
    },
    foldMapWithIndex: function(dictMonoid) {
      var mempty4 = mempty(dictMonoid);
      var append2 = append(dictMonoid.Semigroup0());
      return function(f) {
        return function(m) {
          if (m instanceof Leaf) {
            return mempty4;
          }
          ;
          if (m instanceof Two) {
            return append2(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value0))(append2(f(m.value1)(m.value2))(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value3)));
          }
          ;
          if (m instanceof Three) {
            return append2(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value0))(append2(f(m.value1)(m.value2))(append2(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value3))(append2(f(m.value4)(m.value5))(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value6)))));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 155, column 26 - line 158, column 128): " + [m.constructor.name]);
        };
      };
    },
    Foldable0: function() {
      return foldableMap;
    }
  };
  var foldrWithIndex2 = /* @__PURE__ */ foldrWithIndex(foldableWithIndexMap);
  var keys = /* @__PURE__ */ function() {
    return foldrWithIndex2(function(k2) {
      return function(v) {
        return function(acc) {
          return new Cons(k2, acc);
        };
      };
    })(Nil.value);
  }();
  var findMin = /* @__PURE__ */ function() {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Leaf) {
            $tco_done = true;
            return v;
          }
          ;
          if (v1 instanceof Two) {
            $tco_var_v = new Just({
              key: v1.value1,
              value: v1.value2
            });
            $copy_v1 = v1.value0;
            return;
          }
          ;
          if (v1 instanceof Three) {
            $tco_var_v = new Just({
              key: v1.value1,
              value: v1.value2
            });
            $copy_v1 = v1.value0;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 338, column 5 - line 338, column 22): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nothing.value);
  }();
  var findMax = /* @__PURE__ */ function() {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Leaf) {
            $tco_done = true;
            return v;
          }
          ;
          if (v1 instanceof Two) {
            $tco_var_v = new Just({
              key: v1.value1,
              value: v1.value2
            });
            $copy_v1 = v1.value3;
            return;
          }
          ;
          if (v1 instanceof Three) {
            $tco_var_v = new Just({
              key: v1.value4,
              value: v1.value5
            });
            $copy_v1 = v1.value6;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 330, column 5 - line 330, column 22): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nothing.value);
  }();
  var empty2 = /* @__PURE__ */ function() {
    return Leaf.value;
  }();
  var fromFoldable2 = function(dictOrd) {
    var insert1 = insert(dictOrd);
    return function(dictFoldable) {
      return foldl(dictFoldable)(function(m) {
        return function(v) {
          return insert1(v.value0)(v.value1)(m);
        };
      })(empty2);
    };
  };

  // output/Data.Set/index.js
  var foldMap2 = /* @__PURE__ */ foldMap(foldableList);
  var foldl2 = /* @__PURE__ */ foldl(foldableList);
  var foldr2 = /* @__PURE__ */ foldr(foldableList);
  var $$Set = function(x2) {
    return x2;
  };
  var toList = function(v) {
    return keys(v);
  };
  var fromMap = $$Set;
  var foldableSet = {
    foldMap: function(dictMonoid) {
      var foldMap12 = foldMap2(dictMonoid);
      return function(f) {
        var $129 = foldMap12(f);
        return function($130) {
          return $129(toList($130));
        };
      };
    },
    foldl: function(f) {
      return function(x2) {
        var $131 = foldl2(f)(x2);
        return function($132) {
          return $131(toList($132));
        };
      };
    },
    foldr: function(f) {
      return function(x2) {
        var $133 = foldr2(f)(x2);
        return function($134) {
          return $133(toList($134));
        };
      };
    }
  };

  // output/Data.Map/index.js
  var keys2 = /* @__PURE__ */ function() {
    var $38 = $$void(functorMap);
    return function($39) {
      return fromMap($38($39));
    };
  }();

  // output/Format.Int/foreign.js
  var intFormat = new Intl.NumberFormat("en-US", {
    maximumFractionDigits: 0,
    minimumFractionDigits: 0,
    useGrouping: true
  });
  var format = intFormat.format;

  // output/Data.String.Regex/foreign.js
  var regexImpl = function(left2) {
    return function(right2) {
      return function(s1) {
        return function(s22) {
          try {
            return right2(new RegExp(s1, s22));
          } catch (e) {
            return left2(e.message);
          }
        };
      };
    };
  };
  var replace = function(r2) {
    return function(s1) {
      return function(s22) {
        return s22.replace(r2, s1);
      };
    };
  };

  // output/Data.String.Regex.Flags/index.js
  var noFlags = {
    global: false,
    ignoreCase: false,
    multiline: false,
    dotAll: false,
    sticky: false,
    unicode: false
  };
  var global = {
    global: true,
    ignoreCase: false,
    multiline: false,
    dotAll: false,
    sticky: false,
    unicode: false
  };

  // output/Data.String.Regex/index.js
  var renderFlags = function(v) {
    return function() {
      if (v.global) {
        return "g";
      }
      ;
      return "";
    }() + (function() {
      if (v.ignoreCase) {
        return "i";
      }
      ;
      return "";
    }() + (function() {
      if (v.multiline) {
        return "m";
      }
      ;
      return "";
    }() + (function() {
      if (v.dotAll) {
        return "s";
      }
      ;
      return "";
    }() + (function() {
      if (v.sticky) {
        return "y";
      }
      ;
      return "";
    }() + function() {
      if (v.unicode) {
        return "u";
      }
      ;
      return "";
    }()))));
  };
  var regex = function(s3) {
    return function(f) {
      return regexImpl(Left.create)(Right.create)(s3)(renderFlags(f));
    };
  };

  // output/Data.String.Regex.Unsafe/index.js
  var identity6 = /* @__PURE__ */ identity(categoryFn);
  var unsafeRegex = function(s3) {
    return function(f) {
      return either(unsafeCrashWith)(identity6)(regex(s3)(f));
    };
  };

  // output/Format.Int/index.js
  var thousandGroups = /* @__PURE__ */ unsafeRegex("\\B(?=(\\d{3})+$)")(global);
  var nonNumbers = /* @__PURE__ */ unsafeRegex("[^0-9]")(global);
  var leadingZeros = /* @__PURE__ */ unsafeRegex("^0*")(noFlags);
  var formatString = /* @__PURE__ */ function() {
    var $2 = replace(thousandGroups)(",");
    var $3 = replace(leadingZeros)("");
    var $4 = replace(nonNumbers)("");
    return function($5) {
      return $2($3($4($5)));
    };
  }();
  var commas = /* @__PURE__ */ unsafeRegex(",")(global);
  var unformat = /* @__PURE__ */ function() {
    var $6 = map(functorMaybe)(floor2);
    var $7 = replace(commas)("");
    return function($8) {
      return $6(fromString($7($8)));
    };
  }();

  // node_modules/d3-array/src/ascending.js
  function ascending(a3, b2) {
    return a3 == null || b2 == null ? NaN : a3 < b2 ? -1 : a3 > b2 ? 1 : a3 >= b2 ? 0 : NaN;
  }

  // node_modules/d3-array/src/descending.js
  function descending(a3, b2) {
    return a3 == null || b2 == null ? NaN : b2 < a3 ? -1 : b2 > a3 ? 1 : b2 >= a3 ? 0 : NaN;
  }

  // node_modules/d3-array/src/bisector.js
  function bisector(f) {
    let compare13, compare23, delta;
    if (f.length !== 2) {
      compare13 = ascending;
      compare23 = (d, x2) => ascending(f(d), x2);
      delta = (d, x2) => f(d) - x2;
    } else {
      compare13 = f === ascending || f === descending ? f : zero2;
      compare23 = f;
      delta = f;
    }
    function left2(a3, x2, lo = 0, hi = a3.length) {
      if (lo < hi) {
        if (compare13(x2, x2) !== 0)
          return hi;
        do {
          const mid3 = lo + hi >>> 1;
          if (compare23(a3[mid3], x2) < 0)
            lo = mid3 + 1;
          else
            hi = mid3;
        } while (lo < hi);
      }
      return lo;
    }
    function right2(a3, x2, lo = 0, hi = a3.length) {
      if (lo < hi) {
        if (compare13(x2, x2) !== 0)
          return hi;
        do {
          const mid3 = lo + hi >>> 1;
          if (compare23(a3[mid3], x2) <= 0)
            lo = mid3 + 1;
          else
            hi = mid3;
        } while (lo < hi);
      }
      return lo;
    }
    function center2(a3, x2, lo = 0, hi = a3.length) {
      const i2 = left2(a3, x2, lo, hi - 1);
      return i2 > lo && delta(a3[i2 - 1], x2) > -delta(a3[i2], x2) ? i2 - 1 : i2;
    }
    return { left: left2, center: center2, right: right2 };
  }
  function zero2() {
    return 0;
  }

  // node_modules/d3-array/src/number.js
  function number(x2) {
    return x2 === null ? NaN : +x2;
  }
  function* numbers(values3, valueof2) {
    if (valueof2 === void 0) {
      for (let value12 of values3) {
        if (value12 != null && (value12 = +value12) >= value12) {
          yield value12;
        }
      }
    } else {
      let index5 = -1;
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null && (value12 = +value12) >= value12) {
          yield value12;
        }
      }
    }
  }

  // node_modules/d3-array/src/bisect.js
  var ascendingBisect = bisector(ascending);
  var bisectRight = ascendingBisect.right;
  var bisectLeft = ascendingBisect.left;
  var bisectCenter = bisector(number).center;
  var bisect_default = bisectRight;

  // node_modules/d3-array/src/count.js
  function count(values3, valueof2) {
    let count2 = 0;
    if (valueof2 === void 0) {
      for (let value12 of values3) {
        if (value12 != null && (value12 = +value12) >= value12) {
          ++count2;
        }
      }
    } else {
      let index5 = -1;
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null && (value12 = +value12) >= value12) {
          ++count2;
        }
      }
    }
    return count2;
  }

  // node_modules/d3-array/src/cross.js
  function length4(array3) {
    return array3.length | 0;
  }
  function empty3(length8) {
    return !(length8 > 0);
  }
  function arrayify(values3) {
    return typeof values3 !== "object" || "length" in values3 ? values3 : Array.from(values3);
  }
  function reducer(reduce) {
    return (values3) => reduce(...values3);
  }
  function cross(...values3) {
    const reduce = typeof values3[values3.length - 1] === "function" && reducer(values3.pop());
    values3 = values3.map(arrayify);
    const lengths = values3.map(length4);
    const j = values3.length - 1;
    const index5 = new Array(j + 1).fill(0);
    const product2 = [];
    if (j < 0 || lengths.some(empty3))
      return product2;
    while (true) {
      product2.push(index5.map((j2, i3) => values3[i3][j2]));
      let i2 = j;
      while (++index5[i2] === lengths[i2]) {
        if (i2 === 0)
          return reduce ? product2.map(reduce) : product2;
        index5[i2--] = 0;
      }
    }
  }

  // node_modules/d3-array/src/cumsum.js
  function cumsum(values3, valueof2) {
    var sum3 = 0, index5 = 0;
    return Float64Array.from(values3, valueof2 === void 0 ? (v) => sum3 += +v || 0 : (v) => sum3 += +valueof2(v, index5++, values3) || 0);
  }

  // node_modules/d3-array/src/variance.js
  function variance(values3, valueof2) {
    let count2 = 0;
    let delta;
    let mean2 = 0;
    let sum3 = 0;
    if (valueof2 === void 0) {
      for (let value12 of values3) {
        if (value12 != null && (value12 = +value12) >= value12) {
          delta = value12 - mean2;
          mean2 += delta / ++count2;
          sum3 += delta * (value12 - mean2);
        }
      }
    } else {
      let index5 = -1;
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null && (value12 = +value12) >= value12) {
          delta = value12 - mean2;
          mean2 += delta / ++count2;
          sum3 += delta * (value12 - mean2);
        }
      }
    }
    if (count2 > 1)
      return sum3 / (count2 - 1);
  }

  // node_modules/d3-array/src/deviation.js
  function deviation(values3, valueof2) {
    const v = variance(values3, valueof2);
    return v ? Math.sqrt(v) : v;
  }

  // node_modules/d3-array/src/extent.js
  function extent(values3, valueof2) {
    let min8;
    let max8;
    if (valueof2 === void 0) {
      for (const value12 of values3) {
        if (value12 != null) {
          if (min8 === void 0) {
            if (value12 >= value12)
              min8 = max8 = value12;
          } else {
            if (min8 > value12)
              min8 = value12;
            if (max8 < value12)
              max8 = value12;
          }
        }
      }
    } else {
      let index5 = -1;
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null) {
          if (min8 === void 0) {
            if (value12 >= value12)
              min8 = max8 = value12;
          } else {
            if (min8 > value12)
              min8 = value12;
            if (max8 < value12)
              max8 = value12;
          }
        }
      }
    }
    return [min8, max8];
  }

  // node_modules/internmap/src/index.js
  var InternMap = class extends Map {
    constructor(entries, key = keyof) {
      super();
      Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
      if (entries != null)
        for (const [key2, value12] of entries)
          this.set(key2, value12);
    }
    get(key) {
      return super.get(intern_get(this, key));
    }
    has(key) {
      return super.has(intern_get(this, key));
    }
    set(key, value12) {
      return super.set(intern_set(this, key), value12);
    }
    delete(key) {
      return super.delete(intern_delete(this, key));
    }
  };
  var InternSet = class extends Set {
    constructor(values3, key = keyof) {
      super();
      Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
      if (values3 != null)
        for (const value12 of values3)
          this.add(value12);
    }
    has(value12) {
      return super.has(intern_get(this, value12));
    }
    add(value12) {
      return super.add(intern_set(this, value12));
    }
    delete(value12) {
      return super.delete(intern_delete(this, value12));
    }
  };
  function intern_get({ _intern, _key }, value12) {
    const key = _key(value12);
    return _intern.has(key) ? _intern.get(key) : value12;
  }
  function intern_set({ _intern, _key }, value12) {
    const key = _key(value12);
    if (_intern.has(key))
      return _intern.get(key);
    _intern.set(key, value12);
    return value12;
  }
  function intern_delete({ _intern, _key }, value12) {
    const key = _key(value12);
    if (_intern.has(key)) {
      value12 = _intern.get(key);
      _intern.delete(key);
    }
    return value12;
  }
  function keyof(value12) {
    return value12 !== null && typeof value12 === "object" ? value12.valueOf() : value12;
  }

  // node_modules/d3-array/src/identity.js
  function identity7(x2) {
    return x2;
  }

  // node_modules/d3-array/src/group.js
  function group(values3, ...keys3) {
    return nest(values3, identity7, identity7, keys3);
  }
  function groups(values3, ...keys3) {
    return nest(values3, Array.from, identity7, keys3);
  }
  function rollup(values3, reduce, ...keys3) {
    return nest(values3, identity7, reduce, keys3);
  }
  function nest(values3, map14, reduce, keys3) {
    return function regroup(values4, i2) {
      if (i2 >= keys3.length)
        return reduce(values4);
      const groups2 = new InternMap();
      const keyof3 = keys3[i2++];
      let index5 = -1;
      for (const value12 of values4) {
        const key = keyof3(value12, ++index5, values4);
        const group3 = groups2.get(key);
        if (group3)
          group3.push(value12);
        else
          groups2.set(key, [value12]);
      }
      for (const [key, values5] of groups2) {
        groups2.set(key, regroup(values5, i2));
      }
      return map14(groups2);
    }(values3, 0);
  }

  // node_modules/d3-array/src/permute.js
  function permute(source3, keys3) {
    return Array.from(keys3, (key) => source3[key]);
  }

  // node_modules/d3-array/src/sort.js
  function sort(values3, ...F) {
    if (typeof values3[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    values3 = Array.from(values3);
    let [f] = F;
    if (f && f.length !== 2 || F.length > 1) {
      const index5 = Uint32Array.from(values3, (d, i2) => i2);
      if (F.length > 1) {
        F = F.map((f2) => values3.map(f2));
        index5.sort((i2, j) => {
          for (const f2 of F) {
            const c4 = ascendingDefined(f2[i2], f2[j]);
            if (c4)
              return c4;
          }
        });
      } else {
        f = values3.map(f);
        index5.sort((i2, j) => ascendingDefined(f[i2], f[j]));
      }
      return permute(values3, index5);
    }
    return values3.sort(compareDefined(f));
  }
  function compareDefined(compare4 = ascending) {
    if (compare4 === ascending)
      return ascendingDefined;
    if (typeof compare4 !== "function")
      throw new TypeError("compare is not a function");
    return (a3, b2) => {
      const x2 = compare4(a3, b2);
      if (x2 || x2 === 0)
        return x2;
      return (compare4(b2, b2) === 0) - (compare4(a3, a3) === 0);
    };
  }
  function ascendingDefined(a3, b2) {
    return (a3 == null || !(a3 >= a3)) - (b2 == null || !(b2 >= b2)) || (a3 < b2 ? -1 : a3 > b2 ? 1 : 0);
  }

  // node_modules/d3-array/src/groupSort.js
  function groupSort(values3, reduce, key) {
    return (reduce.length !== 2 ? sort(rollup(values3, reduce, key), ([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)) : sort(group(values3, key), ([ak, av], [bk, bv]) => reduce(av, bv) || ascending(ak, bk))).map(([key2]) => key2);
  }

  // node_modules/d3-array/src/array.js
  var array = Array.prototype;
  var slice3 = array.slice;
  var map4 = array.map;

  // node_modules/d3-array/src/constant.js
  function constant(x2) {
    return () => x2;
  }

  // node_modules/d3-array/src/ticks.js
  var e10 = Math.sqrt(50);
  var e5 = Math.sqrt(10);
  var e2 = Math.sqrt(2);
  function ticks(start3, stop, count2) {
    var reverse4, i2 = -1, n, ticks2, step3;
    stop = +stop, start3 = +start3, count2 = +count2;
    if (start3 === stop && count2 > 0)
      return [start3];
    if (reverse4 = stop < start3)
      n = start3, start3 = stop, stop = n;
    if ((step3 = tickIncrement(start3, stop, count2)) === 0 || !isFinite(step3))
      return [];
    if (step3 > 0) {
      let r0 = Math.round(start3 / step3), r1 = Math.round(stop / step3);
      if (r0 * step3 < start3)
        ++r0;
      if (r1 * step3 > stop)
        --r1;
      ticks2 = new Array(n = r1 - r0 + 1);
      while (++i2 < n)
        ticks2[i2] = (r0 + i2) * step3;
    } else {
      step3 = -step3;
      let r0 = Math.round(start3 * step3), r1 = Math.round(stop * step3);
      if (r0 / step3 < start3)
        ++r0;
      if (r1 / step3 > stop)
        --r1;
      ticks2 = new Array(n = r1 - r0 + 1);
      while (++i2 < n)
        ticks2[i2] = (r0 + i2) / step3;
    }
    if (reverse4)
      ticks2.reverse();
    return ticks2;
  }
  function tickIncrement(start3, stop, count2) {
    var step3 = (stop - start3) / Math.max(0, count2), power = Math.floor(Math.log(step3) / Math.LN10), error2 = step3 / Math.pow(10, power);
    return power >= 0 ? (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1);
  }
  function tickStep(start3, stop, count2) {
    var step0 = Math.abs(stop - start3) / Math.max(0, count2), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error2 = step0 / step1;
    if (error2 >= e10)
      step1 *= 10;
    else if (error2 >= e5)
      step1 *= 5;
    else if (error2 >= e2)
      step1 *= 2;
    return stop < start3 ? -step1 : step1;
  }

  // node_modules/d3-array/src/nice.js
  function nice(start3, stop, count2) {
    let prestep;
    while (true) {
      const step3 = tickIncrement(start3, stop, count2);
      if (step3 === prestep || step3 === 0 || !isFinite(step3)) {
        return [start3, stop];
      } else if (step3 > 0) {
        start3 = Math.floor(start3 / step3) * step3;
        stop = Math.ceil(stop / step3) * step3;
      } else if (step3 < 0) {
        start3 = Math.ceil(start3 * step3) / step3;
        stop = Math.floor(stop * step3) / step3;
      }
      prestep = step3;
    }
  }

  // node_modules/d3-array/src/threshold/sturges.js
  function thresholdSturges(values3) {
    return Math.ceil(Math.log(count(values3)) / Math.LN2) + 1;
  }

  // node_modules/d3-array/src/bin.js
  function bin() {
    var value12 = identity7, domain = extent, threshold2 = thresholdSturges;
    function histogram(data) {
      if (!Array.isArray(data))
        data = Array.from(data);
      var i2, n = data.length, x2, step3, values3 = new Array(n);
      for (i2 = 0; i2 < n; ++i2) {
        values3[i2] = value12(data[i2], i2, data);
      }
      var xz = domain(values3), x0 = xz[0], x1 = xz[1], tz = threshold2(values3, x0, x1);
      if (!Array.isArray(tz)) {
        const max8 = x1, tn = +tz;
        if (domain === extent)
          [x0, x1] = nice(x0, x1, tn);
        tz = ticks(x0, x1, tn);
        if (tz[0] <= x0)
          step3 = tickIncrement(x0, x1, tn);
        if (tz[tz.length - 1] >= x1) {
          if (max8 >= x1 && domain === extent) {
            const step4 = tickIncrement(x0, x1, tn);
            if (isFinite(step4)) {
              if (step4 > 0) {
                x1 = (Math.floor(x1 / step4) + 1) * step4;
              } else if (step4 < 0) {
                x1 = (Math.ceil(x1 * -step4) + 1) / -step4;
              }
            }
          } else {
            tz.pop();
          }
        }
      }
      var m = tz.length;
      while (tz[0] <= x0)
        tz.shift(), --m;
      while (tz[m - 1] > x1)
        tz.pop(), --m;
      var bins = new Array(m + 1), bin2;
      for (i2 = 0; i2 <= m; ++i2) {
        bin2 = bins[i2] = [];
        bin2.x0 = i2 > 0 ? tz[i2 - 1] : x0;
        bin2.x1 = i2 < m ? tz[i2] : x1;
      }
      if (isFinite(step3)) {
        if (step3 > 0) {
          for (i2 = 0; i2 < n; ++i2) {
            if ((x2 = values3[i2]) != null && x0 <= x2 && x2 <= x1) {
              bins[Math.min(m, Math.floor((x2 - x0) / step3))].push(data[i2]);
            }
          }
        } else if (step3 < 0) {
          for (i2 = 0; i2 < n; ++i2) {
            if ((x2 = values3[i2]) != null && x0 <= x2 && x2 <= x1) {
              const j = Math.floor((x0 - x2) * step3);
              bins[Math.min(m, j + (tz[j] <= x2))].push(data[i2]);
            }
          }
        }
      } else {
        for (i2 = 0; i2 < n; ++i2) {
          if ((x2 = values3[i2]) != null && x0 <= x2 && x2 <= x1) {
            bins[bisect_default(tz, x2, 0, m)].push(data[i2]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(_) {
      return arguments.length ? (value12 = typeof _ === "function" ? _ : constant(_), histogram) : value12;
    };
    histogram.domain = function(_) {
      return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
    };
    histogram.thresholds = function(_) {
      return arguments.length ? (threshold2 = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice3.call(_)) : constant(_), histogram) : threshold2;
    };
    return histogram;
  }

  // node_modules/d3-array/src/max.js
  function max3(values3, valueof2) {
    let max8;
    if (valueof2 === void 0) {
      for (const value12 of values3) {
        if (value12 != null && (max8 < value12 || max8 === void 0 && value12 >= value12)) {
          max8 = value12;
        }
      }
    } else {
      let index5 = -1;
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null && (max8 < value12 || max8 === void 0 && value12 >= value12)) {
          max8 = value12;
        }
      }
    }
    return max8;
  }

  // node_modules/d3-array/src/maxIndex.js
  function maxIndex(values3, valueof2) {
    let max8;
    let maxIndex2 = -1;
    let index5 = -1;
    if (valueof2 === void 0) {
      for (const value12 of values3) {
        ++index5;
        if (value12 != null && (max8 < value12 || max8 === void 0 && value12 >= value12)) {
          max8 = value12, maxIndex2 = index5;
        }
      }
    } else {
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null && (max8 < value12 || max8 === void 0 && value12 >= value12)) {
          max8 = value12, maxIndex2 = index5;
        }
      }
    }
    return maxIndex2;
  }

  // node_modules/d3-array/src/min.js
  function min3(values3, valueof2) {
    let min8;
    if (valueof2 === void 0) {
      for (const value12 of values3) {
        if (value12 != null && (min8 > value12 || min8 === void 0 && value12 >= value12)) {
          min8 = value12;
        }
      }
    } else {
      let index5 = -1;
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null && (min8 > value12 || min8 === void 0 && value12 >= value12)) {
          min8 = value12;
        }
      }
    }
    return min8;
  }

  // node_modules/d3-array/src/minIndex.js
  function minIndex(values3, valueof2) {
    let min8;
    let minIndex2 = -1;
    let index5 = -1;
    if (valueof2 === void 0) {
      for (const value12 of values3) {
        ++index5;
        if (value12 != null && (min8 > value12 || min8 === void 0 && value12 >= value12)) {
          min8 = value12, minIndex2 = index5;
        }
      }
    } else {
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null && (min8 > value12 || min8 === void 0 && value12 >= value12)) {
          min8 = value12, minIndex2 = index5;
        }
      }
    }
    return minIndex2;
  }

  // node_modules/d3-array/src/quickselect.js
  function quickselect(array3, k2, left2 = 0, right2 = array3.length - 1, compare4) {
    compare4 = compare4 === void 0 ? ascendingDefined : compareDefined(compare4);
    while (right2 > left2) {
      if (right2 - left2 > 600) {
        const n = right2 - left2 + 1;
        const m = k2 - left2 + 1;
        const z = Math.log(n);
        const s3 = 0.5 * Math.exp(2 * z / 3);
        const sd = 0.5 * Math.sqrt(z * s3 * (n - s3) / n) * (m - n / 2 < 0 ? -1 : 1);
        const newLeft = Math.max(left2, Math.floor(k2 - m * s3 / n + sd));
        const newRight = Math.min(right2, Math.floor(k2 + (n - m) * s3 / n + sd));
        quickselect(array3, k2, newLeft, newRight, compare4);
      }
      const t = array3[k2];
      let i2 = left2;
      let j = right2;
      swap(array3, left2, k2);
      if (compare4(array3[right2], t) > 0)
        swap(array3, left2, right2);
      while (i2 < j) {
        swap(array3, i2, j), ++i2, --j;
        while (compare4(array3[i2], t) < 0)
          ++i2;
        while (compare4(array3[j], t) > 0)
          --j;
      }
      if (compare4(array3[left2], t) === 0)
        swap(array3, left2, j);
      else
        ++j, swap(array3, j, right2);
      if (j <= k2)
        left2 = j + 1;
      if (k2 <= j)
        right2 = j - 1;
    }
    return array3;
  }
  function swap(array3, i2, j) {
    const t = array3[i2];
    array3[i2] = array3[j];
    array3[j] = t;
  }

  // node_modules/d3-array/src/greatest.js
  function greatest(values3, compare4 = ascending) {
    let max8;
    let defined2 = false;
    if (compare4.length === 1) {
      let maxValue;
      for (const element2 of values3) {
        const value12 = compare4(element2);
        if (defined2 ? ascending(value12, maxValue) > 0 : ascending(value12, value12) === 0) {
          max8 = element2;
          maxValue = value12;
          defined2 = true;
        }
      }
    } else {
      for (const value12 of values3) {
        if (defined2 ? compare4(value12, max8) > 0 : compare4(value12, value12) === 0) {
          max8 = value12;
          defined2 = true;
        }
      }
    }
    return max8;
  }

  // node_modules/d3-array/src/quantile.js
  function quantile(values3, p2, valueof2) {
    values3 = Float64Array.from(numbers(values3, valueof2));
    if (!(n = values3.length))
      return;
    if ((p2 = +p2) <= 0 || n < 2)
      return min3(values3);
    if (p2 >= 1)
      return max3(values3);
    var n, i2 = (n - 1) * p2, i0 = Math.floor(i2), value0 = max3(quickselect(values3, i0).subarray(0, i0 + 1)), value1 = min3(values3.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i2 - i0);
  }
  function quantileSorted(values3, p2, valueof2 = number) {
    if (!(n = values3.length))
      return;
    if ((p2 = +p2) <= 0 || n < 2)
      return +valueof2(values3[0], 0, values3);
    if (p2 >= 1)
      return +valueof2(values3[n - 1], n - 1, values3);
    var n, i2 = (n - 1) * p2, i0 = Math.floor(i2), value0 = +valueof2(values3[i0], i0, values3), value1 = +valueof2(values3[i0 + 1], i0 + 1, values3);
    return value0 + (value1 - value0) * (i2 - i0);
  }

  // node_modules/d3-array/src/threshold/freedmanDiaconis.js
  function thresholdFreedmanDiaconis(values3, min8, max8) {
    return Math.ceil((max8 - min8) / (2 * (quantile(values3, 0.75) - quantile(values3, 0.25)) * Math.pow(count(values3), -1 / 3)));
  }

  // node_modules/d3-array/src/threshold/scott.js
  function thresholdScott(values3, min8, max8) {
    return Math.ceil((max8 - min8) * Math.cbrt(count(values3)) / (3.49 * deviation(values3)));
  }

  // node_modules/d3-array/src/mean.js
  function mean(values3, valueof2) {
    let count2 = 0;
    let sum3 = 0;
    if (valueof2 === void 0) {
      for (let value12 of values3) {
        if (value12 != null && (value12 = +value12) >= value12) {
          ++count2, sum3 += value12;
        }
      }
    } else {
      let index5 = -1;
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null && (value12 = +value12) >= value12) {
          ++count2, sum3 += value12;
        }
      }
    }
    if (count2)
      return sum3 / count2;
  }

  // node_modules/d3-array/src/median.js
  function median(values3, valueof2) {
    return quantile(values3, 0.5, valueof2);
  }

  // node_modules/d3-array/src/mode.js
  function mode(values3, valueof2) {
    const counts = new InternMap();
    if (valueof2 === void 0) {
      for (let value12 of values3) {
        if (value12 != null && value12 >= value12) {
          counts.set(value12, (counts.get(value12) || 0) + 1);
        }
      }
    } else {
      let index5 = -1;
      for (let value12 of values3) {
        if ((value12 = valueof2(value12, ++index5, values3)) != null && value12 >= value12) {
          counts.set(value12, (counts.get(value12) || 0) + 1);
        }
      }
    }
    let modeValue;
    let modeCount = 0;
    for (const [value12, count2] of counts) {
      if (count2 > modeCount) {
        modeCount = count2;
        modeValue = value12;
      }
    }
    return modeValue;
  }

  // node_modules/d3-array/src/pairs.js
  function pairs(values3, pairof = pair) {
    const pairs2 = [];
    let previous;
    let first2 = false;
    for (const value12 of values3) {
      if (first2)
        pairs2.push(pairof(previous, value12));
      previous = value12;
      first2 = true;
    }
    return pairs2;
  }
  function pair(a3, b2) {
    return [a3, b2];
  }

  // node_modules/d3-array/src/range.js
  function range3(start3, stop, step3) {
    start3 = +start3, stop = +stop, step3 = (n = arguments.length) < 2 ? (stop = start3, start3 = 0, 1) : n < 3 ? 1 : +step3;
    var i2 = -1, n = Math.max(0, Math.ceil((stop - start3) / step3)) | 0, range5 = new Array(n);
    while (++i2 < n) {
      range5[i2] = start3 + i2 * step3;
    }
    return range5;
  }

  // node_modules/d3-array/src/rank.js
  function rank(values3, valueof2 = ascending) {
    if (typeof values3[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    let V = Array.from(values3);
    const R = new Float64Array(V.length);
    if (valueof2.length !== 2)
      V = V.map(valueof2), valueof2 = ascending;
    const compareIndex = (i2, j) => valueof2(V[i2], V[j]);
    let k2, r2;
    Uint32Array.from(V, (_, i2) => i2).sort(valueof2 === ascending ? (i2, j) => ascendingDefined(V[i2], V[j]) : compareDefined(compareIndex)).forEach((j, i2) => {
      const c4 = compareIndex(j, k2 === void 0 ? j : k2);
      if (c4 >= 0) {
        if (k2 === void 0 || c4 > 0)
          k2 = j, r2 = i2;
        R[j] = r2;
      } else {
        R[j] = NaN;
      }
    });
    return R;
  }

  // node_modules/d3-array/src/sum.js
  function sum2(values3, valueof2) {
    let sum3 = 0;
    if (valueof2 === void 0) {
      for (let value12 of values3) {
        if (value12 = +value12) {
          sum3 += value12;
        }
      }
    } else {
      let index5 = -1;
      for (let value12 of values3) {
        if (value12 = +valueof2(value12, ++index5, values3)) {
          sum3 += value12;
        }
      }
    }
    return sum3;
  }

  // node_modules/d3-array/src/reverse.js
  function reverse2(values3) {
    if (typeof values3[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    return Array.from(values3).reverse();
  }

  // node_modules/d3-array/src/difference.js
  function difference2(values3, ...others) {
    values3 = new InternSet(values3);
    for (const other of others) {
      for (const value12 of other) {
        values3.delete(value12);
      }
    }
    return values3;
  }

  // node_modules/d3-axis/src/identity.js
  function identity_default(x2) {
    return x2;
  }

  // node_modules/d3-axis/src/axis.js
  var top3 = 1;
  var right = 2;
  var bottom3 = 3;
  var left = 4;
  var epsilon = 1e-6;
  function translateX(x2) {
    return "translate(" + x2 + ",0)";
  }
  function translateY(y2) {
    return "translate(0," + y2 + ")";
  }
  function number2(scale) {
    return (d) => +scale(d);
  }
  function center(scale, offset2) {
    offset2 = Math.max(0, scale.bandwidth() - offset2 * 2) / 2;
    if (scale.round())
      offset2 = Math.round(offset2);
    return (d) => +scale(d) + offset2;
  }
  function entering() {
    return !this.__axis;
  }
  function axis(orient, scale) {
    var tickArguments = [], tickValues = null, tickFormat2 = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, offset2 = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5, k2 = orient === top3 || orient === left ? -1 : 1, x2 = orient === left || orient === right ? "x" : "y", transform2 = orient === top3 || orient === bottom3 ? translateX : translateY;
    function axis2(context) {
      var values3 = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format4 = tickFormat2 == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity_default : tickFormat2, spacing = Math.max(tickSizeInner, 0) + tickPadding, range5 = scale.range(), range0 = +range5[0] + offset2, range1 = +range5[range5.length - 1] + offset2, position3 = (scale.bandwidth ? center : number2)(scale.copy(), offset2), selection2 = context.selection ? context.selection() : context, path2 = selection2.selectAll(".domain").data([null]), tick = selection2.selectAll(".tick").data(values3, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line2 = tick.select("line"), text6 = tick.select("text");
      path2 = path2.merge(path2.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
      tick = tick.merge(tickEnter);
      line2 = line2.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x2 + "2", k2 * tickSizeInner));
      text6 = text6.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x2, k2 * spacing).attr("dy", orient === top3 ? "0em" : orient === bottom3 ? "0.71em" : "0.32em"));
      if (context !== selection2) {
        path2 = path2.transition(context);
        tick = tick.transition(context);
        line2 = line2.transition(context);
        text6 = text6.transition(context);
        tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function(d) {
          return isFinite(d = position3(d)) ? transform2(d + offset2) : this.getAttribute("transform");
        });
        tickEnter.attr("opacity", epsilon).attr("transform", function(d) {
          var p2 = this.parentNode.__axis;
          return transform2((p2 && isFinite(p2 = p2(d)) ? p2 : position3(d)) + offset2);
        });
      }
      tickExit.remove();
      path2.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k2 * tickSizeOuter + "," + range0 + "H" + offset2 + "V" + range1 + "H" + k2 * tickSizeOuter : "M" + offset2 + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k2 * tickSizeOuter + "V" + offset2 + "H" + range1 + "V" + k2 * tickSizeOuter : "M" + range0 + "," + offset2 + "H" + range1);
      tick.attr("opacity", 1).attr("transform", function(d) {
        return transform2(position3(d) + offset2);
      });
      line2.attr(x2 + "2", k2 * tickSizeInner);
      text6.attr(x2, k2 * spacing).text(format4);
      selection2.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
      selection2.each(function() {
        this.__axis = position3;
      });
    }
    axis2.scale = function(_) {
      return arguments.length ? (scale = _, axis2) : scale;
    };
    axis2.ticks = function() {
      return tickArguments = Array.from(arguments), axis2;
    };
    axis2.tickArguments = function(_) {
      return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis2) : tickArguments.slice();
    };
    axis2.tickValues = function(_) {
      return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis2) : tickValues && tickValues.slice();
    };
    axis2.tickFormat = function(_) {
      return arguments.length ? (tickFormat2 = _, axis2) : tickFormat2;
    };
    axis2.tickSize = function(_) {
      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis2) : tickSizeInner;
    };
    axis2.tickSizeInner = function(_) {
      return arguments.length ? (tickSizeInner = +_, axis2) : tickSizeInner;
    };
    axis2.tickSizeOuter = function(_) {
      return arguments.length ? (tickSizeOuter = +_, axis2) : tickSizeOuter;
    };
    axis2.tickPadding = function(_) {
      return arguments.length ? (tickPadding = +_, axis2) : tickPadding;
    };
    axis2.offset = function(_) {
      return arguments.length ? (offset2 = +_, axis2) : offset2;
    };
    return axis2;
  }
  function axisTop(scale) {
    return axis(top3, scale);
  }
  function axisRight(scale) {
    return axis(right, scale);
  }
  function axisBottom(scale) {
    return axis(bottom3, scale);
  }
  function axisLeft(scale) {
    return axis(left, scale);
  }

  // node_modules/d3-dispatch/src/dispatch.js
  var noop = { value: () => {
  } };
  function dispatch() {
    for (var i2 = 0, n = arguments.length, _ = {}, t; i2 < n; ++i2) {
      if (!(t = arguments[i2] + "") || t in _ || /[\s.]/.test(t))
        throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }
  function Dispatch(_) {
    this._ = _;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name15 = "", i2 = t.indexOf(".");
      if (i2 >= 0)
        name15 = t.slice(i2 + 1), t = t.slice(0, i2);
      if (t && !types.hasOwnProperty(t))
        throw new Error("unknown type: " + t);
      return { type: t, name: name15 };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _ = this._, T = parseTypenames(typename + "", _), t, i2 = -1, n = T.length;
      if (arguments.length < 2) {
        while (++i2 < n)
          if ((t = (typename = T[i2]).type) && (t = get(_[t], typename.name)))
            return t;
        return;
      }
      if (callback != null && typeof callback !== "function")
        throw new Error("invalid callback: " + callback);
      while (++i2 < n) {
        if (t = (typename = T[i2]).type)
          _[t] = set(_[t], typename.name, callback);
        else if (callback == null)
          for (t in _)
            _[t] = set(_[t], typename.name, null);
      }
      return this;
    },
    copy: function() {
      var copy3 = {}, _ = this._;
      for (var t in _)
        copy3[t] = _[t].slice();
      return new Dispatch(copy3);
    },
    call: function(type2, that) {
      if ((n = arguments.length - 2) > 0)
        for (var args = new Array(n), i2 = 0, n, t; i2 < n; ++i2)
          args[i2] = arguments[i2 + 2];
      if (!this._.hasOwnProperty(type2))
        throw new Error("unknown type: " + type2);
      for (t = this._[type2], i2 = 0, n = t.length; i2 < n; ++i2)
        t[i2].value.apply(that, args);
    },
    apply: function(type2, that, args) {
      if (!this._.hasOwnProperty(type2))
        throw new Error("unknown type: " + type2);
      for (var t = this._[type2], i2 = 0, n = t.length; i2 < n; ++i2)
        t[i2].value.apply(that, args);
    }
  };
  function get(type2, name15) {
    for (var i2 = 0, n = type2.length, c4; i2 < n; ++i2) {
      if ((c4 = type2[i2]).name === name15) {
        return c4.value;
      }
    }
  }
  function set(type2, name15, callback) {
    for (var i2 = 0, n = type2.length; i2 < n; ++i2) {
      if (type2[i2].name === name15) {
        type2[i2] = noop, type2 = type2.slice(0, i2).concat(type2.slice(i2 + 1));
        break;
      }
    }
    if (callback != null)
      type2.push({ name: name15, value: callback });
    return type2;
  }
  var dispatch_default = dispatch;

  // node_modules/d3-selection/src/namespaces.js
  var xhtml = "http://www.w3.org/1999/xhtml";
  var namespaces_default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  // node_modules/d3-selection/src/namespace.js
  function namespace_default(name15) {
    var prefix = name15 += "", i2 = prefix.indexOf(":");
    if (i2 >= 0 && (prefix = name15.slice(0, i2)) !== "xmlns")
      name15 = name15.slice(i2 + 1);
    return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name15 } : name15;
  }

  // node_modules/d3-selection/src/creator.js
  function creatorInherit(name15) {
    return function() {
      var document3 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml && document3.documentElement.namespaceURI === xhtml ? document3.createElement(name15) : document3.createElementNS(uri, name15);
    };
  }
  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default(name15) {
    var fullname = namespace_default(name15);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }

  // node_modules/d3-selection/src/selector.js
  function none() {
  }
  function selector_default(selector) {
    return selector == null ? none : function() {
      return this.querySelector(selector);
    };
  }

  // node_modules/d3-selection/src/selection/select.js
  function select_default(select4) {
    if (typeof select4 !== "function")
      select4 = selector_default(select4);
    for (var groups2 = this._groups, m = groups2.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group3 = groups2[j], n = group3.length, subgroup = subgroups[j] = new Array(n), node, subnode, i2 = 0; i2 < n; ++i2) {
        if ((node = group3[i2]) && (subnode = select4.call(node, node.__data__, i2, group3))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i2] = subnode;
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // node_modules/d3-selection/src/array.js
  function array2(x2) {
    return x2 == null ? [] : Array.isArray(x2) ? x2 : Array.from(x2);
  }

  // node_modules/d3-selection/src/selectorAll.js
  function empty4() {
    return [];
  }
  function selectorAll_default(selector) {
    return selector == null ? empty4 : function() {
      return this.querySelectorAll(selector);
    };
  }

  // node_modules/d3-selection/src/selection/selectAll.js
  function arrayAll(select4) {
    return function() {
      return array2(select4.apply(this, arguments));
    };
  }
  function selectAll_default(select4) {
    if (typeof select4 === "function")
      select4 = arrayAll(select4);
    else
      select4 = selectorAll_default(select4);
    for (var groups2 = this._groups, m = groups2.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group3 = groups2[j], n = group3.length, node, i2 = 0; i2 < n; ++i2) {
        if (node = group3[i2]) {
          subgroups.push(select4.call(node, node.__data__, i2, group3));
          parents.push(node);
        }
      }
    }
    return new Selection(subgroups, parents);
  }

  // node_modules/d3-selection/src/matcher.js
  function matcher_default(selector) {
    return function() {
      return this.matches(selector);
    };
  }
  function childMatcher(selector) {
    return function(node) {
      return node.matches(selector);
    };
  }

  // node_modules/d3-selection/src/selection/selectChild.js
  var find2 = Array.prototype.find;
  function childFind(match) {
    return function() {
      return find2.call(this.children, match);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selectChild_default(match) {
    return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
  }

  // node_modules/d3-selection/src/selection/selectChildren.js
  var filter4 = Array.prototype.filter;
  function children() {
    return Array.from(this.children);
  }
  function childrenFilter(match) {
    return function() {
      return filter4.call(this.children, match);
    };
  }
  function selectChildren_default(match) {
    return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
  }

  // node_modules/d3-selection/src/selection/filter.js
  function filter_default(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups2 = this._groups, m = groups2.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group3 = groups2[j], n = group3.length, subgroup = subgroups[j] = [], node, i2 = 0; i2 < n; ++i2) {
        if ((node = group3[i2]) && match.call(node, node.__data__, i2, group3)) {
          subgroup.push(node);
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }

  // node_modules/d3-selection/src/selection/sparse.js
  function sparse_default(update2) {
    return new Array(update2.length);
  }

  // node_modules/d3-selection/src/selection/enter.js
  function enter_default() {
    return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
  }
  function EnterNode(parent2, datum2) {
    this.ownerDocument = parent2.ownerDocument;
    this.namespaceURI = parent2.namespaceURI;
    this._next = null;
    this._parent = parent2;
    this.__data__ = datum2;
  }
  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) {
      return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function(child, next) {
      return this._parent.insertBefore(child, next);
    },
    querySelector: function(selector) {
      return this._parent.querySelector(selector);
    },
    querySelectorAll: function(selector) {
      return this._parent.querySelectorAll(selector);
    }
  };

  // node_modules/d3-selection/src/constant.js
  function constant_default(x2) {
    return function() {
      return x2;
    };
  }

  // node_modules/d3-selection/src/selection/data.js
  function bindIndex(parent2, group3, enter, update2, exit, data) {
    var i2 = 0, node, groupLength = group3.length, dataLength = data.length;
    for (; i2 < dataLength; ++i2) {
      if (node = group3[i2]) {
        node.__data__ = data[i2];
        update2[i2] = node;
      } else {
        enter[i2] = new EnterNode(parent2, data[i2]);
      }
    }
    for (; i2 < groupLength; ++i2) {
      if (node = group3[i2]) {
        exit[i2] = node;
      }
    }
  }
  function bindKey(parent2, group3, enter, update2, exit, data, key) {
    var i2, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group3.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    for (i2 = 0; i2 < groupLength; ++i2) {
      if (node = group3[i2]) {
        keyValues[i2] = keyValue = key.call(node, node.__data__, i2, group3) + "";
        if (nodeByKeyValue.has(keyValue)) {
          exit[i2] = node;
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
      }
    }
    for (i2 = 0; i2 < dataLength; ++i2) {
      keyValue = key.call(parent2, data[i2], i2, data) + "";
      if (node = nodeByKeyValue.get(keyValue)) {
        update2[i2] = node;
        node.__data__ = data[i2];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter[i2] = new EnterNode(parent2, data[i2]);
      }
    }
    for (i2 = 0; i2 < groupLength; ++i2) {
      if ((node = group3[i2]) && nodeByKeyValue.get(keyValues[i2]) === node) {
        exit[i2] = node;
      }
    }
  }
  function datum(node) {
    return node.__data__;
  }
  function data_default(value12, key) {
    if (!arguments.length)
      return Array.from(this, datum);
    var bind7 = key ? bindKey : bindIndex, parents = this._parents, groups2 = this._groups;
    if (typeof value12 !== "function")
      value12 = constant_default(value12);
    for (var m = groups2.length, update2 = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
      var parent2 = parents[j], group3 = groups2[j], groupLength = group3.length, data = arraylike(value12.call(parent2, parent2 && parent2.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update2[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
      bind7(parent2, group3, enterGroup, updateGroup, exitGroup, data, key);
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1)
            i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength)
            ;
          previous._next = next || null;
        }
      }
    }
    update2 = new Selection(update2, parents);
    update2._enter = enter;
    update2._exit = exit;
    return update2;
  }
  function arraylike(data) {
    return typeof data === "object" && "length" in data ? data : Array.from(data);
  }

  // node_modules/d3-selection/src/selection/exit.js
  function exit_default() {
    return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
  }

  // node_modules/d3-selection/src/selection/join.js
  function join_default(onenter, onupdate, onexit) {
    var enter = this.enter(), update2 = this, exit = this.exit();
    if (typeof onenter === "function") {
      enter = onenter(enter);
      if (enter)
        enter = enter.selection();
    } else {
      enter = enter.append(onenter + "");
    }
    if (onupdate != null) {
      update2 = onupdate(update2);
      if (update2)
        update2 = update2.selection();
    }
    if (onexit == null)
      exit.remove();
    else
      onexit(exit);
    return enter && update2 ? enter.merge(update2).order() : update2;
  }

  // node_modules/d3-selection/src/selection/merge.js
  function merge_default(context) {
    var selection2 = context.selection ? context.selection() : context;
    for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i2 = 0; i2 < n; ++i2) {
        if (node = group0[i2] || group1[i2]) {
          merge[i2] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Selection(merges, this._parents);
  }

  // node_modules/d3-selection/src/selection/order.js
  function order_default() {
    for (var groups2 = this._groups, j = -1, m = groups2.length; ++j < m; ) {
      for (var group3 = groups2[j], i2 = group3.length - 1, next = group3[i2], node; --i2 >= 0; ) {
        if (node = group3[i2]) {
          if (next && node.compareDocumentPosition(next) ^ 4)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  }

  // node_modules/d3-selection/src/selection/sort.js
  function sort_default(compare4) {
    if (!compare4)
      compare4 = ascending2;
    function compareNode(a3, b2) {
      return a3 && b2 ? compare4(a3.__data__, b2.__data__) : !a3 - !b2;
    }
    for (var groups2 = this._groups, m = groups2.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group3 = groups2[j], n = group3.length, sortgroup = sortgroups[j] = new Array(n), node, i2 = 0; i2 < n; ++i2) {
        if (node = group3[i2]) {
          sortgroup[i2] = node;
        }
      }
      sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
  }
  function ascending2(a3, b2) {
    return a3 < b2 ? -1 : a3 > b2 ? 1 : a3 >= b2 ? 0 : NaN;
  }

  // node_modules/d3-selection/src/selection/call.js
  function call_default() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }

  // node_modules/d3-selection/src/selection/nodes.js
  function nodes_default() {
    return Array.from(this);
  }

  // node_modules/d3-selection/src/selection/node.js
  function node_default() {
    for (var groups2 = this._groups, j = 0, m = groups2.length; j < m; ++j) {
      for (var group3 = groups2[j], i2 = 0, n = group3.length; i2 < n; ++i2) {
        var node = group3[i2];
        if (node)
          return node;
      }
    }
    return null;
  }

  // node_modules/d3-selection/src/selection/size.js
  function size_default() {
    let size5 = 0;
    for (const node of this)
      ++size5;
    return size5;
  }

  // node_modules/d3-selection/src/selection/empty.js
  function empty_default() {
    return !this.node();
  }

  // node_modules/d3-selection/src/selection/each.js
  function each_default(callback) {
    for (var groups2 = this._groups, j = 0, m = groups2.length; j < m; ++j) {
      for (var group3 = groups2[j], i2 = 0, n = group3.length, node; i2 < n; ++i2) {
        if (node = group3[i2])
          callback.call(node, node.__data__, i2, group3);
      }
    }
    return this;
  }

  // node_modules/d3-selection/src/selection/attr.js
  function attrRemove(name15) {
    return function() {
      this.removeAttribute(name15);
    };
  }
  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant(name15, value12) {
    return function() {
      this.setAttribute(name15, value12);
    };
  }
  function attrConstantNS(fullname, value12) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value12);
    };
  }
  function attrFunction(name15, value12) {
    return function() {
      var v = value12.apply(this, arguments);
      if (v == null)
        this.removeAttribute(name15);
      else
        this.setAttribute(name15, v);
    };
  }
  function attrFunctionNS(fullname, value12) {
    return function() {
      var v = value12.apply(this, arguments);
      if (v == null)
        this.removeAttributeNS(fullname.space, fullname.local);
      else
        this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }
  function attr_default(name15, value12) {
    var fullname = namespace_default(name15);
    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value12 == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value12 === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value12));
  }

  // node_modules/d3-selection/src/window.js
  function window_default(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
  }

  // node_modules/d3-selection/src/selection/style.js
  function styleRemove(name15) {
    return function() {
      this.style.removeProperty(name15);
    };
  }
  function styleConstant(name15, value12, priority) {
    return function() {
      this.style.setProperty(name15, value12, priority);
    };
  }
  function styleFunction(name15, value12, priority) {
    return function() {
      var v = value12.apply(this, arguments);
      if (v == null)
        this.style.removeProperty(name15);
      else
        this.style.setProperty(name15, v, priority);
    };
  }
  function style_default(name15, value12, priority) {
    return arguments.length > 1 ? this.each((value12 == null ? styleRemove : typeof value12 === "function" ? styleFunction : styleConstant)(name15, value12, priority == null ? "" : priority)) : styleValue(this.node(), name15);
  }
  function styleValue(node, name15) {
    return node.style.getPropertyValue(name15) || window_default(node).getComputedStyle(node, null).getPropertyValue(name15);
  }

  // node_modules/d3-selection/src/selection/property.js
  function propertyRemove(name15) {
    return function() {
      delete this[name15];
    };
  }
  function propertyConstant(name15, value12) {
    return function() {
      this[name15] = value12;
    };
  }
  function propertyFunction(name15, value12) {
    return function() {
      var v = value12.apply(this, arguments);
      if (v == null)
        delete this[name15];
      else
        this[name15] = v;
    };
  }
  function property_default(name15, value12) {
    return arguments.length > 1 ? this.each((value12 == null ? propertyRemove : typeof value12 === "function" ? propertyFunction : propertyConstant)(name15, value12)) : this.node()[name15];
  }

  // node_modules/d3-selection/src/selection/classed.js
  function classArray(string2) {
    return string2.trim().split(/^|\s+/);
  }
  function classList(node) {
    return node.classList || new ClassList(node);
  }
  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }
  ClassList.prototype = {
    add: function(name15) {
      var i2 = this._names.indexOf(name15);
      if (i2 < 0) {
        this._names.push(name15);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function(name15) {
      var i2 = this._names.indexOf(name15);
      if (i2 >= 0) {
        this._names.splice(i2, 1);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function(name15) {
      return this._names.indexOf(name15) >= 0;
    }
  };
  function classedAdd(node, names) {
    var list = classList(node), i2 = -1, n = names.length;
    while (++i2 < n)
      list.add(names[i2]);
  }
  function classedRemove(node, names) {
    var list = classList(node), i2 = -1, n = names.length;
    while (++i2 < n)
      list.remove(names[i2]);
  }
  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }
  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }
  function classedFunction(names, value12) {
    return function() {
      (value12.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }
  function classed_default(name15, value12) {
    var names = classArray(name15 + "");
    if (arguments.length < 2) {
      var list = classList(this.node()), i2 = -1, n = names.length;
      while (++i2 < n)
        if (!list.contains(names[i2]))
          return false;
      return true;
    }
    return this.each((typeof value12 === "function" ? classedFunction : value12 ? classedTrue : classedFalse)(names, value12));
  }

  // node_modules/d3-selection/src/selection/text.js
  function textRemove() {
    this.textContent = "";
  }
  function textConstant(value12) {
    return function() {
      this.textContent = value12;
    };
  }
  function textFunction(value12) {
    return function() {
      var v = value12.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    };
  }
  function text_default(value12) {
    return arguments.length ? this.each(value12 == null ? textRemove : (typeof value12 === "function" ? textFunction : textConstant)(value12)) : this.node().textContent;
  }

  // node_modules/d3-selection/src/selection/html.js
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(value12) {
    return function() {
      this.innerHTML = value12;
    };
  }
  function htmlFunction(value12) {
    return function() {
      var v = value12.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    };
  }
  function html_default(value12) {
    return arguments.length ? this.each(value12 == null ? htmlRemove : (typeof value12 === "function" ? htmlFunction : htmlConstant)(value12)) : this.node().innerHTML;
  }

  // node_modules/d3-selection/src/selection/raise.js
  function raise() {
    if (this.nextSibling)
      this.parentNode.appendChild(this);
  }
  function raise_default() {
    return this.each(raise);
  }

  // node_modules/d3-selection/src/selection/lower.js
  function lower() {
    if (this.previousSibling)
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default() {
    return this.each(lower);
  }

  // node_modules/d3-selection/src/selection/append.js
  function append_default(name15) {
    var create5 = typeof name15 === "function" ? name15 : creator_default(name15);
    return this.select(function() {
      return this.appendChild(create5.apply(this, arguments));
    });
  }

  // node_modules/d3-selection/src/selection/insert.js
  function constantNull() {
    return null;
  }
  function insert_default(name15, before) {
    var create5 = typeof name15 === "function" ? name15 : creator_default(name15), select4 = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
    return this.select(function() {
      return this.insertBefore(create5.apply(this, arguments), select4.apply(this, arguments) || null);
    });
  }

  // node_modules/d3-selection/src/selection/remove.js
  function remove() {
    var parent2 = this.parentNode;
    if (parent2)
      parent2.removeChild(this);
  }
  function remove_default() {
    return this.each(remove);
  }

  // node_modules/d3-selection/src/selection/clone.js
  function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent2 = this.parentNode;
    return parent2 ? parent2.insertBefore(clone, this.nextSibling) : clone;
  }
  function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent2 = this.parentNode;
    return parent2 ? parent2.insertBefore(clone, this.nextSibling) : clone;
  }
  function clone_default(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }

  // node_modules/d3-selection/src/selection/datum.js
  function datum_default(value12) {
    return arguments.length ? this.property("__data__", value12) : this.node().__data__;
  }

  // node_modules/d3-selection/src/selection/on.js
  function contextListener(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames2(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name15 = "", i2 = t.indexOf(".");
      if (i2 >= 0)
        name15 = t.slice(i2 + 1), t = t.slice(0, i2);
      return { type: t, name: name15 };
    });
  }
  function onRemove(typename) {
    return function() {
      var on2 = this.__on;
      if (!on2)
        return;
      for (var j = 0, i2 = -1, m = on2.length, o; j < m; ++j) {
        if (o = on2[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
        } else {
          on2[++i2] = o;
        }
      }
      if (++i2)
        on2.length = i2;
      else
        delete this.__on;
    };
  }
  function onAdd(typename, value12, options2) {
    return function() {
      var on2 = this.__on, o, listener = contextListener(value12);
      if (on2)
        for (var j = 0, m = on2.length; j < m; ++j) {
          if ((o = on2[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options2);
            o.value = value12;
            return;
          }
        }
      this.addEventListener(typename.type, listener, options2);
      o = { type: typename.type, name: typename.name, value: value12, listener, options: options2 };
      if (!on2)
        this.__on = [o];
      else
        on2.push(o);
    };
  }
  function on_default(typename, value12, options2) {
    var typenames = parseTypenames2(typename + ""), i2, n = typenames.length, t;
    if (arguments.length < 2) {
      var on2 = this.node().__on;
      if (on2)
        for (var j = 0, m = on2.length, o; j < m; ++j) {
          for (i2 = 0, o = on2[j]; i2 < n; ++i2) {
            if ((t = typenames[i2]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
      return;
    }
    on2 = value12 ? onAdd : onRemove;
    for (i2 = 0; i2 < n; ++i2)
      this.each(on2(typenames[i2], value12, options2));
    return this;
  }

  // node_modules/d3-selection/src/selection/dispatch.js
  function dispatchEvent(node, type2, params) {
    var window3 = window_default(node), event = window3.CustomEvent;
    if (typeof event === "function") {
      event = new event(type2, params);
    } else {
      event = window3.document.createEvent("Event");
      if (params)
        event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
      else
        event.initEvent(type2, false, false);
    }
    node.dispatchEvent(event);
  }
  function dispatchConstant(type2, params) {
    return function() {
      return dispatchEvent(this, type2, params);
    };
  }
  function dispatchFunction(type2, params) {
    return function() {
      return dispatchEvent(this, type2, params.apply(this, arguments));
    };
  }
  function dispatch_default2(type2, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
  }

  // node_modules/d3-selection/src/selection/iterator.js
  function* iterator_default() {
    for (var groups2 = this._groups, j = 0, m = groups2.length; j < m; ++j) {
      for (var group3 = groups2[j], i2 = 0, n = group3.length, node; i2 < n; ++i2) {
        if (node = group3[i2])
          yield node;
      }
    }
  }

  // node_modules/d3-selection/src/selection/index.js
  var root = [null];
  function Selection(groups2, parents) {
    this._groups = groups2;
    this._parents = parents;
  }
  function selection() {
    return new Selection([[document.documentElement]], root);
  }
  function selection_selection() {
    return this;
  }
  Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: select_default,
    selectAll: selectAll_default,
    selectChild: selectChild_default,
    selectChildren: selectChildren_default,
    filter: filter_default,
    data: data_default,
    enter: enter_default,
    exit: exit_default,
    join: join_default,
    merge: merge_default,
    selection: selection_selection,
    order: order_default,
    sort: sort_default,
    call: call_default,
    nodes: nodes_default,
    node: node_default,
    size: size_default,
    empty: empty_default,
    each: each_default,
    attr: attr_default,
    style: style_default,
    property: property_default,
    classed: classed_default,
    text: text_default,
    html: html_default,
    raise: raise_default,
    lower: lower_default,
    append: append_default,
    insert: insert_default,
    remove: remove_default,
    clone: clone_default,
    datum: datum_default,
    on: on_default,
    dispatch: dispatch_default2,
    [Symbol.iterator]: iterator_default
  };
  var selection_default = selection;

  // node_modules/d3-selection/src/select.js
  function select_default2(selector) {
    return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
  }

  // node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend2(parent2, definition) {
    var prototype = Object.create(parent2.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }

  // node_modules/d3-color/src/color.js
  function Color() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
  var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
  var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
  var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
  var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
  var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color, color, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format4) {
    var m, l;
    format4 = (format4 + "").trim().toLowerCase();
    return (m = reHex.exec(format4)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format4)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format4)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format4)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format4)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format4)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format4)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format4) ? rgbn(named[format4]) : format4 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n) {
    return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function rgba(r2, g, b2, a3) {
    if (a3 <= 0)
      r2 = g = b2 = NaN;
    return new Rgb(r2, g, b2, a3);
  }
  function rgbConvert(o) {
    if (!(o instanceof Color))
      o = color(o);
    if (!o)
      return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }
  function rgb(r2, g, b2, opacity2) {
    return arguments.length === 1 ? rgbConvert(r2) : new Rgb(r2, g, b2, opacity2 == null ? 1 : opacity2);
  }
  function Rgb(r2, g, b2, opacity2) {
    this.r = +r2;
    this.g = +g;
    this.b = +b2;
    this.opacity = +opacity2;
  }
  define_default(Rgb, rgb, extend2(Color, {
    brighter(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a3 = clampa(this.opacity);
    return `${a3 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a3 === 1 ? ")" : `, ${a3})`}`;
  }
  function clampa(opacity2) {
    return isNaN(opacity2) ? 1 : Math.max(0, Math.min(1, opacity2));
  }
  function clampi(value12) {
    return Math.max(0, Math.min(255, Math.round(value12) || 0));
  }
  function hex(value12) {
    value12 = clampi(value12);
    return (value12 < 16 ? "0" : "") + value12.toString(16);
  }
  function hsla(h, s3, l, a3) {
    if (a3 <= 0)
      h = s3 = l = NaN;
    else if (l <= 0 || l >= 1)
      h = s3 = NaN;
    else if (s3 <= 0)
      h = NaN;
    return new Hsl(h, s3, l, a3);
  }
  function hslConvert(o) {
    if (o instanceof Hsl)
      return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color))
      o = color(o);
    if (!o)
      return new Hsl();
    if (o instanceof Hsl)
      return o;
    o = o.rgb();
    var r2 = o.r / 255, g = o.g / 255, b2 = o.b / 255, min8 = Math.min(r2, g, b2), max8 = Math.max(r2, g, b2), h = NaN, s3 = max8 - min8, l = (max8 + min8) / 2;
    if (s3) {
      if (r2 === max8)
        h = (g - b2) / s3 + (g < b2) * 6;
      else if (g === max8)
        h = (b2 - r2) / s3 + 2;
      else
        h = (r2 - g) / s3 + 4;
      s3 /= l < 0.5 ? max8 + min8 : 2 - max8 - min8;
      h *= 60;
    } else {
      s3 = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s3, l, o.opacity);
  }
  function hsl(h, s3, l, opacity2) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s3, l, opacity2 == null ? 1 : opacity2);
  }
  function Hsl(h, s3, l, opacity2) {
    this.h = +h;
    this.s = +s3;
    this.l = +l;
    this.opacity = +opacity2;
  }
  define_default(Hsl, hsl, extend2(Color, {
    brighter(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb() {
      var h = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s3, m1 = 2 * l - m2;
      return new Rgb(
        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
        hsl2rgb(h, m1, m2),
        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
        this.opacity
      );
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a3 = clampa(this.opacity);
      return `${a3 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a3 === 1 ? ")" : `, ${a3})`}`;
    }
  }));
  function clamph(value12) {
    value12 = (value12 || 0) % 360;
    return value12 < 0 ? value12 + 360 : value12;
  }
  function clampt(value12) {
    return Math.max(0, Math.min(1, value12 || 0));
  }
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }

  // node_modules/d3-color/src/math.js
  var radians = Math.PI / 180;
  var degrees = 180 / Math.PI;

  // node_modules/d3-color/src/lab.js
  var K = 18;
  var Xn = 0.96422;
  var Yn = 1;
  var Zn = 0.82521;
  var t0 = 4 / 29;
  var t1 = 6 / 29;
  var t2 = 3 * t1 * t1;
  var t3 = t1 * t1 * t1;
  function labConvert(o) {
    if (o instanceof Lab)
      return new Lab(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl)
      return hcl2lab(o);
    if (!(o instanceof Rgb))
      o = rgbConvert(o);
    var r2 = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b2 = rgb2lrgb(o.b), y2 = xyz2lab((0.2225045 * r2 + 0.7168786 * g + 0.0606169 * b2) / Yn), x2, z;
    if (r2 === g && g === b2)
      x2 = z = y2;
    else {
      x2 = xyz2lab((0.4360747 * r2 + 0.3850649 * g + 0.1430804 * b2) / Xn);
      z = xyz2lab((0.0139322 * r2 + 0.0971045 * g + 0.7141733 * b2) / Zn);
    }
    return new Lab(116 * y2 - 16, 500 * (x2 - y2), 200 * (y2 - z), o.opacity);
  }
  function lab(l, a3, b2, opacity2) {
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a3, b2, opacity2 == null ? 1 : opacity2);
  }
  function Lab(l, a3, b2, opacity2) {
    this.l = +l;
    this.a = +a3;
    this.b = +b2;
    this.opacity = +opacity2;
  }
  define_default(Lab, lab, extend2(Color, {
    brighter(k2) {
      return new Lab(this.l + K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
    },
    darker(k2) {
      return new Lab(this.l - K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
    },
    rgb() {
      var y2 = (this.l + 16) / 116, x2 = isNaN(this.a) ? y2 : y2 + this.a / 500, z = isNaN(this.b) ? y2 : y2 - this.b / 200;
      x2 = Xn * lab2xyz(x2);
      y2 = Yn * lab2xyz(y2);
      z = Zn * lab2xyz(z);
      return new Rgb(
        lrgb2rgb(3.1338561 * x2 - 1.6168667 * y2 - 0.4906146 * z),
        lrgb2rgb(-0.9787684 * x2 + 1.9161415 * y2 + 0.033454 * z),
        lrgb2rgb(0.0719453 * x2 - 0.2289914 * y2 + 1.4052427 * z),
        this.opacity
      );
    }
  }));
  function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
  }
  function lab2xyz(t) {
    return t > t1 ? t * t * t : t2 * (t - t0);
  }
  function lrgb2rgb(x2) {
    return 255 * (x2 <= 31308e-7 ? 12.92 * x2 : 1.055 * Math.pow(x2, 1 / 2.4) - 0.055);
  }
  function rgb2lrgb(x2) {
    return (x2 /= 255) <= 0.04045 ? x2 / 12.92 : Math.pow((x2 + 0.055) / 1.055, 2.4);
  }
  function hclConvert(o) {
    if (o instanceof Hcl)
      return new Hcl(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab))
      o = labConvert(o);
    if (o.a === 0 && o.b === 0)
      return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
    var h = Math.atan2(o.b, o.a) * degrees;
    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
  }
  function hcl(h, c4, l, opacity2) {
    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c4, l, opacity2 == null ? 1 : opacity2);
  }
  function Hcl(h, c4, l, opacity2) {
    this.h = +h;
    this.c = +c4;
    this.l = +l;
    this.opacity = +opacity2;
  }
  function hcl2lab(o) {
    if (isNaN(o.h))
      return new Lab(o.l, 0, 0, o.opacity);
    var h = o.h * radians;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  define_default(Hcl, hcl, extend2(Color, {
    brighter(k2) {
      return new Hcl(this.h, this.c, this.l + K * (k2 == null ? 1 : k2), this.opacity);
    },
    darker(k2) {
      return new Hcl(this.h, this.c, this.l - K * (k2 == null ? 1 : k2), this.opacity);
    },
    rgb() {
      return hcl2lab(this).rgb();
    }
  }));

  // node_modules/d3-color/src/cubehelix.js
  var A = -0.14861;
  var B = 1.78277;
  var C = -0.29227;
  var D = -0.90649;
  var E = 1.97294;
  var ED = E * D;
  var EB = E * B;
  var BC_DA = B * C - D * A;
  function cubehelixConvert(o) {
    if (o instanceof Cubehelix)
      return new Cubehelix(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Rgb))
      o = rgbConvert(o);
    var r2 = o.r / 255, g = o.g / 255, b2 = o.b / 255, l = (BC_DA * b2 + ED * r2 - EB * g) / (BC_DA + ED - EB), bl = b2 - l, k2 = (E * (g - l) - C * bl) / D, s3 = Math.sqrt(k2 * k2 + bl * bl) / (E * l * (1 - l)), h = s3 ? Math.atan2(k2, bl) * degrees - 120 : NaN;
    return new Cubehelix(h < 0 ? h + 360 : h, s3, l, o.opacity);
  }
  function cubehelix(h, s3, l, opacity2) {
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s3, l, opacity2 == null ? 1 : opacity2);
  }
  function Cubehelix(h, s3, l, opacity2) {
    this.h = +h;
    this.s = +s3;
    this.l = +l;
    this.opacity = +opacity2;
  }
  define_default(Cubehelix, cubehelix, extend2(Color, {
    brighter(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb() {
      var h = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a3 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
      return new Rgb(
        255 * (l + a3 * (A * cosh + B * sinh)),
        255 * (l + a3 * (C * cosh + D * sinh)),
        255 * (l + a3 * (E * cosh)),
        this.opacity
      );
    }
  }));

  // node_modules/d3-interpolate/src/basis.js
  function basis(t13, v0, v1, v2, v3) {
    var t22 = t13 * t13, t32 = t22 * t13;
    return ((1 - 3 * t13 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t13 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
  }
  function basis_default(values3) {
    var n = values3.length - 1;
    return function(t) {
      var i2 = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values3[i2], v2 = values3[i2 + 1], v0 = i2 > 0 ? values3[i2 - 1] : 2 * v1 - v2, v3 = i2 < n - 1 ? values3[i2 + 2] : 2 * v2 - v1;
      return basis((t - i2 / n) * n, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default(values3) {
    var n = values3.length;
    return function(t) {
      var i2 = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values3[(i2 + n - 1) % n], v1 = values3[i2 % n], v2 = values3[(i2 + 1) % n], v3 = values3[(i2 + 2) % n];
      return basis((t - i2 / n) * n, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/constant.js
  var constant_default2 = (x2) => () => x2;

  // node_modules/d3-interpolate/src/color.js
  function linear(a3, d) {
    return function(t) {
      return a3 + t * d;
    };
  }
  function exponential(a3, b2, y2) {
    return a3 = Math.pow(a3, y2), b2 = Math.pow(b2, y2) - a3, y2 = 1 / y2, function(t) {
      return Math.pow(a3 + t * b2, y2);
    };
  }
  function hue(a3, b2) {
    var d = b2 - a3;
    return d ? linear(a3, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default2(isNaN(a3) ? b2 : a3);
  }
  function gamma(y2) {
    return (y2 = +y2) === 1 ? nogamma : function(a3, b2) {
      return b2 - a3 ? exponential(a3, b2, y2) : constant_default2(isNaN(a3) ? b2 : a3);
    };
  }
  function nogamma(a3, b2) {
    var d = b2 - a3;
    return d ? linear(a3, d) : constant_default2(isNaN(a3) ? b2 : a3);
  }

  // node_modules/d3-interpolate/src/rgb.js
  var rgb_default = function rgbGamma(y2) {
    var color3 = gamma(y2);
    function rgb2(start3, end) {
      var r2 = color3((start3 = rgb(start3)).r, (end = rgb(end)).r), g = color3(start3.g, end.g), b2 = color3(start3.b, end.b), opacity2 = nogamma(start3.opacity, end.opacity);
      return function(t) {
        start3.r = r2(t);
        start3.g = g(t);
        start3.b = b2(t);
        start3.opacity = opacity2(t);
        return start3 + "";
      };
    }
    rgb2.gamma = rgbGamma;
    return rgb2;
  }(1);
  function rgbSpline(spline) {
    return function(colors) {
      var n = colors.length, r2 = new Array(n), g = new Array(n), b2 = new Array(n), i2, color3;
      for (i2 = 0; i2 < n; ++i2) {
        color3 = rgb(colors[i2]);
        r2[i2] = color3.r || 0;
        g[i2] = color3.g || 0;
        b2[i2] = color3.b || 0;
      }
      r2 = spline(r2);
      g = spline(g);
      b2 = spline(b2);
      color3.opacity = 1;
      return function(t) {
        color3.r = r2(t);
        color3.g = g(t);
        color3.b = b2(t);
        return color3 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default);
  var rgbBasisClosed = rgbSpline(basisClosed_default);

  // node_modules/d3-interpolate/src/numberArray.js
  function numberArray_default(a3, b2) {
    if (!b2)
      b2 = [];
    var n = a3 ? Math.min(b2.length, a3.length) : 0, c4 = b2.slice(), i2;
    return function(t) {
      for (i2 = 0; i2 < n; ++i2)
        c4[i2] = a3[i2] * (1 - t) + b2[i2] * t;
      return c4;
    };
  }
  function isNumberArray(x2) {
    return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
  }

  // node_modules/d3-interpolate/src/array.js
  function genericArray(a3, b2) {
    var nb = b2 ? b2.length : 0, na = a3 ? Math.min(nb, a3.length) : 0, x2 = new Array(na), c4 = new Array(nb), i2;
    for (i2 = 0; i2 < na; ++i2)
      x2[i2] = value_default(a3[i2], b2[i2]);
    for (; i2 < nb; ++i2)
      c4[i2] = b2[i2];
    return function(t) {
      for (i2 = 0; i2 < na; ++i2)
        c4[i2] = x2[i2](t);
      return c4;
    };
  }

  // node_modules/d3-interpolate/src/date.js
  function date_default(a3, b2) {
    var d = new Date();
    return a3 = +a3, b2 = +b2, function(t) {
      return d.setTime(a3 * (1 - t) + b2 * t), d;
    };
  }

  // node_modules/d3-interpolate/src/number.js
  function number_default(a3, b2) {
    return a3 = +a3, b2 = +b2, function(t) {
      return a3 * (1 - t) + b2 * t;
    };
  }

  // node_modules/d3-interpolate/src/object.js
  function object_default(a3, b2) {
    var i2 = {}, c4 = {}, k2;
    if (a3 === null || typeof a3 !== "object")
      a3 = {};
    if (b2 === null || typeof b2 !== "object")
      b2 = {};
    for (k2 in b2) {
      if (k2 in a3) {
        i2[k2] = value_default(a3[k2], b2[k2]);
      } else {
        c4[k2] = b2[k2];
      }
    }
    return function(t) {
      for (k2 in i2)
        c4[k2] = i2[k2](t);
      return c4;
    };
  }

  // node_modules/d3-interpolate/src/string.js
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero3(b2) {
    return function() {
      return b2;
    };
  }
  function one2(b2) {
    return function(t) {
      return b2(t) + "";
    };
  }
  function string_default(a3, b2) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s3 = [], q2 = [];
    a3 = a3 + "", b2 = b2 + "";
    while ((am = reA.exec(a3)) && (bm = reB.exec(b2))) {
      if ((bs = bm.index) > bi) {
        bs = b2.slice(bi, bs);
        if (s3[i2])
          s3[i2] += bs;
        else
          s3[++i2] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s3[i2])
          s3[i2] += bm;
        else
          s3[++i2] = bm;
      } else {
        s3[++i2] = null;
        q2.push({ i: i2, x: number_default(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b2.length) {
      bs = b2.slice(bi);
      if (s3[i2])
        s3[i2] += bs;
      else
        s3[++i2] = bs;
    }
    return s3.length < 2 ? q2[0] ? one2(q2[0].x) : zero3(b2) : (b2 = q2.length, function(t) {
      for (var i3 = 0, o; i3 < b2; ++i3)
        s3[(o = q2[i3]).i] = o.x(t);
      return s3.join("");
    });
  }

  // node_modules/d3-interpolate/src/value.js
  function value_default(a3, b2) {
    var t = typeof b2, c4;
    return b2 == null || t === "boolean" ? constant_default2(b2) : (t === "number" ? number_default : t === "string" ? (c4 = color(b2)) ? (b2 = c4, rgb_default) : string_default : b2 instanceof color ? rgb_default : b2 instanceof Date ? date_default : isNumberArray(b2) ? numberArray_default : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object_default : number_default)(a3, b2);
  }

  // node_modules/d3-interpolate/src/round.js
  function round_default(a3, b2) {
    return a3 = +a3, b2 = +b2, function(t) {
      return Math.round(a3 * (1 - t) + b2 * t);
    };
  }

  // node_modules/d3-interpolate/src/transform/decompose.js
  var degrees2 = 180 / Math.PI;
  var identity8 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose_default(a3, b2, c4, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a3 * a3 + b2 * b2))
      a3 /= scaleX, b2 /= scaleX;
    if (skewX = a3 * c4 + b2 * d)
      c4 -= a3 * skewX, d -= b2 * skewX;
    if (scaleY = Math.sqrt(c4 * c4 + d * d))
      c4 /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a3 * d < b2 * c4)
      a3 = -a3, b2 = -b2, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b2, a3) * degrees2,
      skewX: Math.atan(skewX) * degrees2,
      scaleX,
      scaleY
    };
  }

  // node_modules/d3-interpolate/src/transform/parse.js
  var svgNode;
  function parseCss(value12) {
    const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value12 + "");
    return m.isIdentity ? identity8 : decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
  }
  function parseSvg(value12) {
    if (value12 == null)
      return identity8;
    if (!svgNode)
      svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value12);
    if (!(value12 = svgNode.transform.baseVal.consolidate()))
      return identity8;
    value12 = value12.matrix;
    return decompose_default(value12.a, value12.b, value12.c, value12.d, value12.e, value12.f);
  }

  // node_modules/d3-interpolate/src/transform/index.js
  function interpolateTransform(parse9, pxComma, pxParen, degParen) {
    function pop2(s3) {
      return s3.length ? s3.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s3, q2) {
      if (xa !== xb || ya !== yb) {
        var i2 = s3.push("translate(", null, pxComma, null, pxParen);
        q2.push({ i: i2 - 4, x: number_default(xa, xb) }, { i: i2 - 2, x: number_default(ya, yb) });
      } else if (xb || yb) {
        s3.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a3, b2, s3, q2) {
      if (a3 !== b2) {
        if (a3 - b2 > 180)
          b2 += 360;
        else if (b2 - a3 > 180)
          a3 += 360;
        q2.push({ i: s3.push(pop2(s3) + "rotate(", null, degParen) - 2, x: number_default(a3, b2) });
      } else if (b2) {
        s3.push(pop2(s3) + "rotate(" + b2 + degParen);
      }
    }
    function skewX(a3, b2, s3, q2) {
      if (a3 !== b2) {
        q2.push({ i: s3.push(pop2(s3) + "skewX(", null, degParen) - 2, x: number_default(a3, b2) });
      } else if (b2) {
        s3.push(pop2(s3) + "skewX(" + b2 + degParen);
      }
    }
    function scale(xa, ya, xb, yb, s3, q2) {
      if (xa !== xb || ya !== yb) {
        var i2 = s3.push(pop2(s3) + "scale(", null, ",", null, ")");
        q2.push({ i: i2 - 4, x: number_default(xa, xb) }, { i: i2 - 2, x: number_default(ya, yb) });
      } else if (xb !== 1 || yb !== 1) {
        s3.push(pop2(s3) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a3, b2) {
      var s3 = [], q2 = [];
      a3 = parse9(a3), b2 = parse9(b2);
      translate(a3.translateX, a3.translateY, b2.translateX, b2.translateY, s3, q2);
      rotate(a3.rotate, b2.rotate, s3, q2);
      skewX(a3.skewX, b2.skewX, s3, q2);
      scale(a3.scaleX, a3.scaleY, b2.scaleX, b2.scaleY, s3, q2);
      a3 = b2 = null;
      return function(t) {
        var i2 = -1, n = q2.length, o;
        while (++i2 < n)
          s3[(o = q2[i2]).i] = o.x(t);
        return s3.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

  // node_modules/d3-interpolate/src/hsl.js
  function hsl2(hue2) {
    return function(start3, end) {
      var h = hue2((start3 = hsl(start3)).h, (end = hsl(end)).h), s3 = nogamma(start3.s, end.s), l = nogamma(start3.l, end.l), opacity2 = nogamma(start3.opacity, end.opacity);
      return function(t) {
        start3.h = h(t);
        start3.s = s3(t);
        start3.l = l(t);
        start3.opacity = opacity2(t);
        return start3 + "";
      };
    };
  }
  var hsl_default = hsl2(hue);
  var hslLong = hsl2(nogamma);

  // node_modules/d3-interpolate/src/lab.js
  function lab2(start3, end) {
    var l = nogamma((start3 = lab(start3)).l, (end = lab(end)).l), a3 = nogamma(start3.a, end.a), b2 = nogamma(start3.b, end.b), opacity2 = nogamma(start3.opacity, end.opacity);
    return function(t) {
      start3.l = l(t);
      start3.a = a3(t);
      start3.b = b2(t);
      start3.opacity = opacity2(t);
      return start3 + "";
    };
  }

  // node_modules/d3-interpolate/src/hcl.js
  function hcl2(hue2) {
    return function(start3, end) {
      var h = hue2((start3 = hcl(start3)).h, (end = hcl(end)).h), c4 = nogamma(start3.c, end.c), l = nogamma(start3.l, end.l), opacity2 = nogamma(start3.opacity, end.opacity);
      return function(t) {
        start3.h = h(t);
        start3.c = c4(t);
        start3.l = l(t);
        start3.opacity = opacity2(t);
        return start3 + "";
      };
    };
  }
  var hcl_default = hcl2(hue);
  var hclLong = hcl2(nogamma);

  // node_modules/d3-interpolate/src/cubehelix.js
  function cubehelix2(hue2) {
    return function cubehelixGamma(y2) {
      y2 = +y2;
      function cubehelix3(start3, end) {
        var h = hue2((start3 = cubehelix(start3)).h, (end = cubehelix(end)).h), s3 = nogamma(start3.s, end.s), l = nogamma(start3.l, end.l), opacity2 = nogamma(start3.opacity, end.opacity);
        return function(t) {
          start3.h = h(t);
          start3.s = s3(t);
          start3.l = l(Math.pow(t, y2));
          start3.opacity = opacity2(t);
          return start3 + "";
        };
      }
      cubehelix3.gamma = cubehelixGamma;
      return cubehelix3;
    }(1);
  }
  var cubehelix_default = cubehelix2(hue);
  var cubehelixLong = cubehelix2(nogamma);

  // node_modules/d3-interpolate/src/piecewise.js
  function piecewise(interpolate, values3) {
    if (values3 === void 0)
      values3 = interpolate, interpolate = value_default;
    var i2 = 0, n = values3.length - 1, v = values3[0], I = new Array(n < 0 ? 0 : n);
    while (i2 < n)
      I[i2] = interpolate(v, v = values3[++i2]);
    return function(t) {
      var i3 = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
      return I[i3](t - i3);
    };
  }

  // node_modules/d3-interpolate/src/quantize.js
  function quantize_default(interpolator, n) {
    var samples = new Array(n);
    for (var i2 = 0; i2 < n; ++i2)
      samples[i2] = interpolator(i2 / (n - 1));
    return samples;
  }

  // node_modules/d3-timer/src/timer.js
  var frame = 0;
  var timeout = 0;
  var interval = 0;
  var pokeDelay = 1e3;
  var taskHead;
  var taskTail;
  var clockLast = 0;
  var clockNow = 0;
  var clockSkew = 0;
  var clock = typeof performance === "object" && performance.now ? performance : Date;
  var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
    setTimeout(f, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay2, time4) {
      if (typeof callback !== "function")
        throw new TypeError("callback is not a function");
      time4 = (time4 == null ? now() : +time4) + (delay2 == null ? 0 : +delay2);
      if (!this._next && taskTail !== this) {
        if (taskTail)
          taskTail._next = this;
        else
          taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time4;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay2, time4) {
    var t = new Timer();
    t.restart(callback, delay2, time4);
    return t;
  }
  function timerFlush() {
    now();
    ++frame;
    var t = taskHead, e;
    while (t) {
      if ((e = clockNow - t._time) >= 0)
        t._call.call(void 0, e);
      t = t._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke2() {
    var now3 = clock.now(), delay2 = now3 - clockLast;
    if (delay2 > pokeDelay)
      clockSkew -= delay2, clockLast = now3;
  }
  function nap() {
    var t03, t13 = taskHead, t22, time4 = Infinity;
    while (t13) {
      if (t13._call) {
        if (time4 > t13._time)
          time4 = t13._time;
        t03 = t13, t13 = t13._next;
      } else {
        t22 = t13._next, t13._next = null;
        t13 = t03 ? t03._next = t22 : taskHead = t22;
      }
    }
    taskTail = t03;
    sleep(time4);
  }
  function sleep(time4) {
    if (frame)
      return;
    if (timeout)
      timeout = clearTimeout(timeout);
    var delay2 = time4 - clockNow;
    if (delay2 > 24) {
      if (time4 < Infinity)
        timeout = setTimeout(wake, time4 - clock.now() - clockSkew);
      if (interval)
        interval = clearInterval(interval);
    } else {
      if (!interval)
        clockLast = clock.now(), interval = setInterval(poke2, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  // node_modules/d3-timer/src/timeout.js
  function timeout_default(callback, delay2, time4) {
    var t = new Timer();
    delay2 = delay2 == null ? 0 : +delay2;
    t.restart((elapsed) => {
      t.stop();
      callback(elapsed + delay2);
    }, delay2, time4);
    return t;
  }

  // node_modules/d3-transition/src/transition/schedule.js
  var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
  var emptyTween = [];
  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var RUNNING = 4;
  var ENDING = 5;
  var ENDED = 6;
  function schedule_default(node, name15, id3, index5, group3, timing) {
    var schedules = node.__transition;
    if (!schedules)
      node.__transition = {};
    else if (id3 in schedules)
      return;
    create(node, id3, {
      name: name15,
      index: index5,
      group: group3,
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node, id3) {
    var schedule = get2(node, id3);
    if (schedule.state > CREATED)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set2(node, id3) {
    var schedule = get2(node, id3);
    if (schedule.state > STARTED)
      throw new Error("too late; already running");
    return schedule;
  }
  function get2(node, id3) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id3]))
      throw new Error("transition not found");
    return schedule;
  }
  function create(node, id3, self) {
    var schedules = node.__transition, tween;
    schedules[id3] = self;
    self.timer = timer(schedule, 0, self.time);
    function schedule(elapsed) {
      self.state = SCHEDULED;
      self.timer.restart(start3, self.delay, self.time);
      if (self.delay <= elapsed)
        start3(elapsed - self.delay);
    }
    function start3(elapsed) {
      var i2, j, n, o;
      if (self.state !== SCHEDULED)
        return stop();
      for (i2 in schedules) {
        o = schedules[i2];
        if (o.name !== self.name)
          continue;
        if (o.state === STARTED)
          return timeout_default(start3);
        if (o.state === RUNNING) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("interrupt", node, node.__data__, o.index, o.group);
          delete schedules[i2];
        } else if (+i2 < id3) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i2];
        }
      }
      timeout_default(function() {
        if (self.state === STARTED) {
          self.state = RUNNING;
          self.timer.restart(tick, self.delay, self.time);
          tick(elapsed);
        }
      });
      self.state = STARTING;
      self.on.call("start", node, node.__data__, self.index, self.group);
      if (self.state !== STARTING)
        return;
      self.state = STARTED;
      tween = new Array(n = self.tween.length);
      for (i2 = 0, j = -1; i2 < n; ++i2) {
        if (o = self.tween[i2].value.call(node, node.__data__, self.index, self.group)) {
          tween[++j] = o;
        }
      }
      tween.length = j + 1;
    }
    function tick(elapsed) {
      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i2 = -1, n = tween.length;
      while (++i2 < n) {
        tween[i2].call(node, t);
      }
      if (self.state === ENDING) {
        self.on.call("end", node, node.__data__, self.index, self.group);
        stop();
      }
    }
    function stop() {
      self.state = ENDED;
      self.timer.stop();
      delete schedules[id3];
      for (var i2 in schedules)
        return;
      delete node.__transition;
    }
  }

  // node_modules/d3-transition/src/interrupt.js
  function interrupt_default(node, name15) {
    var schedules = node.__transition, schedule, active, empty6 = true, i2;
    if (!schedules)
      return;
    name15 = name15 == null ? null : name15 + "";
    for (i2 in schedules) {
      if ((schedule = schedules[i2]).name !== name15) {
        empty6 = false;
        continue;
      }
      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i2];
    }
    if (empty6)
      delete node.__transition;
  }

  // node_modules/d3-transition/src/selection/interrupt.js
  function interrupt_default2(name15) {
    return this.each(function() {
      interrupt_default(this, name15);
    });
  }

  // node_modules/d3-transition/src/transition/tween.js
  function tweenRemove(id3, name15) {
    var tween0, tween1;
    return function() {
      var schedule = set2(this, id3), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i2 = 0, n = tween1.length; i2 < n; ++i2) {
          if (tween1[i2].name === name15) {
            tween1 = tween1.slice();
            tween1.splice(i2, 1);
            break;
          }
        }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction(id3, name15, value12) {
    var tween0, tween1;
    if (typeof value12 !== "function")
      throw new Error();
    return function() {
      var schedule = set2(this, id3), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = { name: name15, value: value12 }, i2 = 0, n = tween1.length; i2 < n; ++i2) {
          if (tween1[i2].name === name15) {
            tween1[i2] = t;
            break;
          }
        }
        if (i2 === n)
          tween1.push(t);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default(name15, value12) {
    var id3 = this._id;
    name15 += "";
    if (arguments.length < 2) {
      var tween = get2(this.node(), id3).tween;
      for (var i2 = 0, n = tween.length, t; i2 < n; ++i2) {
        if ((t = tween[i2]).name === name15) {
          return t.value;
        }
      }
      return null;
    }
    return this.each((value12 == null ? tweenRemove : tweenFunction)(id3, name15, value12));
  }
  function tweenValue(transition2, name15, value12) {
    var id3 = transition2._id;
    transition2.each(function() {
      var schedule = set2(this, id3);
      (schedule.value || (schedule.value = {}))[name15] = value12.apply(this, arguments);
    });
    return function(node) {
      return get2(node, id3).value[name15];
    };
  }

  // node_modules/d3-transition/src/transition/interpolate.js
  function interpolate_default(a3, b2) {
    var c4;
    return (typeof b2 === "number" ? number_default : b2 instanceof color ? rgb_default : (c4 = color(b2)) ? (b2 = c4, rgb_default) : string_default)(a3, b2);
  }

  // node_modules/d3-transition/src/transition/attr.js
  function attrRemove2(name15) {
    return function() {
      this.removeAttribute(name15);
    };
  }
  function attrRemoveNS2(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant2(name15, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name15);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrConstantNS2(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrFunction2(name15, interpolate, value12) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value12(this), string1;
      if (value1 == null)
        return void this.removeAttribute(name15);
      string0 = this.getAttribute(name15);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attrFunctionNS2(fullname, interpolate, value12) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value12(this), string1;
      if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attr_default2(name15, value12) {
    var fullname = namespace_default(name15), i2 = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
    return this.attrTween(name15, typeof value12 === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i2, tweenValue(this, "attr." + name15, value12)) : value12 == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i2, value12));
  }

  // node_modules/d3-transition/src/transition/attrTween.js
  function attrInterpolate(name15, i2) {
    return function(t) {
      this.setAttribute(name15, i2.call(this, t));
    };
  }
  function attrInterpolateNS(fullname, i2) {
    return function(t) {
      this.setAttributeNS(fullname.space, fullname.local, i2.call(this, t));
    };
  }
  function attrTweenNS(fullname, value12) {
    var t03, i0;
    function tween() {
      var i2 = value12.apply(this, arguments);
      if (i2 !== i0)
        t03 = (i0 = i2) && attrInterpolateNS(fullname, i2);
      return t03;
    }
    tween._value = value12;
    return tween;
  }
  function attrTween(name15, value12) {
    var t03, i0;
    function tween() {
      var i2 = value12.apply(this, arguments);
      if (i2 !== i0)
        t03 = (i0 = i2) && attrInterpolate(name15, i2);
      return t03;
    }
    tween._value = value12;
    return tween;
  }
  function attrTween_default(name15, value12) {
    var key = "attr." + name15;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value12 == null)
      return this.tween(key, null);
    if (typeof value12 !== "function")
      throw new Error();
    var fullname = namespace_default(name15);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value12));
  }

  // node_modules/d3-transition/src/transition/delay.js
  function delayFunction(id3, value12) {
    return function() {
      init(this, id3).delay = +value12.apply(this, arguments);
    };
  }
  function delayConstant(id3, value12) {
    return value12 = +value12, function() {
      init(this, id3).delay = value12;
    };
  }
  function delay_default(value12) {
    var id3 = this._id;
    return arguments.length ? this.each((typeof value12 === "function" ? delayFunction : delayConstant)(id3, value12)) : get2(this.node(), id3).delay;
  }

  // node_modules/d3-transition/src/transition/duration.js
  function durationFunction(id3, value12) {
    return function() {
      set2(this, id3).duration = +value12.apply(this, arguments);
    };
  }
  function durationConstant(id3, value12) {
    return value12 = +value12, function() {
      set2(this, id3).duration = value12;
    };
  }
  function duration_default(value12) {
    var id3 = this._id;
    return arguments.length ? this.each((typeof value12 === "function" ? durationFunction : durationConstant)(id3, value12)) : get2(this.node(), id3).duration;
  }

  // node_modules/d3-transition/src/transition/ease.js
  function easeConstant(id3, value12) {
    if (typeof value12 !== "function")
      throw new Error();
    return function() {
      set2(this, id3).ease = value12;
    };
  }
  function ease_default(value12) {
    var id3 = this._id;
    return arguments.length ? this.each(easeConstant(id3, value12)) : get2(this.node(), id3).ease;
  }

  // node_modules/d3-transition/src/transition/easeVarying.js
  function easeVarying(id3, value12) {
    return function() {
      var v = value12.apply(this, arguments);
      if (typeof v !== "function")
        throw new Error();
      set2(this, id3).ease = v;
    };
  }
  function easeVarying_default(value12) {
    if (typeof value12 !== "function")
      throw new Error();
    return this.each(easeVarying(this._id, value12));
  }

  // node_modules/d3-transition/src/transition/filter.js
  function filter_default2(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups2 = this._groups, m = groups2.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group3 = groups2[j], n = group3.length, subgroup = subgroups[j] = [], node, i2 = 0; i2 < n; ++i2) {
        if ((node = group3[i2]) && match.call(node, node.__data__, i2, group3)) {
          subgroup.push(node);
        }
      }
    }
    return new Transition(subgroups, this._parents, this._name, this._id);
  }

  // node_modules/d3-transition/src/transition/merge.js
  function merge_default2(transition2) {
    if (transition2._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i2 = 0; i2 < n; ++i2) {
        if (node = group0[i2] || group1[i2]) {
          merge[i2] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Transition(merges, this._parents, this._name, this._id);
  }

  // node_modules/d3-transition/src/transition/on.js
  function start(name15) {
    return (name15 + "").trim().split(/^|\s+/).every(function(t) {
      var i2 = t.indexOf(".");
      if (i2 >= 0)
        t = t.slice(0, i2);
      return !t || t === "start";
    });
  }
  function onFunction(id3, name15, listener) {
    var on0, on1, sit = start(name15) ? init : set2;
    return function() {
      var schedule = sit(this, id3), on2 = schedule.on;
      if (on2 !== on0)
        (on1 = (on0 = on2).copy()).on(name15, listener);
      schedule.on = on1;
    };
  }
  function on_default2(name15, listener) {
    var id3 = this._id;
    return arguments.length < 2 ? get2(this.node(), id3).on.on(name15) : this.each(onFunction(id3, name15, listener));
  }

  // node_modules/d3-transition/src/transition/remove.js
  function removeFunction(id3) {
    return function() {
      var parent2 = this.parentNode;
      for (var i2 in this.__transition)
        if (+i2 !== id3)
          return;
      if (parent2)
        parent2.removeChild(this);
    };
  }
  function remove_default2() {
    return this.on("end.remove", removeFunction(this._id));
  }

  // node_modules/d3-transition/src/transition/select.js
  function select_default3(select4) {
    var name15 = this._name, id3 = this._id;
    if (typeof select4 !== "function")
      select4 = selector_default(select4);
    for (var groups2 = this._groups, m = groups2.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group3 = groups2[j], n = group3.length, subgroup = subgroups[j] = new Array(n), node, subnode, i2 = 0; i2 < n; ++i2) {
        if ((node = group3[i2]) && (subnode = select4.call(node, node.__data__, i2, group3))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i2] = subnode;
          schedule_default(subgroup[i2], name15, id3, i2, subgroup, get2(node, id3));
        }
      }
    }
    return new Transition(subgroups, this._parents, name15, id3);
  }

  // node_modules/d3-transition/src/transition/selectAll.js
  function selectAll_default2(select4) {
    var name15 = this._name, id3 = this._id;
    if (typeof select4 !== "function")
      select4 = selectorAll_default(select4);
    for (var groups2 = this._groups, m = groups2.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group3 = groups2[j], n = group3.length, node, i2 = 0; i2 < n; ++i2) {
        if (node = group3[i2]) {
          for (var children3 = select4.call(node, node.__data__, i2, group3), child, inherit3 = get2(node, id3), k2 = 0, l = children3.length; k2 < l; ++k2) {
            if (child = children3[k2]) {
              schedule_default(child, name15, id3, k2, children3, inherit3);
            }
          }
          subgroups.push(children3);
          parents.push(node);
        }
      }
    }
    return new Transition(subgroups, parents, name15, id3);
  }

  // node_modules/d3-transition/src/transition/selection.js
  var Selection2 = selection_default.prototype.constructor;
  function selection_default2() {
    return new Selection2(this._groups, this._parents);
  }

  // node_modules/d3-transition/src/transition/style.js
  function styleNull(name15, interpolate) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name15), string1 = (this.style.removeProperty(name15), styleValue(this, name15));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }
  function styleRemove2(name15) {
    return function() {
      this.style.removeProperty(name15);
    };
  }
  function styleConstant2(name15, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue(this, name15);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function styleFunction2(name15, interpolate, value12) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name15), value1 = value12(this), string1 = value1 + "";
      if (value1 == null)
        string1 = value1 = (this.style.removeProperty(name15), styleValue(this, name15));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function styleMaybeRemove(id3, name15) {
    var on0, on1, listener0, key = "style." + name15, event = "end." + key, remove2;
    return function() {
      var schedule = set2(this, id3), on2 = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name15)) : void 0;
      if (on2 !== on0 || listener0 !== listener)
        (on1 = (on0 = on2).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }
  function style_default2(name15, value12, priority) {
    var i2 = (name15 += "") === "transform" ? interpolateTransformCss : interpolate_default;
    return value12 == null ? this.styleTween(name15, styleNull(name15, i2)).on("end.style." + name15, styleRemove2(name15)) : typeof value12 === "function" ? this.styleTween(name15, styleFunction2(name15, i2, tweenValue(this, "style." + name15, value12))).each(styleMaybeRemove(this._id, name15)) : this.styleTween(name15, styleConstant2(name15, i2, value12), priority).on("end.style." + name15, null);
  }

  // node_modules/d3-transition/src/transition/styleTween.js
  function styleInterpolate(name15, i2, priority) {
    return function(t) {
      this.style.setProperty(name15, i2.call(this, t), priority);
    };
  }
  function styleTween(name15, value12, priority) {
    var t, i0;
    function tween() {
      var i2 = value12.apply(this, arguments);
      if (i2 !== i0)
        t = (i0 = i2) && styleInterpolate(name15, i2, priority);
      return t;
    }
    tween._value = value12;
    return tween;
  }
  function styleTween_default(name15, value12, priority) {
    var key = "style." + (name15 += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value12 == null)
      return this.tween(key, null);
    if (typeof value12 !== "function")
      throw new Error();
    return this.tween(key, styleTween(name15, value12, priority == null ? "" : priority));
  }

  // node_modules/d3-transition/src/transition/text.js
  function textConstant2(value12) {
    return function() {
      this.textContent = value12;
    };
  }
  function textFunction2(value12) {
    return function() {
      var value1 = value12(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }
  function text_default2(value12) {
    return this.tween("text", typeof value12 === "function" ? textFunction2(tweenValue(this, "text", value12)) : textConstant2(value12 == null ? "" : value12 + ""));
  }

  // node_modules/d3-transition/src/transition/textTween.js
  function textInterpolate(i2) {
    return function(t) {
      this.textContent = i2.call(this, t);
    };
  }
  function textTween(value12) {
    var t03, i0;
    function tween() {
      var i2 = value12.apply(this, arguments);
      if (i2 !== i0)
        t03 = (i0 = i2) && textInterpolate(i2);
      return t03;
    }
    tween._value = value12;
    return tween;
  }
  function textTween_default(value12) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value12 == null)
      return this.tween(key, null);
    if (typeof value12 !== "function")
      throw new Error();
    return this.tween(key, textTween(value12));
  }

  // node_modules/d3-transition/src/transition/transition.js
  function transition_default() {
    var name15 = this._name, id0 = this._id, id1 = newId();
    for (var groups2 = this._groups, m = groups2.length, j = 0; j < m; ++j) {
      for (var group3 = groups2[j], n = group3.length, node, i2 = 0; i2 < n; ++i2) {
        if (node = group3[i2]) {
          var inherit3 = get2(node, id0);
          schedule_default(node, name15, id1, i2, group3, {
            time: inherit3.time + inherit3.delay + inherit3.duration,
            delay: 0,
            duration: inherit3.duration,
            ease: inherit3.ease
          });
        }
      }
    }
    return new Transition(groups2, this._parents, name15, id1);
  }

  // node_modules/d3-transition/src/transition/end.js
  function end_default() {
    var on0, on1, that = this, id3 = that._id, size5 = that.size();
    return new Promise(function(resolve, reject) {
      var cancel = { value: reject }, end = { value: function() {
        if (--size5 === 0)
          resolve();
      } };
      that.each(function() {
        var schedule = set2(this, id3), on2 = schedule.on;
        if (on2 !== on0) {
          on1 = (on0 = on2).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end);
        }
        schedule.on = on1;
      });
      if (size5 === 0)
        resolve();
    });
  }

  // node_modules/d3-transition/src/transition/index.js
  var id = 0;
  function Transition(groups2, parents, name15, id3) {
    this._groups = groups2;
    this._parents = parents;
    this._name = name15;
    this._id = id3;
  }
  function transition(name15) {
    return selection_default().transition(name15);
  }
  function newId() {
    return ++id;
  }
  var selection_prototype = selection_default.prototype;
  Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: select_default3,
    selectAll: selectAll_default2,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: filter_default2,
    merge: merge_default2,
    selection: selection_default2,
    transition: transition_default,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: on_default2,
    attr: attr_default2,
    attrTween: attrTween_default,
    style: style_default2,
    styleTween: styleTween_default,
    text: text_default2,
    textTween: textTween_default,
    remove: remove_default2,
    tween: tween_default,
    delay: delay_default,
    duration: duration_default,
    ease: ease_default,
    easeVarying: easeVarying_default,
    end: end_default,
    [Symbol.iterator]: selection_prototype[Symbol.iterator]
  };

  // node_modules/d3-ease/src/cubic.js
  function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }

  // node_modules/d3-transition/src/selection/transition.js
  var defaultTiming = {
    time: null,
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };
  function inherit(node, id3) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id3])) {
      if (!(node = node.parentNode)) {
        throw new Error(`transition ${id3} not found`);
      }
    }
    return timing;
  }
  function transition_default2(name15) {
    var id3, timing;
    if (name15 instanceof Transition) {
      id3 = name15._id, name15 = name15._name;
    } else {
      id3 = newId(), (timing = defaultTiming).time = now(), name15 = name15 == null ? null : name15 + "";
    }
    for (var groups2 = this._groups, m = groups2.length, j = 0; j < m; ++j) {
      for (var group3 = groups2[j], n = group3.length, node, i2 = 0; i2 < n; ++i2) {
        if (node = group3[i2]) {
          schedule_default(node, name15, id3, i2, group3, timing || inherit(node, id3));
        }
      }
    }
    return new Transition(groups2, this._parents, name15, id3);
  }

  // node_modules/d3-transition/src/selection/index.js
  selection_default.prototype.interrupt = interrupt_default2;
  selection_default.prototype.transition = transition_default2;

  // node_modules/d3-brush/src/brush.js
  var { abs: abs2, max: max4, min: min4 } = Math;
  function number1(e) {
    return [+e[0], +e[1]];
  }
  function number22(e) {
    return [number1(e[0]), number1(e[1])];
  }
  var X = {
    name: "x",
    handles: ["w", "e"].map(type),
    input: function(x2, e) {
      return x2 == null ? null : [[+x2[0], e[0][1]], [+x2[1], e[1][1]]];
    },
    output: function(xy) {
      return xy && [xy[0][0], xy[1][0]];
    }
  };
  var Y = {
    name: "y",
    handles: ["n", "s"].map(type),
    input: function(y2, e) {
      return y2 == null ? null : [[e[0][0], +y2[0]], [e[1][0], +y2[1]]];
    },
    output: function(xy) {
      return xy && [xy[0][1], xy[1][1]];
    }
  };
  var XY = {
    name: "xy",
    handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
    input: function(xy) {
      return xy == null ? null : number22(xy);
    },
    output: function(xy) {
      return xy;
    }
  };
  function type(t) {
    return { type: t };
  }

  // node_modules/d3-path/src/path.js
  var pi = Math.PI;
  var tau = 2 * pi;
  var epsilon2 = 1e-6;
  var tauEpsilon = tau - epsilon2;
  function Path() {
    this._x0 = this._y0 = this._x1 = this._y1 = null;
    this._ = "";
  }
  function path() {
    return new Path();
  }
  Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function(x2, y2) {
      this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y2);
    },
    closePath: function() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._ += "Z";
      }
    },
    lineTo: function(x2, y2) {
      this._ += "L" + (this._x1 = +x2) + "," + (this._y1 = +y2);
    },
    quadraticCurveTo: function(x1, y1, x2, y2) {
      this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x2) + "," + (this._y1 = +y2);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
      this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
    },
    arcTo: function(x1, y1, x2, y2, r2) {
      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r2 = +r2;
      var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
      if (r2 < 0)
        throw new Error("negative radius: " + r2);
      if (this._x1 === null) {
        this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
      } else if (!(l01_2 > epsilon2))
        ;
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon2) || !r2) {
        this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
      } else {
        var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r2 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
        if (Math.abs(t01 - 1) > epsilon2) {
          this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
        }
        this._ += "A" + r2 + "," + r2 + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
      }
    },
    arc: function(x2, y2, r2, a0, a1, ccw) {
      x2 = +x2, y2 = +y2, r2 = +r2, ccw = !!ccw;
      var dx = r2 * Math.cos(a0), dy = r2 * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
      if (r2 < 0)
        throw new Error("negative radius: " + r2);
      if (this._x1 === null) {
        this._ += "M" + x0 + "," + y0;
      } else if (Math.abs(this._x1 - x0) > epsilon2 || Math.abs(this._y1 - y0) > epsilon2) {
        this._ += "L" + x0 + "," + y0;
      }
      if (!r2)
        return;
      if (da < 0)
        da = da % tau + tau;
      if (da > tauEpsilon) {
        this._ += "A" + r2 + "," + r2 + ",0,1," + cw + "," + (x2 - dx) + "," + (y2 - dy) + "A" + r2 + "," + r2 + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
      } else if (da > epsilon2) {
        this._ += "A" + r2 + "," + r2 + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x2 + r2 * Math.cos(a1)) + "," + (this._y1 = y2 + r2 * Math.sin(a1));
      }
    },
    rect: function(x2, y2, w, h) {
      this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y2) + "h" + +w + "v" + +h + "h" + -w + "Z";
    },
    toString: function() {
      return this._;
    }
  };
  var path_default = path;

  // node_modules/d3-format/src/formatDecimal.js
  function formatDecimal_default(x2) {
    return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
  }
  function formatDecimalParts(x2, p2) {
    if ((i2 = (x2 = p2 ? x2.toExponential(p2 - 1) : x2.toExponential()).indexOf("e")) < 0)
      return null;
    var i2, coefficient = x2.slice(0, i2);
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x2.slice(i2 + 1)
    ];
  }

  // node_modules/d3-format/src/exponent.js
  function exponent_default(x2) {
    return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
  }

  // node_modules/d3-format/src/formatGroup.js
  function formatGroup_default(grouping, thousands) {
    return function(value12, width8) {
      var i2 = value12.length, t = [], j = 0, g = grouping[0], length8 = 0;
      while (i2 > 0 && g > 0) {
        if (length8 + g + 1 > width8)
          g = Math.max(1, width8 - length8);
        t.push(value12.substring(i2 -= g, i2 + g));
        if ((length8 += g + 1) > width8)
          break;
        g = grouping[j = (j + 1) % grouping.length];
      }
      return t.reverse().join(thousands);
    };
  }

  // node_modules/d3-format/src/formatNumerals.js
  function formatNumerals_default(numerals) {
    return function(value12) {
      return value12.replace(/[0-9]/g, function(i2) {
        return numerals[+i2];
      });
    };
  }

  // node_modules/d3-format/src/formatSpecifier.js
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier)))
      throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };

  // node_modules/d3-format/src/formatTrim.js
  function formatTrim_default(s3) {
    out:
      for (var n = s3.length, i2 = 1, i0 = -1, i1; i2 < n; ++i2) {
        switch (s3[i2]) {
          case ".":
            i0 = i1 = i2;
            break;
          case "0":
            if (i0 === 0)
              i0 = i2;
            i1 = i2;
            break;
          default:
            if (!+s3[i2])
              break out;
            if (i0 > 0)
              i0 = 0;
            break;
        }
      }
    return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
  }

  // node_modules/d3-format/src/formatPrefixAuto.js
  var prefixExponent;
  function formatPrefixAuto_default(x2, p2) {
    var d = formatDecimalParts(x2, p2);
    if (!d)
      return x2 + "";
    var coefficient = d[0], exponent = d[1], i2 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i2 === n ? coefficient : i2 > n ? coefficient + new Array(i2 - n + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x2, Math.max(0, p2 + i2 - 1))[0];
  }

  // node_modules/d3-format/src/formatRounded.js
  function formatRounded_default(x2, p2) {
    var d = formatDecimalParts(x2, p2);
    if (!d)
      return x2 + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  // node_modules/d3-format/src/formatTypes.js
  var formatTypes_default = {
    "%": (x2, p2) => (x2 * 100).toFixed(p2),
    "b": (x2) => Math.round(x2).toString(2),
    "c": (x2) => x2 + "",
    "d": formatDecimal_default,
    "e": (x2, p2) => x2.toExponential(p2),
    "f": (x2, p2) => x2.toFixed(p2),
    "g": (x2, p2) => x2.toPrecision(p2),
    "o": (x2) => Math.round(x2).toString(8),
    "p": (x2, p2) => formatRounded_default(x2 * 100, p2),
    "r": formatRounded_default,
    "s": formatPrefixAuto_default,
    "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
    "x": (x2) => Math.round(x2).toString(16)
  };

  // node_modules/d3-format/src/identity.js
  function identity_default2(x2) {
    return x2;
  }

  // node_modules/d3-format/src/locale.js
  var map5 = Array.prototype.map;
  var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function locale_default(locale3) {
    var group3 = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default2 : formatGroup_default(map5.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default2 : formatNumerals_default(map5.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "\u2212" : locale3.minus + "", nan2 = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill, align = specifier.align, sign3 = specifier.sign, symbol2 = specifier.symbol, zero4 = specifier.zero, width8 = specifier.width, comma = specifier.comma, precision = specifier.precision, trim2 = specifier.trim, type2 = specifier.type;
      if (type2 === "n")
        comma = true, type2 = "g";
      else if (!formatTypes_default[type2])
        precision === void 0 && (precision = 12), trim2 = true, type2 = "g";
      if (zero4 || fill === "0" && align === "=")
        zero4 = true, fill = "0", align = "=";
      var prefix = symbol2 === "$" ? currencyPrefix : symbol2 === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol2 === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
      var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
      precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format4(value12) {
        var valuePrefix = prefix, valueSuffix = suffix, i2, n, c4;
        if (type2 === "c") {
          valueSuffix = formatType(value12) + valueSuffix;
          value12 = "";
        } else {
          value12 = +value12;
          var valueNegative = value12 < 0 || 1 / value12 < 0;
          value12 = isNaN(value12) ? nan2 : formatType(Math.abs(value12), precision);
          if (trim2)
            value12 = formatTrim_default(value12);
          if (valueNegative && +value12 === 0 && sign3 !== "+")
            valueNegative = false;
          valuePrefix = (valueNegative ? sign3 === "(" ? sign3 : minus : sign3 === "-" || sign3 === "(" ? "" : sign3) + valuePrefix;
          valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign3 === "(" ? ")" : "");
          if (maybeSuffix) {
            i2 = -1, n = value12.length;
            while (++i2 < n) {
              if (c4 = value12.charCodeAt(i2), 48 > c4 || c4 > 57) {
                valueSuffix = (c4 === 46 ? decimal + value12.slice(i2 + 1) : value12.slice(i2)) + valueSuffix;
                value12 = value12.slice(0, i2);
                break;
              }
            }
          }
        }
        if (comma && !zero4)
          value12 = group3(value12, Infinity);
        var length8 = valuePrefix.length + value12.length + valueSuffix.length, padding = length8 < width8 ? new Array(width8 - length8 + 1).join(fill) : "";
        if (comma && zero4)
          value12 = group3(padding + value12, padding.length ? width8 - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value12 = valuePrefix + value12 + valueSuffix + padding;
            break;
          case "=":
            value12 = valuePrefix + padding + value12 + valueSuffix;
            break;
          case "^":
            value12 = padding.slice(0, length8 = padding.length >> 1) + valuePrefix + value12 + valueSuffix + padding.slice(length8);
            break;
          default:
            value12 = padding + valuePrefix + value12 + valueSuffix;
            break;
        }
        return numerals(value12);
      }
      format4.toString = function() {
        return specifier + "";
      };
      return format4;
    }
    function formatPrefix2(specifier, value12) {
      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value12) / 3))) * 3, k2 = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
      return function(value13) {
        return f(k2 * value13) + prefix;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }

  // node_modules/d3-format/src/defaultLocale.js
  var locale;
  var format2;
  var formatPrefix;
  defaultLocale({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale(definition) {
    locale = locale_default(definition);
    format2 = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
  }

  // node_modules/d3-format/src/precisionFixed.js
  function precisionFixed_default(step3) {
    return Math.max(0, -exponent_default(Math.abs(step3)));
  }

  // node_modules/d3-format/src/precisionPrefix.js
  function precisionPrefix_default(step3, value12) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value12) / 3))) * 3 - exponent_default(Math.abs(step3)));
  }

  // node_modules/d3-format/src/precisionRound.js
  function precisionRound_default(step3, max8) {
    step3 = Math.abs(step3), max8 = Math.abs(max8) - step3;
    return Math.max(0, exponent_default(max8) - exponent_default(step3)) + 1;
  }

  // node_modules/d3-scale/src/init.js
  function initRange(domain, range5) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range5).domain(domain);
        break;
    }
    return this;
  }
  function initInterpolator(domain, interpolator) {
    switch (arguments.length) {
      case 0:
        break;
      case 1: {
        if (typeof domain === "function")
          this.interpolator(domain);
        else
          this.range(domain);
        break;
      }
      default: {
        this.domain(domain);
        if (typeof interpolator === "function")
          this.interpolator(interpolator);
        else
          this.range(interpolator);
        break;
      }
    }
    return this;
  }

  // node_modules/d3-scale/src/ordinal.js
  var implicit = Symbol("implicit");
  function ordinal() {
    var index5 = new InternMap(), domain = [], range5 = [], unknown = implicit;
    function scale(d) {
      let i2 = index5.get(d);
      if (i2 === void 0) {
        if (unknown !== implicit)
          return unknown;
        index5.set(d, i2 = domain.push(d) - 1);
      }
      return range5[i2 % range5.length];
    }
    scale.domain = function(_) {
      if (!arguments.length)
        return domain.slice();
      domain = [], index5 = new InternMap();
      for (const value12 of _) {
        if (index5.has(value12))
          continue;
        index5.set(value12, domain.push(value12) - 1);
      }
      return scale;
    };
    scale.range = function(_) {
      return arguments.length ? (range5 = Array.from(_), scale) : range5.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return ordinal(domain, range5).unknown(unknown);
    };
    initRange.apply(scale, arguments);
    return scale;
  }

  // node_modules/d3-scale/src/band.js
  function band() {
    var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange2 = scale.range, r0 = 0, r1 = 1, step3, bandwidth, round2 = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
      var n = domain().length, reverse4 = r1 < r0, start3 = reverse4 ? r1 : r0, stop = reverse4 ? r0 : r1;
      step3 = (stop - start3) / Math.max(1, n - paddingInner + paddingOuter * 2);
      if (round2)
        step3 = Math.floor(step3);
      start3 += (stop - start3 - step3 * (n - paddingInner)) * align;
      bandwidth = step3 * (1 - paddingInner);
      if (round2)
        start3 = Math.round(start3), bandwidth = Math.round(bandwidth);
      var values3 = range3(n).map(function(i2) {
        return start3 + step3 * i2;
      });
      return ordinalRange2(reverse4 ? values3.reverse() : values3);
    }
    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.range = function(_) {
      return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
    };
    scale.rangeRound = function(_) {
      return [r0, r1] = _, r0 = +r0, r1 = +r1, round2 = true, rescale();
    };
    scale.bandwidth = function() {
      return bandwidth;
    };
    scale.step = function() {
      return step3;
    };
    scale.round = function(_) {
      return arguments.length ? (round2 = !!_, rescale()) : round2;
    };
    scale.padding = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
    };
    scale.paddingInner = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
    };
    scale.paddingOuter = function(_) {
      return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
    };
    scale.align = function(_) {
      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };
    scale.copy = function() {
      return band(domain(), [r0, r1]).round(round2).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return initRange.apply(rescale(), arguments);
  }
  function pointish(scale) {
    var copy3 = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function() {
      return pointish(copy3());
    };
    return scale;
  }
  function point() {
    return pointish(band.apply(null, arguments).paddingInner(1));
  }

  // node_modules/d3-scale/src/constant.js
  function constants(x2) {
    return function() {
      return x2;
    };
  }

  // node_modules/d3-scale/src/number.js
  function number3(x2) {
    return +x2;
  }

  // node_modules/d3-scale/src/continuous.js
  var unit2 = [0, 1];
  function identity9(x2) {
    return x2;
  }
  function normalize(a3, b2) {
    return (b2 -= a3 = +a3) ? function(x2) {
      return (x2 - a3) / b2;
    } : constants(isNaN(b2) ? NaN : 0.5);
  }
  function clamper(a3, b2) {
    var t;
    if (a3 > b2)
      t = a3, a3 = b2, b2 = t;
    return function(x2) {
      return Math.max(a3, Math.min(b2, x2));
    };
  }
  function bimap2(domain, range5, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range5[0], r1 = range5[1];
    if (d1 < d0)
      d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
    else
      d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
    return function(x2) {
      return r0(d0(x2));
    };
  }
  function polymap(domain, range5, interpolate) {
    var j = Math.min(domain.length, range5.length) - 1, d = new Array(j), r2 = new Array(j), i2 = -1;
    if (domain[j] < domain[0]) {
      domain = domain.slice().reverse();
      range5 = range5.slice().reverse();
    }
    while (++i2 < j) {
      d[i2] = normalize(domain[i2], domain[i2 + 1]);
      r2[i2] = interpolate(range5[i2], range5[i2 + 1]);
    }
    return function(x2) {
      var i3 = bisect_default(domain, x2, 1, j) - 1;
      return r2[i3](d[i3](x2));
    };
  }
  function copy(source3, target5) {
    return target5.domain(source3.domain()).range(source3.range()).interpolate(source3.interpolate()).clamp(source3.clamp()).unknown(source3.unknown());
  }
  function transformer() {
    var domain = unit2, range5 = unit2, interpolate = value_default, transform2, untransform, unknown, clamp = identity9, piecewise2, output2, input3;
    function rescale() {
      var n = Math.min(domain.length, range5.length);
      if (clamp !== identity9)
        clamp = clamper(domain[0], domain[n - 1]);
      piecewise2 = n > 2 ? polymap : bimap2;
      output2 = input3 = null;
      return scale;
    }
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : (output2 || (output2 = piecewise2(domain.map(transform2), range5, interpolate)))(transform2(clamp(x2)));
    }
    scale.invert = function(y2) {
      return clamp(untransform((input3 || (input3 = piecewise2(range5, domain.map(transform2), number_default)))(y2)));
    };
    scale.domain = function(_) {
      return arguments.length ? (domain = Array.from(_, number3), rescale()) : domain.slice();
    };
    scale.range = function(_) {
      return arguments.length ? (range5 = Array.from(_), rescale()) : range5.slice();
    };
    scale.rangeRound = function(_) {
      return range5 = Array.from(_), interpolate = round_default, rescale();
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp = _ ? true : identity9, rescale()) : clamp !== identity9;
    };
    scale.interpolate = function(_) {
      return arguments.length ? (interpolate = _, rescale()) : interpolate;
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t, u2) {
      transform2 = t, untransform = u2;
      return rescale();
    };
  }
  function continuous() {
    return transformer()(identity9, identity9);
  }

  // node_modules/d3-scale/src/tickFormat.js
  function tickFormat(start3, stop, count2, specifier) {
    var step3 = tickStep(start3, stop, count2), precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value12 = Math.max(Math.abs(start3), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step3, value12)))
          specifier.precision = precision;
        return formatPrefix(specifier, value12);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound_default(step3, Math.max(Math.abs(start3), Math.abs(stop)))))
          specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step3)))
          specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return format2(specifier);
  }

  // node_modules/d3-scale/src/linear.js
  function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function(count2) {
      var d = domain();
      return ticks(d[0], d[d.length - 1], count2 == null ? 10 : count2);
    };
    scale.tickFormat = function(count2, specifier) {
      var d = domain();
      return tickFormat(d[0], d[d.length - 1], count2 == null ? 10 : count2, specifier);
    };
    scale.nice = function(count2) {
      if (count2 == null)
        count2 = 10;
      var d = domain();
      var i0 = 0;
      var i1 = d.length - 1;
      var start3 = d[i0];
      var stop = d[i1];
      var prestep;
      var step3;
      var maxIter = 10;
      if (stop < start3) {
        step3 = start3, start3 = stop, stop = step3;
        step3 = i0, i0 = i1, i1 = step3;
      }
      while (maxIter-- > 0) {
        step3 = tickIncrement(start3, stop, count2);
        if (step3 === prestep) {
          d[i0] = start3;
          d[i1] = stop;
          return domain(d);
        } else if (step3 > 0) {
          start3 = Math.floor(start3 / step3) * step3;
          stop = Math.ceil(stop / step3) * step3;
        } else if (step3 < 0) {
          start3 = Math.ceil(start3 * step3) / step3;
          stop = Math.floor(stop * step3) / step3;
        } else {
          break;
        }
        prestep = step3;
      }
      return scale;
    };
    return scale;
  }
  function linear2() {
    var scale = continuous();
    scale.copy = function() {
      return copy(scale, linear2());
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }

  // node_modules/d3-scale/src/identity.js
  function identity10(domain) {
    var unknown;
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : x2;
    }
    scale.invert = scale;
    scale.domain = scale.range = function(_) {
      return arguments.length ? (domain = Array.from(_, number3), scale) : domain.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return identity10(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, number3) : [0, 1];
    return linearish(scale);
  }

  // node_modules/d3-scale/src/nice.js
  function nice2(domain, interval2) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
      t = i0, i0 = i1, i1 = t;
      t = x0, x0 = x1, x1 = t;
    }
    domain[i0] = interval2.floor(x0);
    domain[i1] = interval2.ceil(x1);
    return domain;
  }

  // node_modules/d3-scale/src/log.js
  function transformLog(x2) {
    return Math.log(x2);
  }
  function transformExp(x2) {
    return Math.exp(x2);
  }
  function transformLogn(x2) {
    return -Math.log(-x2);
  }
  function transformExpn(x2) {
    return -Math.exp(-x2);
  }
  function pow10(x2) {
    return isFinite(x2) ? +("1e" + x2) : x2 < 0 ? 0 : x2;
  }
  function powp(base2) {
    return base2 === 10 ? pow10 : base2 === Math.E ? Math.exp : (x2) => Math.pow(base2, x2);
  }
  function logp(base2) {
    return base2 === Math.E ? Math.log : base2 === 10 && Math.log10 || base2 === 2 && Math.log2 || (base2 = Math.log(base2), (x2) => Math.log(x2) / base2);
  }
  function reflect(f) {
    return (x2, k2) => -f(-x2, k2);
  }
  function loggish(transform2) {
    const scale = transform2(transformLog, transformExp);
    const domain = scale.domain;
    let base2 = 10;
    let logs;
    let pows;
    function rescale() {
      logs = logp(base2), pows = powp(base2);
      if (domain()[0] < 0) {
        logs = reflect(logs), pows = reflect(pows);
        transform2(transformLogn, transformExpn);
      } else {
        transform2(transformLog, transformExp);
      }
      return scale;
    }
    scale.base = function(_) {
      return arguments.length ? (base2 = +_, rescale()) : base2;
    };
    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = (count2) => {
      const d = domain();
      let u2 = d[0];
      let v = d[d.length - 1];
      const r2 = v < u2;
      if (r2)
        [u2, v] = [v, u2];
      let i2 = logs(u2);
      let j = logs(v);
      let k2;
      let t;
      const n = count2 == null ? 10 : +count2;
      let z = [];
      if (!(base2 % 1) && j - i2 < n) {
        i2 = Math.floor(i2), j = Math.ceil(j);
        if (u2 > 0)
          for (; i2 <= j; ++i2) {
            for (k2 = 1; k2 < base2; ++k2) {
              t = i2 < 0 ? k2 / pows(-i2) : k2 * pows(i2);
              if (t < u2)
                continue;
              if (t > v)
                break;
              z.push(t);
            }
          }
        else
          for (; i2 <= j; ++i2) {
            for (k2 = base2 - 1; k2 >= 1; --k2) {
              t = i2 > 0 ? k2 / pows(-i2) : k2 * pows(i2);
              if (t < u2)
                continue;
              if (t > v)
                break;
              z.push(t);
            }
          }
        if (z.length * 2 < n)
          z = ticks(u2, v, n);
      } else {
        z = ticks(i2, j, Math.min(j - i2, n)).map(pows);
      }
      return r2 ? z.reverse() : z;
    };
    scale.tickFormat = (count2, specifier) => {
      if (count2 == null)
        count2 = 10;
      if (specifier == null)
        specifier = base2 === 10 ? "s" : ",";
      if (typeof specifier !== "function") {
        if (!(base2 % 1) && (specifier = formatSpecifier(specifier)).precision == null)
          specifier.trim = true;
        specifier = format2(specifier);
      }
      if (count2 === Infinity)
        return specifier;
      const k2 = Math.max(1, base2 * count2 / scale.ticks().length);
      return (d) => {
        let i2 = d / pows(Math.round(logs(d)));
        if (i2 * base2 < base2 - 0.5)
          i2 *= base2;
        return i2 <= k2 ? specifier(d) : "";
      };
    };
    scale.nice = () => {
      return domain(nice2(domain(), {
        floor: (x2) => pows(Math.floor(logs(x2))),
        ceil: (x2) => pows(Math.ceil(logs(x2)))
      }));
    };
    return scale;
  }
  function log2() {
    const scale = loggish(transformer()).domain([1, 10]);
    scale.copy = () => copy(scale, log2()).base(scale.base());
    initRange.apply(scale, arguments);
    return scale;
  }

  // node_modules/d3-scale/src/symlog.js
  function transformSymlog(c4) {
    return function(x2) {
      return Math.sign(x2) * Math.log1p(Math.abs(x2 / c4));
    };
  }
  function transformSymexp(c4) {
    return function(x2) {
      return Math.sign(x2) * Math.expm1(Math.abs(x2)) * c4;
    };
  }
  function symlogish(transform2) {
    var c4 = 1, scale = transform2(transformSymlog(c4), transformSymexp(c4));
    scale.constant = function(_) {
      return arguments.length ? transform2(transformSymlog(c4 = +_), transformSymexp(c4)) : c4;
    };
    return linearish(scale);
  }
  function symlog() {
    var scale = symlogish(transformer());
    scale.copy = function() {
      return copy(scale, symlog()).constant(scale.constant());
    };
    return initRange.apply(scale, arguments);
  }

  // node_modules/d3-scale/src/pow.js
  function transformPow(exponent) {
    return function(x2) {
      return x2 < 0 ? -Math.pow(-x2, exponent) : Math.pow(x2, exponent);
    };
  }
  function transformSqrt(x2) {
    return x2 < 0 ? -Math.sqrt(-x2) : Math.sqrt(x2);
  }
  function transformSquare(x2) {
    return x2 < 0 ? -x2 * x2 : x2 * x2;
  }
  function powish(transform2) {
    var scale = transform2(identity9, identity9), exponent = 1;
    function rescale() {
      return exponent === 1 ? transform2(identity9, identity9) : exponent === 0.5 ? transform2(transformSqrt, transformSquare) : transform2(transformPow(exponent), transformPow(1 / exponent));
    }
    scale.exponent = function(_) {
      return arguments.length ? (exponent = +_, rescale()) : exponent;
    };
    return linearish(scale);
  }
  function pow3() {
    var scale = powish(transformer());
    scale.copy = function() {
      return copy(scale, pow3()).exponent(scale.exponent());
    };
    initRange.apply(scale, arguments);
    return scale;
  }

  // node_modules/d3-scale/src/quantile.js
  function quantile2() {
    var domain = [], range5 = [], thresholds = [], unknown;
    function rescale() {
      var i2 = 0, n = Math.max(1, range5.length);
      thresholds = new Array(n - 1);
      while (++i2 < n)
        thresholds[i2 - 1] = quantileSorted(domain, i2 / n);
      return scale;
    }
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : range5[bisect_default(thresholds, x2)];
    }
    scale.invertExtent = function(y2) {
      var i2 = range5.indexOf(y2);
      return i2 < 0 ? [NaN, NaN] : [
        i2 > 0 ? thresholds[i2 - 1] : domain[0],
        i2 < thresholds.length ? thresholds[i2] : domain[domain.length - 1]
      ];
    };
    scale.domain = function(_) {
      if (!arguments.length)
        return domain.slice();
      domain = [];
      for (let d of _)
        if (d != null && !isNaN(d = +d))
          domain.push(d);
      domain.sort(ascending);
      return rescale();
    };
    scale.range = function(_) {
      return arguments.length ? (range5 = Array.from(_), rescale()) : range5.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.quantiles = function() {
      return thresholds.slice();
    };
    scale.copy = function() {
      return quantile2().domain(domain).range(range5).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }

  // node_modules/d3-scale/src/threshold.js
  function threshold() {
    var domain = [0.5], range5 = [0, 1], unknown, n = 1;
    function scale(x2) {
      return x2 != null && x2 <= x2 ? range5[bisect_default(domain, x2, 0, n)] : unknown;
    }
    scale.domain = function(_) {
      return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range5.length - 1), scale) : domain.slice();
    };
    scale.range = function(_) {
      return arguments.length ? (range5 = Array.from(_), n = Math.min(domain.length, range5.length - 1), scale) : range5.slice();
    };
    scale.invertExtent = function(y2) {
      var i2 = range5.indexOf(y2);
      return [domain[i2 - 1], domain[i2]];
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return threshold().domain(domain).range(range5).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }

  // node_modules/d3-time/src/interval.js
  var t02 = new Date();
  var t12 = new Date();
  function newInterval(floori, offseti, count2, field2) {
    function interval2(date3) {
      return floori(date3 = arguments.length === 0 ? new Date() : new Date(+date3)), date3;
    }
    interval2.floor = function(date3) {
      return floori(date3 = new Date(+date3)), date3;
    };
    interval2.ceil = function(date3) {
      return floori(date3 = new Date(date3 - 1)), offseti(date3, 1), floori(date3), date3;
    };
    interval2.round = function(date3) {
      var d0 = interval2(date3), d1 = interval2.ceil(date3);
      return date3 - d0 < d1 - date3 ? d0 : d1;
    };
    interval2.offset = function(date3, step3) {
      return offseti(date3 = new Date(+date3), step3 == null ? 1 : Math.floor(step3)), date3;
    };
    interval2.range = function(start3, stop, step3) {
      var range5 = [], previous;
      start3 = interval2.ceil(start3);
      step3 = step3 == null ? 1 : Math.floor(step3);
      if (!(start3 < stop) || !(step3 > 0))
        return range5;
      do
        range5.push(previous = new Date(+start3)), offseti(start3, step3), floori(start3);
      while (previous < start3 && start3 < stop);
      return range5;
    };
    interval2.filter = function(test2) {
      return newInterval(function(date3) {
        if (date3 >= date3)
          while (floori(date3), !test2(date3))
            date3.setTime(date3 - 1);
      }, function(date3, step3) {
        if (date3 >= date3) {
          if (step3 < 0)
            while (++step3 <= 0) {
              while (offseti(date3, -1), !test2(date3)) {
              }
            }
          else
            while (--step3 >= 0) {
              while (offseti(date3, 1), !test2(date3)) {
              }
            }
        }
      });
    };
    if (count2) {
      interval2.count = function(start3, end) {
        t02.setTime(+start3), t12.setTime(+end);
        floori(t02), floori(t12);
        return Math.floor(count2(t02, t12));
      };
      interval2.every = function(step3) {
        step3 = Math.floor(step3);
        return !isFinite(step3) || !(step3 > 0) ? null : !(step3 > 1) ? interval2 : interval2.filter(field2 ? function(d) {
          return field2(d) % step3 === 0;
        } : function(d) {
          return interval2.count(0, d) % step3 === 0;
        });
      };
    }
    return interval2;
  }

  // node_modules/d3-time/src/millisecond.js
  var millisecond = newInterval(function() {
  }, function(date3, step3) {
    date3.setTime(+date3 + step3);
  }, function(start3, end) {
    return end - start3;
  });
  millisecond.every = function(k2) {
    k2 = Math.floor(k2);
    if (!isFinite(k2) || !(k2 > 0))
      return null;
    if (!(k2 > 1))
      return millisecond;
    return newInterval(function(date3) {
      date3.setTime(Math.floor(date3 / k2) * k2);
    }, function(date3, step3) {
      date3.setTime(+date3 + step3 * k2);
    }, function(start3, end) {
      return (end - start3) / k2;
    });
  };
  var millisecond_default = millisecond;
  var milliseconds = millisecond.range;

  // node_modules/d3-time/src/duration.js
  var durationSecond = 1e3;
  var durationMinute = durationSecond * 60;
  var durationHour = durationMinute * 60;
  var durationDay = durationHour * 24;
  var durationWeek = durationDay * 7;
  var durationMonth = durationDay * 30;
  var durationYear = durationDay * 365;

  // node_modules/d3-time/src/second.js
  var second = newInterval(function(date3) {
    date3.setTime(date3 - date3.getMilliseconds());
  }, function(date3, step3) {
    date3.setTime(+date3 + step3 * durationSecond);
  }, function(start3, end) {
    return (end - start3) / durationSecond;
  }, function(date3) {
    return date3.getUTCSeconds();
  });
  var second_default = second;
  var seconds = second.range;

  // node_modules/d3-time/src/minute.js
  var minute = newInterval(function(date3) {
    date3.setTime(date3 - date3.getMilliseconds() - date3.getSeconds() * durationSecond);
  }, function(date3, step3) {
    date3.setTime(+date3 + step3 * durationMinute);
  }, function(start3, end) {
    return (end - start3) / durationMinute;
  }, function(date3) {
    return date3.getMinutes();
  });
  var minute_default = minute;
  var minutes = minute.range;

  // node_modules/d3-time/src/hour.js
  var hour = newInterval(function(date3) {
    date3.setTime(date3 - date3.getMilliseconds() - date3.getSeconds() * durationSecond - date3.getMinutes() * durationMinute);
  }, function(date3, step3) {
    date3.setTime(+date3 + step3 * durationHour);
  }, function(start3, end) {
    return (end - start3) / durationHour;
  }, function(date3) {
    return date3.getHours();
  });
  var hour_default = hour;
  var hours = hour.range;

  // node_modules/d3-time/src/day.js
  var day2 = newInterval(
    (date3) => date3.setHours(0, 0, 0, 0),
    (date3, step3) => date3.setDate(date3.getDate() + step3),
    (start3, end) => (end - start3 - (end.getTimezoneOffset() - start3.getTimezoneOffset()) * durationMinute) / durationDay,
    (date3) => date3.getDate() - 1
  );
  var day_default = day2;
  var days = day2.range;

  // node_modules/d3-time/src/week.js
  function weekday(i2) {
    return newInterval(function(date3) {
      date3.setDate(date3.getDate() - (date3.getDay() + 7 - i2) % 7);
      date3.setHours(0, 0, 0, 0);
    }, function(date3, step3) {
      date3.setDate(date3.getDate() + step3 * 7);
    }, function(start3, end) {
      return (end - start3 - (end.getTimezoneOffset() - start3.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }
  var sunday = weekday(0);
  var monday = weekday(1);
  var tuesday = weekday(2);
  var wednesday = weekday(3);
  var thursday = weekday(4);
  var friday = weekday(5);
  var saturday = weekday(6);
  var sundays = sunday.range;
  var mondays = monday.range;
  var tuesdays = tuesday.range;
  var wednesdays = wednesday.range;
  var thursdays = thursday.range;
  var fridays = friday.range;
  var saturdays = saturday.range;

  // node_modules/d3-time/src/month.js
  var month2 = newInterval(function(date3) {
    date3.setDate(1);
    date3.setHours(0, 0, 0, 0);
  }, function(date3, step3) {
    date3.setMonth(date3.getMonth() + step3);
  }, function(start3, end) {
    return end.getMonth() - start3.getMonth() + (end.getFullYear() - start3.getFullYear()) * 12;
  }, function(date3) {
    return date3.getMonth();
  });
  var month_default = month2;
  var months = month2.range;

  // node_modules/d3-time/src/year.js
  var year2 = newInterval(function(date3) {
    date3.setMonth(0, 1);
    date3.setHours(0, 0, 0, 0);
  }, function(date3, step3) {
    date3.setFullYear(date3.getFullYear() + step3);
  }, function(start3, end) {
    return end.getFullYear() - start3.getFullYear();
  }, function(date3) {
    return date3.getFullYear();
  });
  year2.every = function(k2) {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date3) {
      date3.setFullYear(Math.floor(date3.getFullYear() / k2) * k2);
      date3.setMonth(0, 1);
      date3.setHours(0, 0, 0, 0);
    }, function(date3, step3) {
      date3.setFullYear(date3.getFullYear() + step3 * k2);
    });
  };
  var year_default = year2;
  var years = year2.range;

  // node_modules/d3-time/src/utcMinute.js
  var utcMinute = newInterval(function(date3) {
    date3.setUTCSeconds(0, 0);
  }, function(date3, step3) {
    date3.setTime(+date3 + step3 * durationMinute);
  }, function(start3, end) {
    return (end - start3) / durationMinute;
  }, function(date3) {
    return date3.getUTCMinutes();
  });
  var utcMinute_default = utcMinute;
  var utcMinutes = utcMinute.range;

  // node_modules/d3-time/src/utcHour.js
  var utcHour = newInterval(function(date3) {
    date3.setUTCMinutes(0, 0, 0);
  }, function(date3, step3) {
    date3.setTime(+date3 + step3 * durationHour);
  }, function(start3, end) {
    return (end - start3) / durationHour;
  }, function(date3) {
    return date3.getUTCHours();
  });
  var utcHour_default = utcHour;
  var utcHours = utcHour.range;

  // node_modules/d3-time/src/utcDay.js
  var utcDay = newInterval(function(date3) {
    date3.setUTCHours(0, 0, 0, 0);
  }, function(date3, step3) {
    date3.setUTCDate(date3.getUTCDate() + step3);
  }, function(start3, end) {
    return (end - start3) / durationDay;
  }, function(date3) {
    return date3.getUTCDate() - 1;
  });
  var utcDay_default = utcDay;
  var utcDays = utcDay.range;

  // node_modules/d3-time/src/utcWeek.js
  function utcWeekday(i2) {
    return newInterval(function(date3) {
      date3.setUTCDate(date3.getUTCDate() - (date3.getUTCDay() + 7 - i2) % 7);
      date3.setUTCHours(0, 0, 0, 0);
    }, function(date3, step3) {
      date3.setUTCDate(date3.getUTCDate() + step3 * 7);
    }, function(start3, end) {
      return (end - start3) / durationWeek;
    });
  }
  var utcSunday = utcWeekday(0);
  var utcMonday = utcWeekday(1);
  var utcTuesday = utcWeekday(2);
  var utcWednesday = utcWeekday(3);
  var utcThursday = utcWeekday(4);
  var utcFriday = utcWeekday(5);
  var utcSaturday = utcWeekday(6);
  var utcSundays = utcSunday.range;
  var utcMondays = utcMonday.range;
  var utcTuesdays = utcTuesday.range;
  var utcWednesdays = utcWednesday.range;
  var utcThursdays = utcThursday.range;
  var utcFridays = utcFriday.range;
  var utcSaturdays = utcSaturday.range;

  // node_modules/d3-time/src/utcMonth.js
  var utcMonth = newInterval(function(date3) {
    date3.setUTCDate(1);
    date3.setUTCHours(0, 0, 0, 0);
  }, function(date3, step3) {
    date3.setUTCMonth(date3.getUTCMonth() + step3);
  }, function(start3, end) {
    return end.getUTCMonth() - start3.getUTCMonth() + (end.getUTCFullYear() - start3.getUTCFullYear()) * 12;
  }, function(date3) {
    return date3.getUTCMonth();
  });
  var utcMonth_default = utcMonth;
  var utcMonths = utcMonth.range;

  // node_modules/d3-time/src/utcYear.js
  var utcYear = newInterval(function(date3) {
    date3.setUTCMonth(0, 1);
    date3.setUTCHours(0, 0, 0, 0);
  }, function(date3, step3) {
    date3.setUTCFullYear(date3.getUTCFullYear() + step3);
  }, function(start3, end) {
    return end.getUTCFullYear() - start3.getUTCFullYear();
  }, function(date3) {
    return date3.getUTCFullYear();
  });
  utcYear.every = function(k2) {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date3) {
      date3.setUTCFullYear(Math.floor(date3.getUTCFullYear() / k2) * k2);
      date3.setUTCMonth(0, 1);
      date3.setUTCHours(0, 0, 0, 0);
    }, function(date3, step3) {
      date3.setUTCFullYear(date3.getUTCFullYear() + step3 * k2);
    });
  };
  var utcYear_default = utcYear;
  var utcYears = utcYear.range;

  // node_modules/d3-time/src/ticks.js
  function ticker(year3, month3, week, day3, hour3, minute3) {
    const tickIntervals = [
      [second_default, 1, durationSecond],
      [second_default, 5, 5 * durationSecond],
      [second_default, 15, 15 * durationSecond],
      [second_default, 30, 30 * durationSecond],
      [minute3, 1, durationMinute],
      [minute3, 5, 5 * durationMinute],
      [minute3, 15, 15 * durationMinute],
      [minute3, 30, 30 * durationMinute],
      [hour3, 1, durationHour],
      [hour3, 3, 3 * durationHour],
      [hour3, 6, 6 * durationHour],
      [hour3, 12, 12 * durationHour],
      [day3, 1, durationDay],
      [day3, 2, 2 * durationDay],
      [week, 1, durationWeek],
      [month3, 1, durationMonth],
      [month3, 3, 3 * durationMonth],
      [year3, 1, durationYear]
    ];
    function ticks2(start3, stop, count2) {
      const reverse4 = stop < start3;
      if (reverse4)
        [start3, stop] = [stop, start3];
      const interval2 = count2 && typeof count2.range === "function" ? count2 : tickInterval(start3, stop, count2);
      const ticks3 = interval2 ? interval2.range(start3, +stop + 1) : [];
      return reverse4 ? ticks3.reverse() : ticks3;
    }
    function tickInterval(start3, stop, count2) {
      const target5 = Math.abs(stop - start3) / count2;
      const i2 = bisector(([, , step4]) => step4).right(tickIntervals, target5);
      if (i2 === tickIntervals.length)
        return year3.every(tickStep(start3 / durationYear, stop / durationYear, count2));
      if (i2 === 0)
        return millisecond_default.every(Math.max(tickStep(start3, stop, count2), 1));
      const [t, step3] = tickIntervals[target5 / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target5 ? i2 - 1 : i2];
      return t.every(step3);
    }
    return [ticks2, tickInterval];
  }
  var [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
  var [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);

  // node_modules/d3-time-format/src/locale.js
  function localDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date3 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
      date3.setFullYear(d.y);
      return date3;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  }
  function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date3 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
      date3.setUTCFullYear(d.y);
      return date3;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  }
  function newDate(y2, m, d) {
    return { y: y2, m, d, H: 0, M: 0, S: 0, L: 0 };
  }
  function formatLocale(locale3) {
    var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "g": formatYearISO,
      "G": formatFullYearISO,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };
    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "g": formatUTCYearISO,
      "G": formatUTCFullYearISO,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };
    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "g": parseYear,
      "G": parseFullYear,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats2) {
      return function(date3) {
        var string2 = [], i2 = -1, j = 0, n = specifier.length, c4, pad3, format4;
        if (!(date3 instanceof Date))
          date3 = new Date(+date3);
        while (++i2 < n) {
          if (specifier.charCodeAt(i2) === 37) {
            string2.push(specifier.slice(j, i2));
            if ((pad3 = pads[c4 = specifier.charAt(++i2)]) != null)
              c4 = specifier.charAt(++i2);
            else
              pad3 = c4 === "e" ? " " : "0";
            if (format4 = formats2[c4])
              c4 = format4(date3, pad3);
            string2.push(c4);
            j = i2 + 1;
          }
        }
        string2.push(specifier.slice(j, i2));
        return string2.join("");
      };
    }
    function newParse(specifier, Z) {
      return function(string2) {
        var d = newDate(1900, void 0, 1), i2 = parseSpecifier(d, specifier, string2 += "", 0), week, day3;
        if (i2 != string2.length)
          return null;
        if ("Q" in d)
          return new Date(d.Q);
        if ("s" in d)
          return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
        if (Z && !("Z" in d))
          d.Z = 0;
        if ("p" in d)
          d.H = d.H % 12 + d.p * 12;
        if (d.m === void 0)
          d.m = "q" in d ? d.q : 0;
        if ("V" in d) {
          if (d.V < 1 || d.V > 53)
            return null;
          if (!("w" in d))
            d.w = 1;
          if ("Z" in d) {
            week = utcDate(newDate(d.y, 0, 1)), day3 = week.getUTCDay();
            week = day3 > 4 || day3 === 0 ? utcMonday.ceil(week) : utcMonday(week);
            week = utcDay_default.offset(week, (d.V - 1) * 7);
            d.y = week.getUTCFullYear();
            d.m = week.getUTCMonth();
            d.d = week.getUTCDate() + (d.w + 6) % 7;
          } else {
            week = localDate(newDate(d.y, 0, 1)), day3 = week.getDay();
            week = day3 > 4 || day3 === 0 ? monday.ceil(week) : monday(week);
            week = day_default.offset(week, (d.V - 1) * 7);
            d.y = week.getFullYear();
            d.m = week.getMonth();
            d.d = week.getDate() + (d.w + 6) % 7;
          }
        } else if ("W" in d || "U" in d) {
          if (!("w" in d))
            d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
          day3 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
          d.m = 0;
          d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day3 + 5) % 7 : d.w + d.U * 7 - (day3 + 6) % 7;
        }
        if ("Z" in d) {
          d.H += d.Z / 100 | 0;
          d.M += d.Z % 100;
          return utcDate(d);
        }
        return localDate(d);
      };
    }
    function parseSpecifier(d, specifier, string2, j) {
      var i2 = 0, n = specifier.length, m = string2.length, c4, parse9;
      while (i2 < n) {
        if (j >= m)
          return -1;
        c4 = specifier.charCodeAt(i2++);
        if (c4 === 37) {
          c4 = specifier.charAt(i2++);
          parse9 = parses[c4 in pads ? specifier.charAt(i2++) : c4];
          if (!parse9 || (j = parse9(d, string2, j)) < 0)
            return -1;
        } else if (c4 != string2.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    function parsePeriod(d, string2, i2) {
      var n = periodRe.exec(string2.slice(i2));
      return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
    }
    function parseShortWeekday(d, string2, i2) {
      var n = shortWeekdayRe.exec(string2.slice(i2));
      return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
    }
    function parseWeekday(d, string2, i2) {
      var n = weekdayRe.exec(string2.slice(i2));
      return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
    }
    function parseShortMonth(d, string2, i2) {
      var n = shortMonthRe.exec(string2.slice(i2));
      return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
    }
    function parseMonth(d, string2, i2) {
      var n = monthRe.exec(string2.slice(i2));
      return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string2, i2) {
      return parseSpecifier(d, locale_dateTime, string2, i2);
    }
    function parseLocaleDate(d, string2, i2) {
      return parseSpecifier(d, locale_date, string2, i2);
    }
    function parseLocaleTime(d, string2, i2) {
      return parseSpecifier(d, locale_time, string2, i2);
    }
    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
      return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
      return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
      return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
      return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
      format: function(specifier) {
        var f = newFormat(specifier += "", formats);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      parse: function(specifier) {
        var p2 = newParse(specifier += "", false);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      },
      utcFormat: function(specifier) {
        var f = newFormat(specifier += "", utcFormats);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      utcParse: function(specifier) {
        var p2 = newParse(specifier += "", true);
        p2.toString = function() {
          return specifier;
        };
        return p2;
      }
    };
  }
  var pads = { "-": "", "_": " ", "0": "0" };
  var numberRe = /^\s*\d+/;
  var percentRe = /^%/;
  var requoteRe = /[\\^$*+?|[\]().{}]/g;
  function pad(value12, fill, width8) {
    var sign3 = value12 < 0 ? "-" : "", string2 = (sign3 ? -value12 : value12) + "", length8 = string2.length;
    return sign3 + (length8 < width8 ? new Array(width8 - length8 + 1).join(fill) + string2 : string2);
  }
  function requote(s3) {
    return s3.replace(requoteRe, "\\$&");
  }
  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }
  function formatLookup(names) {
    return new Map(names.map((name15, i2) => [name15.toLowerCase(), i2]));
  }
  function parseWeekdayNumberSunday(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 1));
    return n ? (d.w = +n[0], i2 + n[0].length) : -1;
  }
  function parseWeekdayNumberMonday(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 1));
    return n ? (d.u = +n[0], i2 + n[0].length) : -1;
  }
  function parseWeekNumberSunday(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 2));
    return n ? (d.U = +n[0], i2 + n[0].length) : -1;
  }
  function parseWeekNumberISO(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 2));
    return n ? (d.V = +n[0], i2 + n[0].length) : -1;
  }
  function parseWeekNumberMonday(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 2));
    return n ? (d.W = +n[0], i2 + n[0].length) : -1;
  }
  function parseFullYear(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 4));
    return n ? (d.y = +n[0], i2 + n[0].length) : -1;
  }
  function parseYear(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i2 + n[0].length) : -1;
  }
  function parseZone(d, string2, i2) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i2, i2 + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i2 + n[0].length) : -1;
  }
  function parseQuarter(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 1));
    return n ? (d.q = n[0] * 3 - 3, i2 + n[0].length) : -1;
  }
  function parseMonthNumber(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 2));
    return n ? (d.m = n[0] - 1, i2 + n[0].length) : -1;
  }
  function parseDayOfMonth(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 2));
    return n ? (d.d = +n[0], i2 + n[0].length) : -1;
  }
  function parseDayOfYear(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 3));
    return n ? (d.m = 0, d.d = +n[0], i2 + n[0].length) : -1;
  }
  function parseHour24(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 2));
    return n ? (d.H = +n[0], i2 + n[0].length) : -1;
  }
  function parseMinutes(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 2));
    return n ? (d.M = +n[0], i2 + n[0].length) : -1;
  }
  function parseSeconds(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 2));
    return n ? (d.S = +n[0], i2 + n[0].length) : -1;
  }
  function parseMilliseconds(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 3));
    return n ? (d.L = +n[0], i2 + n[0].length) : -1;
  }
  function parseMicroseconds(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2, i2 + 6));
    return n ? (d.L = Math.floor(n[0] / 1e3), i2 + n[0].length) : -1;
  }
  function parseLiteralPercent(d, string2, i2) {
    var n = percentRe.exec(string2.slice(i2, i2 + 1));
    return n ? i2 + n[0].length : -1;
  }
  function parseUnixTimestamp(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2));
    return n ? (d.Q = +n[0], i2 + n[0].length) : -1;
  }
  function parseUnixTimestampSeconds(d, string2, i2) {
    var n = numberRe.exec(string2.slice(i2));
    return n ? (d.s = +n[0], i2 + n[0].length) : -1;
  }
  function formatDayOfMonth(d, p2) {
    return pad(d.getDate(), p2, 2);
  }
  function formatHour24(d, p2) {
    return pad(d.getHours(), p2, 2);
  }
  function formatHour12(d, p2) {
    return pad(d.getHours() % 12 || 12, p2, 2);
  }
  function formatDayOfYear(d, p2) {
    return pad(1 + day_default.count(year_default(d), d), p2, 3);
  }
  function formatMilliseconds(d, p2) {
    return pad(d.getMilliseconds(), p2, 3);
  }
  function formatMicroseconds(d, p2) {
    return formatMilliseconds(d, p2) + "000";
  }
  function formatMonthNumber(d, p2) {
    return pad(d.getMonth() + 1, p2, 2);
  }
  function formatMinutes(d, p2) {
    return pad(d.getMinutes(), p2, 2);
  }
  function formatSeconds(d, p2) {
    return pad(d.getSeconds(), p2, 2);
  }
  function formatWeekdayNumberMonday(d) {
    var day3 = d.getDay();
    return day3 === 0 ? 7 : day3;
  }
  function formatWeekNumberSunday(d, p2) {
    return pad(sunday.count(year_default(d) - 1, d), p2, 2);
  }
  function dISO(d) {
    var day3 = d.getDay();
    return day3 >= 4 || day3 === 0 ? thursday(d) : thursday.ceil(d);
  }
  function formatWeekNumberISO(d, p2) {
    d = dISO(d);
    return pad(thursday.count(year_default(d), d) + (year_default(d).getDay() === 4), p2, 2);
  }
  function formatWeekdayNumberSunday(d) {
    return d.getDay();
  }
  function formatWeekNumberMonday(d, p2) {
    return pad(monday.count(year_default(d) - 1, d), p2, 2);
  }
  function formatYear(d, p2) {
    return pad(d.getFullYear() % 100, p2, 2);
  }
  function formatYearISO(d, p2) {
    d = dISO(d);
    return pad(d.getFullYear() % 100, p2, 2);
  }
  function formatFullYear(d, p2) {
    return pad(d.getFullYear() % 1e4, p2, 4);
  }
  function formatFullYearISO(d, p2) {
    var day3 = d.getDay();
    d = day3 >= 4 || day3 === 0 ? thursday(d) : thursday.ceil(d);
    return pad(d.getFullYear() % 1e4, p2, 4);
  }
  function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
  }
  function formatUTCDayOfMonth(d, p2) {
    return pad(d.getUTCDate(), p2, 2);
  }
  function formatUTCHour24(d, p2) {
    return pad(d.getUTCHours(), p2, 2);
  }
  function formatUTCHour12(d, p2) {
    return pad(d.getUTCHours() % 12 || 12, p2, 2);
  }
  function formatUTCDayOfYear(d, p2) {
    return pad(1 + utcDay_default.count(utcYear_default(d), d), p2, 3);
  }
  function formatUTCMilliseconds(d, p2) {
    return pad(d.getUTCMilliseconds(), p2, 3);
  }
  function formatUTCMicroseconds(d, p2) {
    return formatUTCMilliseconds(d, p2) + "000";
  }
  function formatUTCMonthNumber(d, p2) {
    return pad(d.getUTCMonth() + 1, p2, 2);
  }
  function formatUTCMinutes(d, p2) {
    return pad(d.getUTCMinutes(), p2, 2);
  }
  function formatUTCSeconds(d, p2) {
    return pad(d.getUTCSeconds(), p2, 2);
  }
  function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
  }
  function formatUTCWeekNumberSunday(d, p2) {
    return pad(utcSunday.count(utcYear_default(d) - 1, d), p2, 2);
  }
  function UTCdISO(d) {
    var day3 = d.getUTCDay();
    return day3 >= 4 || day3 === 0 ? utcThursday(d) : utcThursday.ceil(d);
  }
  function formatUTCWeekNumberISO(d, p2) {
    d = UTCdISO(d);
    return pad(utcThursday.count(utcYear_default(d), d) + (utcYear_default(d).getUTCDay() === 4), p2, 2);
  }
  function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
  }
  function formatUTCWeekNumberMonday(d, p2) {
    return pad(utcMonday.count(utcYear_default(d) - 1, d), p2, 2);
  }
  function formatUTCYear(d, p2) {
    return pad(d.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCYearISO(d, p2) {
    d = UTCdISO(d);
    return pad(d.getUTCFullYear() % 100, p2, 2);
  }
  function formatUTCFullYear(d, p2) {
    return pad(d.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCFullYearISO(d, p2) {
    var day3 = d.getUTCDay();
    d = day3 >= 4 || day3 === 0 ? utcThursday(d) : utcThursday.ceil(d);
    return pad(d.getUTCFullYear() % 1e4, p2, 4);
  }
  function formatUTCZone() {
    return "+0000";
  }
  function formatLiteralPercent() {
    return "%";
  }
  function formatUnixTimestamp(d) {
    return +d;
  }
  function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1e3);
  }

  // node_modules/d3-time-format/src/defaultLocale.js
  var locale2;
  var timeFormat;
  var timeParse;
  var utcFormat;
  var utcParse;
  defaultLocale2({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });
  function defaultLocale2(definition) {
    locale2 = formatLocale(definition);
    timeFormat = locale2.format;
    timeParse = locale2.parse;
    utcFormat = locale2.utcFormat;
    utcParse = locale2.utcParse;
    return locale2;
  }

  // node_modules/d3-scale/src/time.js
  function date(t) {
    return new Date(t);
  }
  function number4(t) {
    return t instanceof Date ? +t : +new Date(+t);
  }
  function calendar(ticks2, tickInterval, year3, month3, week, day3, hour3, minute3, second4, format4) {
    var scale = continuous(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format4(".%L"), formatSecond = format4(":%S"), formatMinute = format4("%I:%M"), formatHour = format4("%I %p"), formatDay = format4("%a %d"), formatWeek = format4("%b %d"), formatMonth = format4("%B"), formatYear3 = format4("%Y");
    function tickFormat2(date3) {
      return (second4(date3) < date3 ? formatMillisecond : minute3(date3) < date3 ? formatSecond : hour3(date3) < date3 ? formatMinute : day3(date3) < date3 ? formatHour : month3(date3) < date3 ? week(date3) < date3 ? formatDay : formatWeek : year3(date3) < date3 ? formatMonth : formatYear3)(date3);
    }
    scale.invert = function(y2) {
      return new Date(invert(y2));
    };
    scale.domain = function(_) {
      return arguments.length ? domain(Array.from(_, number4)) : domain().map(date);
    };
    scale.ticks = function(interval2) {
      var d = domain();
      return ticks2(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
    };
    scale.tickFormat = function(count2, specifier) {
      return specifier == null ? tickFormat2 : format4(specifier);
    };
    scale.nice = function(interval2) {
      var d = domain();
      if (!interval2 || typeof interval2.range !== "function")
        interval2 = tickInterval(d[0], d[d.length - 1], interval2 == null ? 10 : interval2);
      return interval2 ? domain(nice2(d, interval2)) : scale;
    };
    scale.copy = function() {
      return copy(scale, calendar(ticks2, tickInterval, year3, month3, week, day3, hour3, minute3, second4, format4));
    };
    return scale;
  }
  function time() {
    return initRange.apply(calendar(timeTicks, timeTickInterval, year_default, month_default, sunday, day_default, hour_default, minute_default, second_default, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
  }

  // node_modules/d3-scale/src/utcTime.js
  function utcTime() {
    return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default, second_default, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
  }

  // node_modules/d3-scale/src/sequential.js
  function copy2(source3, target5) {
    return target5.domain(source3.domain()).interpolator(source3.interpolator()).clamp(source3.clamp()).unknown(source3.unknown());
  }

  // node_modules/d3-scale/src/diverging.js
  function transformer2() {
    var x0 = 0, x1 = 0.5, x2 = 1, s3 = 1, t03, t13, t22, k10, k21, interpolator = identity9, transform2, clamp = false, unknown;
    function scale(x3) {
      return isNaN(x3 = +x3) ? unknown : (x3 = 0.5 + ((x3 = +transform2(x3)) - t13) * (s3 * x3 < s3 * t13 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x3)) : x3));
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1, x2] = _, t03 = transform2(x0 = +x0), t13 = transform2(x1 = +x1), t22 = transform2(x2 = +x2), k10 = t03 === t13 ? 0 : 0.5 / (t13 - t03), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13), s3 = t13 < t03 ? -1 : 1, scale) : [x0, x1, x2];
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range5(interpolate) {
      return function(_) {
        var r0, r1, r2;
        return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
      };
    }
    scale.range = range5(value_default);
    scale.rangeRound = range5(round_default);
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
      transform2 = t, t03 = t(x0), t13 = t(x1), t22 = t(x2), k10 = t03 === t13 ? 0 : 0.5 / (t13 - t03), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13), s3 = t13 < t03 ? -1 : 1;
      return scale;
    };
  }
  function diverging() {
    var scale = linearish(transformer2()(identity9));
    scale.copy = function() {
      return copy2(scale, diverging());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingLog() {
    var scale = loggish(transformer2()).domain([0.1, 1, 10]);
    scale.copy = function() {
      return copy2(scale, divergingLog()).base(scale.base());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingSymlog() {
    var scale = symlogish(transformer2());
    scale.copy = function() {
      return copy2(scale, divergingSymlog()).constant(scale.constant());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingPow() {
    var scale = powish(transformer2());
    scale.copy = function() {
      return copy2(scale, divergingPow()).exponent(scale.exponent());
    };
    return initInterpolator.apply(scale, arguments);
  }

  // node_modules/d3-scale-chromatic/src/colors.js
  function colors_default(specifier) {
    var n = specifier.length / 6 | 0, colors = new Array(n), i2 = 0;
    while (i2 < n)
      colors[i2] = "#" + specifier.slice(i2 * 6, ++i2 * 6);
    return colors;
  }

  // node_modules/d3-scale-chromatic/src/categorical/category10.js
  var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

  // node_modules/d3-scale-chromatic/src/categorical/Accent.js
  var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

  // node_modules/d3-scale-chromatic/src/categorical/Dark2.js
  var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

  // node_modules/d3-scale-chromatic/src/categorical/Paired.js
  var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

  // node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
  var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

  // node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
  var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

  // node_modules/d3-scale-chromatic/src/categorical/Set1.js
  var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

  // node_modules/d3-scale-chromatic/src/categorical/Set2.js
  var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

  // node_modules/d3-scale-chromatic/src/categorical/Set3.js
  var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

  // node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
  var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

  // node_modules/d3-scale-chromatic/src/ramp.js
  var ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);

  // node_modules/d3-scale-chromatic/src/diverging/BrBG.js
  var scheme = new Array(3).concat(
    "d8b365f5f5f55ab4ac",
    "a6611adfc27d80cdc1018571",
    "a6611adfc27df5f5f580cdc1018571",
    "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
    "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
    "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
    "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
    "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
    "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
  ).map(colors_default);
  var BrBG_default = ramp_default(scheme);

  // node_modules/d3-scale-chromatic/src/diverging/PRGn.js
  var scheme2 = new Array(3).concat(
    "af8dc3f7f7f77fbf7b",
    "7b3294c2a5cfa6dba0008837",
    "7b3294c2a5cff7f7f7a6dba0008837",
    "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
    "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
    "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
    "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
    "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
    "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
  ).map(colors_default);
  var PRGn_default = ramp_default(scheme2);

  // node_modules/d3-scale-chromatic/src/diverging/PiYG.js
  var scheme3 = new Array(3).concat(
    "e9a3c9f7f7f7a1d76a",
    "d01c8bf1b6dab8e1864dac26",
    "d01c8bf1b6daf7f7f7b8e1864dac26",
    "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
    "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
    "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
    "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
    "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
    "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
  ).map(colors_default);
  var PiYG_default = ramp_default(scheme3);

  // node_modules/d3-scale-chromatic/src/diverging/PuOr.js
  var scheme4 = new Array(3).concat(
    "998ec3f7f7f7f1a340",
    "5e3c99b2abd2fdb863e66101",
    "5e3c99b2abd2f7f7f7fdb863e66101",
    "542788998ec3d8daebfee0b6f1a340b35806",
    "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
    "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
    "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
    "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
    "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
  ).map(colors_default);
  var PuOr_default = ramp_default(scheme4);

  // node_modules/d3-scale-chromatic/src/diverging/RdBu.js
  var scheme5 = new Array(3).concat(
    "ef8a62f7f7f767a9cf",
    "ca0020f4a58292c5de0571b0",
    "ca0020f4a582f7f7f792c5de0571b0",
    "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
    "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
    "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
    "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
    "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
    "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
  ).map(colors_default);
  var RdBu_default = ramp_default(scheme5);

  // node_modules/d3-scale-chromatic/src/diverging/RdGy.js
  var scheme6 = new Array(3).concat(
    "ef8a62ffffff999999",
    "ca0020f4a582bababa404040",
    "ca0020f4a582ffffffbababa404040",
    "b2182bef8a62fddbc7e0e0e09999994d4d4d",
    "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
    "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
    "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
    "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
    "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
  ).map(colors_default);
  var RdGy_default = ramp_default(scheme6);

  // node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
  var scheme7 = new Array(3).concat(
    "fc8d59ffffbf91bfdb",
    "d7191cfdae61abd9e92c7bb6",
    "d7191cfdae61ffffbfabd9e92c7bb6",
    "d73027fc8d59fee090e0f3f891bfdb4575b4",
    "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
    "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
    "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
    "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
    "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
  ).map(colors_default);
  var RdYlBu_default = ramp_default(scheme7);

  // node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
  var scheme8 = new Array(3).concat(
    "fc8d59ffffbf91cf60",
    "d7191cfdae61a6d96a1a9641",
    "d7191cfdae61ffffbfa6d96a1a9641",
    "d73027fc8d59fee08bd9ef8b91cf601a9850",
    "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
    "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
    "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
    "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
    "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
  ).map(colors_default);
  var RdYlGn_default = ramp_default(scheme8);

  // node_modules/d3-scale-chromatic/src/diverging/Spectral.js
  var scheme9 = new Array(3).concat(
    "fc8d59ffffbf99d594",
    "d7191cfdae61abdda42b83ba",
    "d7191cfdae61ffffbfabdda42b83ba",
    "d53e4ffc8d59fee08be6f59899d5943288bd",
    "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
    "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
    "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
    "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
    "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
  ).map(colors_default);
  var Spectral_default = ramp_default(scheme9);

  // node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
  var scheme10 = new Array(3).concat(
    "e5f5f999d8c92ca25f",
    "edf8fbb2e2e266c2a4238b45",
    "edf8fbb2e2e266c2a42ca25f006d2c",
    "edf8fbccece699d8c966c2a42ca25f006d2c",
    "edf8fbccece699d8c966c2a441ae76238b45005824",
    "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
    "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
  ).map(colors_default);
  var BuGn_default = ramp_default(scheme10);

  // node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
  var scheme11 = new Array(3).concat(
    "e0ecf49ebcda8856a7",
    "edf8fbb3cde38c96c688419d",
    "edf8fbb3cde38c96c68856a7810f7c",
    "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
    "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
    "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
    "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
  ).map(colors_default);
  var BuPu_default = ramp_default(scheme11);

  // node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
  var scheme12 = new Array(3).concat(
    "e0f3dba8ddb543a2ca",
    "f0f9e8bae4bc7bccc42b8cbe",
    "f0f9e8bae4bc7bccc443a2ca0868ac",
    "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
    "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
    "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
    "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
  ).map(colors_default);
  var GnBu_default = ramp_default(scheme12);

  // node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
  var scheme13 = new Array(3).concat(
    "fee8c8fdbb84e34a33",
    "fef0d9fdcc8afc8d59d7301f",
    "fef0d9fdcc8afc8d59e34a33b30000",
    "fef0d9fdd49efdbb84fc8d59e34a33b30000",
    "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
    "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
    "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
  ).map(colors_default);
  var OrRd_default = ramp_default(scheme13);

  // node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
  var scheme14 = new Array(3).concat(
    "ece2f0a6bddb1c9099",
    "f6eff7bdc9e167a9cf02818a",
    "f6eff7bdc9e167a9cf1c9099016c59",
    "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
    "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
    "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
    "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
  ).map(colors_default);
  var PuBuGn_default = ramp_default(scheme14);

  // node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
  var scheme15 = new Array(3).concat(
    "ece7f2a6bddb2b8cbe",
    "f1eef6bdc9e174a9cf0570b0",
    "f1eef6bdc9e174a9cf2b8cbe045a8d",
    "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
    "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
    "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
    "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
  ).map(colors_default);
  var PuBu_default = ramp_default(scheme15);

  // node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
  var scheme16 = new Array(3).concat(
    "e7e1efc994c7dd1c77",
    "f1eef6d7b5d8df65b0ce1256",
    "f1eef6d7b5d8df65b0dd1c77980043",
    "f1eef6d4b9dac994c7df65b0dd1c77980043",
    "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
    "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
    "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
  ).map(colors_default);
  var PuRd_default = ramp_default(scheme16);

  // node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
  var scheme17 = new Array(3).concat(
    "fde0ddfa9fb5c51b8a",
    "feebe2fbb4b9f768a1ae017e",
    "feebe2fbb4b9f768a1c51b8a7a0177",
    "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
    "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
    "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
    "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
  ).map(colors_default);
  var RdPu_default = ramp_default(scheme17);

  // node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
  var scheme18 = new Array(3).concat(
    "edf8b17fcdbb2c7fb8",
    "ffffcca1dab441b6c4225ea8",
    "ffffcca1dab441b6c42c7fb8253494",
    "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
    "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
    "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
    "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
  ).map(colors_default);
  var YlGnBu_default = ramp_default(scheme18);

  // node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
  var scheme19 = new Array(3).concat(
    "f7fcb9addd8e31a354",
    "ffffccc2e69978c679238443",
    "ffffccc2e69978c67931a354006837",
    "ffffccd9f0a3addd8e78c67931a354006837",
    "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
    "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
    "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
  ).map(colors_default);
  var YlGn_default = ramp_default(scheme19);

  // node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
  var scheme20 = new Array(3).concat(
    "fff7bcfec44fd95f0e",
    "ffffd4fed98efe9929cc4c02",
    "ffffd4fed98efe9929d95f0e993404",
    "ffffd4fee391fec44ffe9929d95f0e993404",
    "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
    "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
    "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
  ).map(colors_default);
  var YlOrBr_default = ramp_default(scheme20);

  // node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
  var scheme21 = new Array(3).concat(
    "ffeda0feb24cf03b20",
    "ffffb2fecc5cfd8d3ce31a1c",
    "ffffb2fecc5cfd8d3cf03b20bd0026",
    "ffffb2fed976feb24cfd8d3cf03b20bd0026",
    "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
    "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
    "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
  ).map(colors_default);
  var YlOrRd_default = ramp_default(scheme21);

  // node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
  var scheme22 = new Array(3).concat(
    "deebf79ecae13182bd",
    "eff3ffbdd7e76baed62171b5",
    "eff3ffbdd7e76baed63182bd08519c",
    "eff3ffc6dbef9ecae16baed63182bd08519c",
    "eff3ffc6dbef9ecae16baed64292c62171b5084594",
    "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
    "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
  ).map(colors_default);
  var Blues_default = ramp_default(scheme22);

  // node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
  var scheme23 = new Array(3).concat(
    "e5f5e0a1d99b31a354",
    "edf8e9bae4b374c476238b45",
    "edf8e9bae4b374c47631a354006d2c",
    "edf8e9c7e9c0a1d99b74c47631a354006d2c",
    "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
    "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
    "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
  ).map(colors_default);
  var Greens_default = ramp_default(scheme23);

  // node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
  var scheme24 = new Array(3).concat(
    "f0f0f0bdbdbd636363",
    "f7f7f7cccccc969696525252",
    "f7f7f7cccccc969696636363252525",
    "f7f7f7d9d9d9bdbdbd969696636363252525",
    "f7f7f7d9d9d9bdbdbd969696737373525252252525",
    "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
    "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
  ).map(colors_default);
  var Greys_default = ramp_default(scheme24);

  // node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
  var scheme25 = new Array(3).concat(
    "efedf5bcbddc756bb1",
    "f2f0f7cbc9e29e9ac86a51a3",
    "f2f0f7cbc9e29e9ac8756bb154278f",
    "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
    "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
    "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
    "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
  ).map(colors_default);
  var Purples_default = ramp_default(scheme25);

  // node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
  var scheme26 = new Array(3).concat(
    "fee0d2fc9272de2d26",
    "fee5d9fcae91fb6a4acb181d",
    "fee5d9fcae91fb6a4ade2d26a50f15",
    "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
    "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
    "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
    "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
  ).map(colors_default);
  var Reds_default = ramp_default(scheme26);

  // node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
  var scheme27 = new Array(3).concat(
    "fee6cefdae6be6550d",
    "feeddefdbe85fd8d3cd94701",
    "feeddefdbe85fd8d3ce6550da63603",
    "feeddefdd0a2fdae6bfd8d3ce6550da63603",
    "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
    "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
    "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
  ).map(colors_default);
  var Oranges_default = ramp_default(scheme27);

  // node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
  function cividis_default(t) {
    t = Math.max(0, Math.min(1, t));
    return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
  }

  // node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
  var cubehelix_default2 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));

  // node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
  var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
  var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
  var c = cubehelix();
  function rainbow_default(t) {
    if (t < 0 || t > 1)
      t -= Math.floor(t);
    var ts = Math.abs(t - 0.5);
    c.h = 360 * t - 100;
    c.s = 1.5 - 1.5 * ts;
    c.l = 0.8 - 0.9 * ts;
    return c + "";
  }

  // node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
  var c2 = rgb();
  var pi_1_3 = Math.PI / 3;
  var pi_2_3 = Math.PI * 2 / 3;
  function sinebow_default(t) {
    var x2;
    t = (0.5 - t) * Math.PI;
    c2.r = 255 * (x2 = Math.sin(t)) * x2;
    c2.g = 255 * (x2 = Math.sin(t + pi_1_3)) * x2;
    c2.b = 255 * (x2 = Math.sin(t + pi_2_3)) * x2;
    return c2 + "";
  }

  // node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
  function turbo_default(t) {
    t = Math.max(0, Math.min(1, t));
    return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
  }

  // node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
  function ramp(range5) {
    var n = range5.length;
    return function(t) {
      return range5[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
  }
  var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
  var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
  var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
  var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

  // node_modules/d3-shape/src/constant.js
  function constant_default4(x2) {
    return function constant3() {
      return x2;
    };
  }

  // node_modules/d3-shape/src/math.js
  var cos2 = Math.cos;
  var min5 = Math.min;
  var sin2 = Math.sin;
  var sqrt3 = Math.sqrt;
  var epsilon3 = 1e-12;
  var pi2 = Math.PI;
  var halfPi = pi2 / 2;
  var tau2 = 2 * pi2;

  // node_modules/d3-shape/src/array.js
  var slice4 = Array.prototype.slice;
  function array_default(x2) {
    return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
  }

  // node_modules/d3-shape/src/curve/linear.js
  function Linear(context) {
    this._context = context;
  }
  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(x2, y2);
          break;
      }
    }
  };
  function linear_default(context) {
    return new Linear(context);
  }

  // node_modules/d3-shape/src/point.js
  function x(p2) {
    return p2[0];
  }
  function y(p2) {
    return p2[1];
  }

  // node_modules/d3-shape/src/line.js
  function line_default(x2, y2) {
    var defined2 = constant_default4(true), context = null, curve = linear_default, output2 = null;
    x2 = typeof x2 === "function" ? x2 : x2 === void 0 ? x : constant_default4(x2);
    y2 = typeof y2 === "function" ? y2 : y2 === void 0 ? y : constant_default4(y2);
    function line2(data) {
      var i2, n = (data = array_default(data)).length, d, defined0 = false, buffer;
      if (context == null)
        output2 = curve(buffer = path_default());
      for (i2 = 0; i2 <= n; ++i2) {
        if (!(i2 < n && defined2(d = data[i2], i2, data)) === defined0) {
          if (defined0 = !defined0)
            output2.lineStart();
          else
            output2.lineEnd();
        }
        if (defined0)
          output2.point(+x2(d, i2, data), +y2(d, i2, data));
      }
      if (buffer)
        return output2 = null, buffer + "" || null;
    }
    line2.x = function(_) {
      return arguments.length ? (x2 = typeof _ === "function" ? _ : constant_default4(+_), line2) : x2;
    };
    line2.y = function(_) {
      return arguments.length ? (y2 = typeof _ === "function" ? _ : constant_default4(+_), line2) : y2;
    };
    line2.defined = function(_) {
      return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant_default4(!!_), line2) : defined2;
    };
    line2.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output2 = curve(context)), line2) : curve;
    };
    line2.context = function(_) {
      return arguments.length ? (_ == null ? context = output2 = null : output2 = curve(context = _), line2) : context;
    };
    return line2;
  }

  // node_modules/d3-shape/src/area.js
  function area_default(x0, y0, y1) {
    var x1 = null, defined2 = constant_default4(true), context = null, curve = linear_default, output2 = null;
    x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x : constant_default4(+x0);
    y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default4(0) : constant_default4(+y0);
    y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant_default4(+y1);
    function area3(data) {
      var i2, j, k2, n = (data = array_default(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
      if (context == null)
        output2 = curve(buffer = path_default());
      for (i2 = 0; i2 <= n; ++i2) {
        if (!(i2 < n && defined2(d = data[i2], i2, data)) === defined0) {
          if (defined0 = !defined0) {
            j = i2;
            output2.areaStart();
            output2.lineStart();
          } else {
            output2.lineEnd();
            output2.lineStart();
            for (k2 = i2 - 1; k2 >= j; --k2) {
              output2.point(x0z[k2], y0z[k2]);
            }
            output2.lineEnd();
            output2.areaEnd();
          }
        }
        if (defined0) {
          x0z[i2] = +x0(d, i2, data), y0z[i2] = +y0(d, i2, data);
          output2.point(x1 ? +x1(d, i2, data) : x0z[i2], y1 ? +y1(d, i2, data) : y0z[i2]);
        }
      }
      if (buffer)
        return output2 = null, buffer + "" || null;
    }
    function arealine() {
      return line_default().defined(defined2).curve(curve).context(context);
    }
    area3.x = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default4(+_), x1 = null, area3) : x0;
    };
    area3.x0 = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default4(+_), area3) : x0;
    };
    area3.x1 = function(_) {
      return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default4(+_), area3) : x1;
    };
    area3.y = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default4(+_), y1 = null, area3) : y0;
    };
    area3.y0 = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default4(+_), area3) : y0;
    };
    area3.y1 = function(_) {
      return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default4(+_), area3) : y1;
    };
    area3.lineX0 = area3.lineY0 = function() {
      return arealine().x(x0).y(y0);
    };
    area3.lineY1 = function() {
      return arealine().x(x0).y(y1);
    };
    area3.lineX1 = function() {
      return arealine().x(x1).y(y0);
    };
    area3.defined = function(_) {
      return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant_default4(!!_), area3) : defined2;
    };
    area3.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output2 = curve(context)), area3) : curve;
    };
    area3.context = function(_) {
      return arguments.length ? (_ == null ? context = output2 = null : output2 = curve(context = _), area3) : context;
    };
    return area3;
  }

  // node_modules/d3-shape/src/curve/bump.js
  var Bump = class {
    constructor(context, x2) {
      this._context = context;
      this._x = x2;
    }
    areaStart() {
      this._line = 0;
    }
    areaEnd() {
      this._line = NaN;
    }
    lineStart() {
      this._point = 0;
    }
    lineEnd() {
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    }
    point(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0: {
          this._point = 1;
          if (this._line)
            this._context.lineTo(x2, y2);
          else
            this._context.moveTo(x2, y2);
          break;
        }
        case 1:
          this._point = 2;
        default: {
          if (this._x)
            this._context.bezierCurveTo(this._x0 = (this._x0 + x2) / 2, this._y0, this._x0, y2, x2, y2);
          else
            this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y2) / 2, x2, this._y0, x2, y2);
          break;
        }
      }
      this._x0 = x2, this._y0 = y2;
    }
  };
  function bumpX(context) {
    return new Bump(context, true);
  }
  function bumpY(context) {
    return new Bump(context, false);
  }

  // node_modules/d3-shape/src/symbol/asterisk.js
  var sqrt32 = sqrt3(3);
  var asterisk_default = {
    draw(context, size5) {
      const r2 = sqrt3(size5 + min5(size5 / 28, 0.75)) * 0.59436;
      const t = r2 / 2;
      const u2 = t * sqrt32;
      context.moveTo(0, r2);
      context.lineTo(0, -r2);
      context.moveTo(-u2, -t);
      context.lineTo(u2, t);
      context.moveTo(-u2, t);
      context.lineTo(u2, -t);
    }
  };

  // node_modules/d3-shape/src/symbol/circle.js
  var circle_default = {
    draw(context, size5) {
      const r2 = sqrt3(size5 / pi2);
      context.moveTo(r2, 0);
      context.arc(0, 0, r2, 0, tau2);
    }
  };

  // node_modules/d3-shape/src/symbol/cross.js
  var cross_default = {
    draw(context, size5) {
      const r2 = sqrt3(size5 / 5) / 2;
      context.moveTo(-3 * r2, -r2);
      context.lineTo(-r2, -r2);
      context.lineTo(-r2, -3 * r2);
      context.lineTo(r2, -3 * r2);
      context.lineTo(r2, -r2);
      context.lineTo(3 * r2, -r2);
      context.lineTo(3 * r2, r2);
      context.lineTo(r2, r2);
      context.lineTo(r2, 3 * r2);
      context.lineTo(-r2, 3 * r2);
      context.lineTo(-r2, r2);
      context.lineTo(-3 * r2, r2);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/diamond.js
  var tan30 = sqrt3(1 / 3);
  var tan30_2 = tan30 * 2;
  var diamond_default = {
    draw(context, size5) {
      const y2 = sqrt3(size5 / tan30_2);
      const x2 = y2 * tan30;
      context.moveTo(0, -y2);
      context.lineTo(x2, 0);
      context.lineTo(0, y2);
      context.lineTo(-x2, 0);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/diamond2.js
  var diamond2_default = {
    draw(context, size5) {
      const r2 = sqrt3(size5) * 0.62625;
      context.moveTo(0, -r2);
      context.lineTo(r2, 0);
      context.lineTo(0, r2);
      context.lineTo(-r2, 0);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/plus.js
  var plus_default = {
    draw(context, size5) {
      const r2 = sqrt3(size5 - min5(size5 / 7, 2)) * 0.87559;
      context.moveTo(-r2, 0);
      context.lineTo(r2, 0);
      context.moveTo(0, r2);
      context.lineTo(0, -r2);
    }
  };

  // node_modules/d3-shape/src/symbol/square.js
  var square_default = {
    draw(context, size5) {
      const w = sqrt3(size5);
      const x2 = -w / 2;
      context.rect(x2, x2, w, w);
    }
  };

  // node_modules/d3-shape/src/symbol/square2.js
  var square2_default = {
    draw(context, size5) {
      const r2 = sqrt3(size5) * 0.4431;
      context.moveTo(r2, r2);
      context.lineTo(r2, -r2);
      context.lineTo(-r2, -r2);
      context.lineTo(-r2, r2);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/star.js
  var ka = 0.8908130915292852;
  var kr = sin2(pi2 / 10) / sin2(7 * pi2 / 10);
  var kx = sin2(tau2 / 10) * kr;
  var ky = -cos2(tau2 / 10) * kr;
  var star_default = {
    draw(context, size5) {
      const r2 = sqrt3(size5 * ka);
      const x2 = kx * r2;
      const y2 = ky * r2;
      context.moveTo(0, -r2);
      context.lineTo(x2, y2);
      for (let i2 = 1; i2 < 5; ++i2) {
        const a3 = tau2 * i2 / 5;
        const c4 = cos2(a3);
        const s3 = sin2(a3);
        context.lineTo(s3 * r2, -c4 * r2);
        context.lineTo(c4 * x2 - s3 * y2, s3 * x2 + c4 * y2);
      }
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/triangle.js
  var sqrt33 = sqrt3(3);
  var triangle_default = {
    draw(context, size5) {
      const y2 = -sqrt3(size5 / (sqrt33 * 3));
      context.moveTo(0, y2 * 2);
      context.lineTo(-sqrt33 * y2, -y2);
      context.lineTo(sqrt33 * y2, -y2);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/triangle2.js
  var sqrt34 = sqrt3(3);
  var triangle2_default = {
    draw(context, size5) {
      const s3 = sqrt3(size5) * 0.6824;
      const t = s3 / 2;
      const u2 = s3 * sqrt34 / 2;
      context.moveTo(0, -s3);
      context.lineTo(u2, t);
      context.lineTo(-u2, t);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/wye.js
  var c3 = -0.5;
  var s = sqrt3(3) / 2;
  var k = 1 / sqrt3(12);
  var a = (k / 2 + 1) * 3;
  var wye_default = {
    draw(context, size5) {
      const r2 = sqrt3(size5 / a);
      const x0 = r2 / 2, y0 = r2 * k;
      const x1 = x0, y1 = r2 * k + r2;
      const x2 = -x1, y2 = y1;
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
      context.lineTo(x2, y2);
      context.lineTo(c3 * x0 - s * y0, s * x0 + c3 * y0);
      context.lineTo(c3 * x1 - s * y1, s * x1 + c3 * y1);
      context.lineTo(c3 * x2 - s * y2, s * x2 + c3 * y2);
      context.lineTo(c3 * x0 + s * y0, c3 * y0 - s * x0);
      context.lineTo(c3 * x1 + s * y1, c3 * y1 - s * x1);
      context.lineTo(c3 * x2 + s * y2, c3 * y2 - s * x2);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/x.js
  var x_default = {
    draw(context, size5) {
      const r2 = sqrt3(size5 - min5(size5 / 6, 1.7)) * 0.6189;
      context.moveTo(-r2, -r2);
      context.lineTo(r2, r2);
      context.moveTo(-r2, r2);
      context.lineTo(r2, -r2);
    }
  };

  // node_modules/d3-shape/src/symbol.js
  var symbolsFill = [
    circle_default,
    cross_default,
    diamond_default,
    square_default,
    star_default,
    triangle_default,
    wye_default
  ];
  var symbolsStroke = [
    circle_default,
    plus_default,
    x_default,
    triangle2_default,
    asterisk_default,
    square2_default,
    diamond2_default
  ];

  // node_modules/d3-shape/src/noop.js
  function noop_default() {
  }

  // node_modules/d3-shape/src/curve/basis.js
  function point2(that, x2, y2) {
    that._context.bezierCurveTo(
      (2 * that._x0 + that._x1) / 3,
      (2 * that._y0 + that._y1) / 3,
      (that._x0 + 2 * that._x1) / 3,
      (that._y0 + 2 * that._y1) / 3,
      (that._x0 + 4 * that._x1 + x2) / 6,
      (that._y0 + 4 * that._y1 + y2) / 6
    );
  }
  function Basis(context) {
    this._context = context;
  }
  Basis.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 3:
          point2(this, this._x1, this._y1);
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
        default:
          point2(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function basis_default2(context) {
    return new Basis(context);
  }

  // node_modules/d3-shape/src/curve/basisClosed.js
  function BasisClosed(context) {
    this._context = context;
  }
  BasisClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x2, this._y2);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
      }
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x2 = x2, this._y2 = y2;
          break;
        case 1:
          this._point = 2;
          this._x3 = x2, this._y3 = y2;
          break;
        case 2:
          this._point = 3;
          this._x4 = x2, this._y4 = y2;
          this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
          break;
        default:
          point2(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function basisClosed_default2(context) {
    return new BasisClosed(context);
  }

  // node_modules/d3-shape/src/curve/basisOpen.js
  function BasisOpen(context) {
    this._context = context;
  }
  BasisOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
          this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
          break;
        case 3:
          this._point = 4;
        default:
          point2(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function basisOpen_default(context) {
    return new BasisOpen(context);
  }

  // node_modules/d3-shape/src/curve/bundle.js
  function Bundle(context, beta) {
    this._basis = new Basis(context);
    this._beta = beta;
  }
  Bundle.prototype = {
    lineStart: function() {
      this._x = [];
      this._y = [];
      this._basis.lineStart();
    },
    lineEnd: function() {
      var x2 = this._x, y2 = this._y, j = x2.length - 1;
      if (j > 0) {
        var x0 = x2[0], y0 = y2[0], dx = x2[j] - x0, dy = y2[j] - y0, i2 = -1, t;
        while (++i2 <= j) {
          t = i2 / j;
          this._basis.point(
            this._beta * x2[i2] + (1 - this._beta) * (x0 + t * dx),
            this._beta * y2[i2] + (1 - this._beta) * (y0 + t * dy)
          );
        }
      }
      this._x = this._y = null;
      this._basis.lineEnd();
    },
    point: function(x2, y2) {
      this._x.push(+x2);
      this._y.push(+y2);
    }
  };
  var bundle_default = function custom(beta) {
    function bundle(context) {
      return beta === 1 ? new Basis(context) : new Bundle(context, beta);
    }
    bundle.beta = function(beta2) {
      return custom(+beta2);
    };
    return bundle;
  }(0.85);

  // node_modules/d3-shape/src/curve/cardinal.js
  function point3(that, x2, y2) {
    that._context.bezierCurveTo(
      that._x1 + that._k * (that._x2 - that._x0),
      that._y1 + that._k * (that._y2 - that._y0),
      that._x2 + that._k * (that._x1 - x2),
      that._y2 + that._k * (that._y1 - y2),
      that._x2,
      that._y2
    );
  }
  function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  Cardinal.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);
          break;
        case 3:
          point3(this, this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          this._x1 = x2, this._y1 = y2;
          break;
        case 2:
          this._point = 3;
        default:
          point3(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  var cardinal_default = function custom2(tension) {
    function cardinal(context) {
      return new Cardinal(context, tension);
    }
    cardinal.tension = function(tension2) {
      return custom2(+tension2);
    };
    return cardinal;
  }(0);

  // node_modules/d3-shape/src/curve/cardinalClosed.js
  function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  CardinalClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
      }
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x3 = x2, this._y3 = y2;
          break;
        case 1:
          this._point = 2;
          this._context.moveTo(this._x4 = x2, this._y4 = y2);
          break;
        case 2:
          this._point = 3;
          this._x5 = x2, this._y5 = y2;
          break;
        default:
          point3(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  var cardinalClosed_default = function custom3(tension) {
    function cardinal(context) {
      return new CardinalClosed(context, tension);
    }
    cardinal.tension = function(tension2) {
      return custom3(+tension2);
    };
    return cardinal;
  }(0);

  // node_modules/d3-shape/src/curve/cardinalOpen.js
  function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  CardinalOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;
        case 3:
          this._point = 4;
        default:
          point3(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  var cardinalOpen_default = function custom4(tension) {
    function cardinal(context) {
      return new CardinalOpen(context, tension);
    }
    cardinal.tension = function(tension2) {
      return custom4(+tension2);
    };
    return cardinal;
  }(0);

  // node_modules/d3-shape/src/curve/catmullRom.js
  function point4(that, x2, y2) {
    var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
    if (that._l01_a > epsilon3) {
      var a3 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
      x1 = (x1 * a3 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
      y1 = (y1 * a3 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > epsilon3) {
      var b2 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
      x22 = (x22 * b2 + that._x1 * that._l23_2a - x2 * that._l12_2a) / m;
      y22 = (y22 * b2 + that._y1 * that._l23_2a - y2 * that._l12_2a) / m;
    }
    that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
  }
  function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }
  CatmullRom.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);
          break;
        case 3:
          this.point(this._x2, this._y2);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point) {
        var x23 = this._x2 - x2, y23 = this._y2 - y2;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
        default:
          point4(this, x2, y2);
          break;
      }
      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  var catmullRom_default = function custom5(alpha) {
    function catmullRom(context) {
      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
    }
    catmullRom.alpha = function(alpha2) {
      return custom5(+alpha2);
    };
    return catmullRom;
  }(0.5);

  // node_modules/d3-shape/src/curve/catmullRomClosed.js
  function CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }
  CatmullRomClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
      }
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point) {
        var x23 = this._x2 - x2, y23 = this._y2 - y2;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x3 = x2, this._y3 = y2;
          break;
        case 1:
          this._point = 2;
          this._context.moveTo(this._x4 = x2, this._y4 = y2);
          break;
        case 2:
          this._point = 3;
          this._x5 = x2, this._y5 = y2;
          break;
        default:
          point4(this, x2, y2);
          break;
      }
      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  var catmullRomClosed_default = function custom6(alpha) {
    function catmullRom(context) {
      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
    }
    catmullRom.alpha = function(alpha2) {
      return custom6(+alpha2);
    };
    return catmullRom;
  }(0.5);

  // node_modules/d3-shape/src/curve/catmullRomOpen.js
  function CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }
  CatmullRomOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point) {
        var x23 = this._x2 - x2, y23 = this._y2 - y2;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
          break;
        case 3:
          this._point = 4;
        default:
          point4(this, x2, y2);
          break;
      }
      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
    }
  };
  var catmullRomOpen_default = function custom7(alpha) {
    function catmullRom(context) {
      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
    }
    catmullRom.alpha = function(alpha2) {
      return custom7(+alpha2);
    };
    return catmullRom;
  }(0.5);

  // node_modules/d3-shape/src/curve/linearClosed.js
  function LinearClosed(context) {
    this._context = context;
  }
  LinearClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._point)
        this._context.closePath();
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point)
        this._context.lineTo(x2, y2);
      else
        this._point = 1, this._context.moveTo(x2, y2);
    }
  };
  function linearClosed_default(context) {
    return new LinearClosed(context);
  }

  // node_modules/d3-shape/src/curve/monotone.js
  function sign2(x2) {
    return x2 < 0 ? -1 : 1;
  }
  function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h12 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h12 < 0 && -0), s1 = (y2 - that._y1) / (h12 || h0 < 0 && -0), p2 = (s0 * h12 + s1 * h0) / (h0 + h12);
    return (sign2(s0) + sign2(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
  }
  function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
  }
  function point5(that, t03, t13) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t03, x1 - dx, y1 - dx * t13, x1, y1);
  }
  function MonotoneX(context) {
    this._context = context;
  }
  MonotoneX.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
        case 3:
          point5(this, this._t0, slope2(this, this._t0));
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      var t13 = NaN;
      x2 = +x2, y2 = +y2;
      if (x2 === this._x1 && y2 === this._y1)
        return;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          point5(this, slope2(this, t13 = slope3(this, x2, y2)), t13);
          break;
        default:
          point5(this, this._t0, t13 = slope3(this, x2, y2));
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
      this._t0 = t13;
    }
  };
  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }
  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
    MonotoneX.prototype.point.call(this, y2, x2);
  };
  function ReflectContext(context) {
    this._context = context;
  }
  ReflectContext.prototype = {
    moveTo: function(x2, y2) {
      this._context.moveTo(y2, x2);
    },
    closePath: function() {
      this._context.closePath();
    },
    lineTo: function(x2, y2) {
      this._context.lineTo(y2, x2);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
      this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
    }
  };
  function monotoneX(context) {
    return new MonotoneX(context);
  }
  function monotoneY(context) {
    return new MonotoneY(context);
  }

  // node_modules/d3-shape/src/curve/natural.js
  function Natural(context) {
    this._context = context;
  }
  Natural.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = [];
      this._y = [];
    },
    lineEnd: function() {
      var x2 = this._x, y2 = this._y, n = x2.length;
      if (n) {
        this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
        if (n === 2) {
          this._context.lineTo(x2[1], y2[1]);
        } else {
          var px = controlPoints(x2), py = controlPoints(y2);
          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
          }
        }
      }
      if (this._line || this._line !== 0 && n === 1)
        this._context.closePath();
      this._line = 1 - this._line;
      this._x = this._y = null;
    },
    point: function(x2, y2) {
      this._x.push(+x2);
      this._y.push(+y2);
    }
  };
  function controlPoints(x2) {
    var i2, n = x2.length - 1, m, a3 = new Array(n), b2 = new Array(n), r2 = new Array(n);
    a3[0] = 0, b2[0] = 2, r2[0] = x2[0] + 2 * x2[1];
    for (i2 = 1; i2 < n - 1; ++i2)
      a3[i2] = 1, b2[i2] = 4, r2[i2] = 4 * x2[i2] + 2 * x2[i2 + 1];
    a3[n - 1] = 2, b2[n - 1] = 7, r2[n - 1] = 8 * x2[n - 1] + x2[n];
    for (i2 = 1; i2 < n; ++i2)
      m = a3[i2] / b2[i2 - 1], b2[i2] -= m, r2[i2] -= m * r2[i2 - 1];
    a3[n - 1] = r2[n - 1] / b2[n - 1];
    for (i2 = n - 2; i2 >= 0; --i2)
      a3[i2] = (r2[i2] - a3[i2 + 1]) / b2[i2];
    b2[n - 1] = (x2[n] + a3[n - 1]) / 2;
    for (i2 = 0; i2 < n - 1; ++i2)
      b2[i2] = 2 * x2[i2 + 1] - a3[i2 + 1];
    return [a3, b2];
  }
  function natural_default(context) {
    return new Natural(context);
  }

  // node_modules/d3-shape/src/curve/step.js
  function Step(context, t) {
    this._context = context;
    this._t = t;
  }
  Step.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (0 < this._t && this._t < 1 && this._point === 2)
        this._context.lineTo(this._x, this._y);
      if (this._line || this._line !== 0 && this._point === 1)
        this._context.closePath();
      if (this._line >= 0)
        this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
        default: {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y2);
            this._context.lineTo(x2, y2);
          } else {
            var x1 = this._x * (1 - this._t) + x2 * this._t;
            this._context.lineTo(x1, this._y);
            this._context.lineTo(x1, y2);
          }
          break;
        }
      }
      this._x = x2, this._y = y2;
    }
  };
  function step_default(context) {
    return new Step(context, 0.5);
  }
  function stepBefore(context) {
    return new Step(context, 0);
  }
  function stepAfter(context) {
    return new Step(context, 1);
  }

  // node_modules/d3-zoom/src/transform.js
  function Transform(k2, x2, y2) {
    this.k = k2;
    this.x = x2;
    this.y = y2;
  }
  Transform.prototype = {
    constructor: Transform,
    scale: function(k2) {
      return k2 === 1 ? this : new Transform(this.k * k2, this.x, this.y);
    },
    translate: function(x2, y2) {
      return x2 === 0 & y2 === 0 ? this : new Transform(this.k, this.x + this.k * x2, this.y + this.k * y2);
    },
    apply: function(point6) {
      return [point6[0] * this.k + this.x, point6[1] * this.k + this.y];
    },
    applyX: function(x2) {
      return x2 * this.k + this.x;
    },
    applyY: function(y2) {
      return y2 * this.k + this.y;
    },
    invert: function(location2) {
      return [(location2[0] - this.x) / this.k, (location2[1] - this.y) / this.k];
    },
    invertX: function(x2) {
      return (x2 - this.x) / this.k;
    },
    invertY: function(y2) {
      return (y2 - this.y) / this.k;
    },
    rescaleX: function(x2) {
      return x2.copy().domain(x2.range().map(this.invertX, this).map(x2.invert, x2));
    },
    rescaleY: function(y2) {
      return y2.copy().domain(y2.range().map(this.invertY, this).map(y2.invert, y2));
    },
    toString: function() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
  };
  var identity11 = new Transform(1, 0, 0);
  transform.prototype = Transform.prototype;
  function transform(node) {
    while (!node.__zoom)
      if (!(node = node.parentNode))
        return identity11;
    return node.__zoom;
  }

  // node_modules/@observablehq/plot/dist/context.js
  function Context({ document: document3 = window.document } = {}) {
    return { document: document3 };
  }
  function create2(name15, { document: document3 }) {
    return select_default2(creator_default(name15).call(document3.documentElement));
  }

  // node_modules/isoformat/src/format.js
  function format3(date3, fallback) {
    if (!(date3 instanceof Date))
      date3 = new Date(+date3);
    if (isNaN(date3))
      return typeof fallback === "function" ? fallback(date3) : fallback;
    const hours2 = date3.getUTCHours();
    const minutes2 = date3.getUTCMinutes();
    const seconds2 = date3.getUTCSeconds();
    const milliseconds2 = date3.getUTCMilliseconds();
    return `${formatYear2(date3.getUTCFullYear(), 4)}-${pad2(date3.getUTCMonth() + 1, 2)}-${pad2(date3.getUTCDate(), 2)}${hours2 || minutes2 || seconds2 || milliseconds2 ? `T${pad2(hours2, 2)}:${pad2(minutes2, 2)}${seconds2 || milliseconds2 ? `:${pad2(seconds2, 2)}${milliseconds2 ? `.${pad2(milliseconds2, 3)}` : ``}` : ``}Z` : ``}`;
  }
  function formatYear2(year3) {
    return year3 < 0 ? `-${pad2(-year3, 6)}` : year3 > 9999 ? `+${pad2(year3, 6)}` : pad2(year3, 4);
  }
  function pad2(value12, width8) {
    return `${value12}`.padStart(width8, "0");
  }

  // node_modules/isoformat/src/parse.js
  var re2 = /^(?:[-+]\d{2})?\d{4}(?:-\d{2}(?:-\d{2})?)?(?:T\d{2}:\d{2}(?::\d{2}(?:\.\d{3})?)?(?:Z|[-+]\d{2}:?\d{2})?)?$/;
  function parse(string2, fallback) {
    if (!re2.test(string2 += ""))
      return typeof fallback === "function" ? fallback(string2) : fallback;
    return new Date(string2);
  }

  // node_modules/@observablehq/plot/dist/options.js
  var TypedArray = Object.getPrototypeOf(Uint8Array);
  var objectToString = Object.prototype.toString;
  function valueof(data, value12, type2) {
    const valueType = typeof value12;
    return valueType === "string" ? map6(data, field(value12), type2) : valueType === "function" ? map6(data, value12, type2) : valueType === "number" || value12 instanceof Date || valueType === "boolean" ? map6(data, constant2(value12), type2) : value12 && typeof value12.transform === "function" ? arrayify2(value12.transform(data), type2) : arrayify2(value12, type2);
  }
  var field = (name15) => (d) => d[name15];
  var indexOf = (d, i2) => i2;
  var identity12 = { transform: (d) => d };
  var one3 = () => 1;
  var yes = () => true;
  var string = (x2) => x2 == null ? x2 : `${x2}`;
  var number5 = (x2) => x2 == null ? x2 : +x2;
  var boolean = (x2) => x2 == null ? x2 : !!x2;
  var first = (x2) => x2 ? x2[0] : void 0;
  var second2 = (x2) => x2 ? x2[1] : void 0;
  var constant2 = (x2) => () => x2;
  function percentile(reduce) {
    const p2 = +`${reduce}`.slice(1) / 100;
    return (I, f) => quantile(I, p2, f);
  }
  function maybeColorChannel(value12, defaultValue4) {
    if (value12 === void 0)
      value12 = defaultValue4;
    return value12 === null ? [void 0, "none"] : isColor(value12) ? [void 0, value12] : [value12, void 0];
  }
  function maybeNumberChannel(value12, defaultValue4) {
    if (value12 === void 0)
      value12 = defaultValue4;
    return value12 === null || typeof value12 === "number" ? [void 0, value12] : [value12, void 0];
  }
  function maybeKeyword(input3, name15, allowed) {
    if (input3 != null)
      return keyword(input3, name15, allowed);
  }
  function keyword(input3, name15, allowed) {
    const i2 = `${input3}`.toLowerCase();
    if (!allowed.includes(i2))
      throw new Error(`invalid ${name15}: ${input3}`);
    return i2;
  }
  function arrayify2(data, type2) {
    return data == null ? data : type2 === void 0 ? data instanceof Array || data instanceof TypedArray ? data : Array.from(data) : data instanceof type2 ? data : type2.from(data);
  }
  function map6(values3, f, type2 = Array) {
    return values3 instanceof type2 ? values3.map(f) : type2.from(values3, f);
  }
  function slice5(values3, type2 = Array) {
    return values3 instanceof type2 ? values3.slice() : type2.from(values3);
  }
  function isTypedArray(values3) {
    return values3 instanceof TypedArray;
  }
  function isObject(option2) {
    return option2?.toString === objectToString;
  }
  function isScaleOptions(option2) {
    return isObject(option2) && (option2.type !== void 0 || option2.domain !== void 0);
  }
  function isOptions(option2) {
    return isObject(option2) && typeof option2.transform !== "function";
  }
  function isDomainSort(sort2) {
    return isOptions(sort2) && sort2.value === void 0 && sort2.channel === void 0;
  }
  function maybeZero(x2, x1, x22, x3 = identity12) {
    if (x1 === void 0 && x22 === void 0) {
      x1 = 0, x22 = x2 === void 0 ? x3 : x2;
    } else if (x1 === void 0) {
      x1 = x2 === void 0 ? 0 : x2;
    } else if (x22 === void 0) {
      x22 = x2 === void 0 ? 0 : x2;
    }
    return [x1, x22];
  }
  function maybeZ({ z, fill, stroke } = {}) {
    if (z === void 0)
      [z] = maybeColorChannel(fill);
    if (z === void 0)
      [z] = maybeColorChannel(stroke);
    return z;
  }
  function range4(data) {
    const n = data.length;
    const r2 = new Uint32Array(n);
    for (let i2 = 0; i2 < n; ++i2)
      r2[i2] = i2;
    return r2;
  }
  function where(data, test2) {
    return range4(data).filter((i2) => test2(data[i2], i2, data));
  }
  function take2(values3, index5) {
    return map6(index5, (i2) => values3[i2]);
  }
  function keyof2(value12) {
    return value12 !== null && typeof value12 === "object" ? value12.valueOf() : value12;
  }
  function maybeInput(key, options2) {
    if (options2[key] !== void 0)
      return options2[key];
    switch (key) {
      case "x1":
      case "x2":
        key = "x";
        break;
      case "y1":
      case "y2":
        key = "y";
        break;
    }
    return options2[key];
  }
  function column(source3) {
    let value12;
    return [
      {
        transform: () => value12,
        label: labelof(source3)
      },
      (v) => value12 = v
    ];
  }
  function maybeColumn(source3) {
    return source3 == null ? [source3] : column(source3);
  }
  function labelof(value12, defaultValue4) {
    return typeof value12 === "string" ? value12 : value12 && value12.label !== void 0 ? value12.label : defaultValue4;
  }
  function mid(x1, x2) {
    return {
      transform(data) {
        const X1 = x1.transform(data);
        const X2 = x2.transform(data);
        return isTemporal(X1) || isTemporal(X2) ? map6(X1, (_, i2) => new Date((+X1[i2] + +X2[i2]) / 2)) : map6(X1, (_, i2) => (+X1[i2] + +X2[i2]) / 2, Float64Array);
      },
      label: x1.label
    };
  }
  function maybeValue(value12) {
    return value12 === void 0 || isOptions(value12) ? value12 : { value: value12 };
  }
  function isIterable(value12) {
    return value12 && typeof value12[Symbol.iterator] === "function";
  }
  function isOrdinal(values3) {
    for (const value12 of values3) {
      if (value12 == null)
        continue;
      const type2 = typeof value12;
      return type2 === "string" || type2 === "boolean";
    }
  }
  function isTemporal(values3) {
    for (const value12 of values3) {
      if (value12 == null)
        continue;
      return value12 instanceof Date;
    }
  }
  function isTemporalString(values3) {
    for (const value12 of values3) {
      if (value12 == null)
        continue;
      return typeof value12 === "string" && isNaN(value12) && parse(value12);
    }
  }
  function isNumericString(values3) {
    for (const value12 of values3) {
      if (value12 == null || value12 === "")
        continue;
      return typeof value12 === "string" && !isNaN(value12);
    }
  }
  function isFirst(values3, is) {
    for (const value12 of values3) {
      if (value12 == null)
        continue;
      return is(value12);
    }
  }
  function isEvery(values3, is) {
    for (const value12 of values3) {
      if (value12 == null)
        continue;
      if (!is(value12))
        return false;
    }
    return true;
  }
  function isColor(value12) {
    if (typeof value12 !== "string")
      return false;
    value12 = value12.toLowerCase().trim();
    return value12 === "none" || value12 === "currentcolor" || value12.startsWith("url(") && value12.endsWith(")") || value12.startsWith("var(") && value12.endsWith(")") || color(value12) !== null;
  }
  function isNoneish(value12) {
    return value12 == null || isNone(value12);
  }
  function isNone(value12) {
    return /^\s*none\s*$/i.test(value12);
  }
  function isRound(value12) {
    return /^\s*round\s*$/i.test(value12);
  }
  function order(values3) {
    if (values3 == null)
      return;
    const first2 = values3[0];
    const last3 = values3[values3.length - 1];
    return descending(first2, last3);
  }
  function inherit2(options2 = {}, ...rest) {
    let o = options2;
    for (const defaults3 of rest) {
      for (const key in defaults3) {
        if (o[key] === void 0) {
          const value12 = defaults3[key];
          if (o === options2)
            o = { ...o, [key]: value12 };
          else
            o[key] = value12;
        }
      }
    }
    return o;
  }
  function Named(things) {
    console.warn("named iterables are deprecated; please use an object instead");
    const names = /* @__PURE__ */ new Set();
    return Object.fromEntries(Array.from(things, (thing) => {
      const { name: name15 } = thing;
      if (name15 == null)
        throw new Error("missing name");
      const key = `${name15}`;
      if (key === "__proto__")
        throw new Error(`illegal name: ${key}`);
      if (names.has(key))
        throw new Error(`duplicate name: ${key}`);
      names.add(key);
      return [name15, thing];
    }));
  }
  function maybeNamed(things) {
    return isIterable(things) ? Named(things) : things;
  }

  // node_modules/@observablehq/plot/dist/memoize.js
  function memoize1(compute) {
    let cacheValue, cacheKeys;
    return (...keys3) => {
      if (cacheKeys?.length !== keys3.length || cacheKeys.some((k2, i2) => k2 !== keys3[i2])) {
        cacheKeys = keys3;
        cacheValue = compute(...keys3);
      }
      return cacheValue;
    };
  }

  // node_modules/@observablehq/plot/dist/format.js
  var numberFormat = memoize1((locale3) => new Intl.NumberFormat(locale3));
  var monthFormat = memoize1((locale3, month3) => new Intl.DateTimeFormat(locale3, { timeZone: "UTC", ...month3 && { month: month3 } }));
  var weekdayFormat = memoize1((locale3, weekday3) => new Intl.DateTimeFormat(locale3, { timeZone: "UTC", ...weekday3 && { weekday: weekday3 } }));
  function formatNumber(locale3 = "en-US") {
    const format4 = numberFormat(locale3);
    return (i2) => i2 != null && !isNaN(i2) ? format4.format(i2) : void 0;
  }
  function formatIsoDate(date3) {
    return format3(date3, "Invalid Date");
  }
  function formatAuto(locale3 = "en-US") {
    const number6 = formatNumber(locale3);
    return (v) => (v instanceof Date ? formatIsoDate : typeof v === "number" ? number6 : string)(v);
  }
  var formatDefault = formatAuto();

  // node_modules/@observablehq/plot/dist/math.js
  var radians2 = Math.PI / 180;

  // node_modules/@observablehq/plot/dist/defined.js
  function defined(x2) {
    return x2 != null && !Number.isNaN(x2);
  }
  function ascendingDefined2(a3, b2) {
    return +defined(b2) - +defined(a3) || ascending(a3, b2);
  }
  function descendingDefined(a3, b2) {
    return +defined(b2) - +defined(a3) || descending(a3, b2);
  }
  function nonempty(x2) {
    return x2 != null && `${x2}` !== "";
  }
  function finite(x2) {
    return isFinite(x2) ? x2 : NaN;
  }
  function positive(x2) {
    return x2 > 0 && isFinite(x2) ? x2 : NaN;
  }
  function negative(x2) {
    return x2 < 0 && isFinite(x2) ? x2 : NaN;
  }

  // node_modules/@observablehq/plot/dist/warnings.js
  var warnings = 0;
  function consumeWarnings() {
    const w = warnings;
    warnings = 0;
    return w;
  }
  function warn(message2) {
    console.warn(message2);
    ++warnings;
  }

  // node_modules/@observablehq/plot/dist/style.js
  var offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5;
  var nextClipId = 0;
  function styles(mark2, { title: title3, href: href4, ariaLabel: variaLabel, ariaDescription, ariaHidden, target: target5, fill, fillOpacity, stroke, strokeWidth, strokeOpacity, strokeLinejoin, strokeLinecap, strokeMiterlimit, strokeDasharray, strokeDashoffset, opacity: opacity2, mixBlendMode, paintOrder, pointerEvents, shapeRendering }, { ariaLabel: cariaLabel, fill: defaultFill = "currentColor", fillOpacity: defaultFillOpacity, stroke: defaultStroke = "none", strokeOpacity: defaultStrokeOpacity, strokeWidth: defaultStrokeWidth, strokeLinecap: defaultStrokeLinecap, strokeLinejoin: defaultStrokeLinejoin, strokeMiterlimit: defaultStrokeMiterlimit, paintOrder: defaultPaintOrder }) {
    if (defaultFill === null) {
      fill = null;
      fillOpacity = null;
    }
    if (defaultStroke === null) {
      stroke = null;
      strokeOpacity = null;
    }
    if (isNoneish(defaultFill)) {
      if (!isNoneish(defaultStroke) && !isNoneish(fill))
        defaultStroke = "none";
    } else {
      if (isNoneish(defaultStroke) && !isNoneish(stroke))
        defaultFill = "none";
    }
    const [vfill, cfill] = maybeColorChannel(fill, defaultFill);
    const [vfillOpacity, cfillOpacity] = maybeNumberChannel(fillOpacity, defaultFillOpacity);
    const [vstroke, cstroke] = maybeColorChannel(stroke, defaultStroke);
    const [vstrokeOpacity, cstrokeOpacity] = maybeNumberChannel(strokeOpacity, defaultStrokeOpacity);
    const [vopacity, copacity] = maybeNumberChannel(opacity2);
    if (!isNone(cstroke)) {
      if (strokeWidth === void 0)
        strokeWidth = defaultStrokeWidth;
      if (strokeLinecap === void 0)
        strokeLinecap = defaultStrokeLinecap;
      if (strokeLinejoin === void 0)
        strokeLinejoin = defaultStrokeLinejoin;
      if (strokeMiterlimit === void 0 && !isRound(strokeLinejoin))
        strokeMiterlimit = defaultStrokeMiterlimit;
      if (!isNone(cfill) && paintOrder === void 0)
        paintOrder = defaultPaintOrder;
    }
    const [vstrokeWidth, cstrokeWidth] = maybeNumberChannel(strokeWidth);
    if (defaultFill !== null) {
      mark2.fill = impliedString(cfill, "currentColor");
      mark2.fillOpacity = impliedNumber(cfillOpacity, 1);
    }
    if (defaultStroke !== null) {
      mark2.stroke = impliedString(cstroke, "none");
      mark2.strokeWidth = impliedNumber(cstrokeWidth, 1);
      mark2.strokeOpacity = impliedNumber(cstrokeOpacity, 1);
      mark2.strokeLinejoin = impliedString(strokeLinejoin, "miter");
      mark2.strokeLinecap = impliedString(strokeLinecap, "butt");
      mark2.strokeMiterlimit = impliedNumber(strokeMiterlimit, 4);
      mark2.strokeDasharray = impliedString(strokeDasharray, "none");
      mark2.strokeDashoffset = impliedString(strokeDashoffset, "0");
    }
    mark2.target = string(target5);
    mark2.ariaLabel = string(cariaLabel);
    mark2.ariaDescription = string(ariaDescription);
    mark2.ariaHidden = string(ariaHidden);
    mark2.opacity = impliedNumber(copacity, 1);
    mark2.mixBlendMode = impliedString(mixBlendMode, "normal");
    mark2.paintOrder = impliedString(paintOrder, "normal");
    mark2.pointerEvents = impliedString(pointerEvents, "auto");
    mark2.shapeRendering = impliedString(shapeRendering, "auto");
    return {
      title: { value: title3, optional: true },
      href: { value: href4, optional: true },
      ariaLabel: { value: variaLabel, optional: true },
      fill: { value: vfill, scale: "color", optional: true },
      fillOpacity: { value: vfillOpacity, scale: "opacity", optional: true },
      stroke: { value: vstroke, scale: "color", optional: true },
      strokeOpacity: { value: vstrokeOpacity, scale: "opacity", optional: true },
      strokeWidth: { value: vstrokeWidth, optional: true },
      opacity: { value: vopacity, scale: "opacity", optional: true }
    };
  }
  function applyTitleGroup(selection2, L) {
    if (L)
      selection2.filter(([i2]) => nonempty(L[i2])).append("title").call(applyTextGroup, L);
  }
  function applyTextGroup(selection2, T) {
    if (T)
      selection2.text(([i2]) => formatDefault(T[i2]));
  }
  function applyGroupedChannelStyles(selection2, { target: target5 }, { ariaLabel: AL, title: T, fill: F, fillOpacity: FO, stroke: S, strokeOpacity: SO, strokeWidth: SW, opacity: O, href: H }) {
    if (AL)
      applyAttr(selection2, "aria-label", ([i2]) => AL[i2]);
    if (F)
      applyAttr(selection2, "fill", ([i2]) => F[i2]);
    if (FO)
      applyAttr(selection2, "fill-opacity", ([i2]) => FO[i2]);
    if (S)
      applyAttr(selection2, "stroke", ([i2]) => S[i2]);
    if (SO)
      applyAttr(selection2, "stroke-opacity", ([i2]) => SO[i2]);
    if (SW)
      applyAttr(selection2, "stroke-width", ([i2]) => SW[i2]);
    if (O)
      applyAttr(selection2, "opacity", ([i2]) => O[i2]);
    if (H)
      applyHref(selection2, ([i2]) => H[i2], target5);
    applyTitleGroup(selection2, T);
  }
  function groupAesthetics({ ariaLabel: AL, title: T, fill: F, fillOpacity: FO, stroke: S, strokeOpacity: SO, strokeWidth: SW, opacity: O, href: H }) {
    return [AL, T, F, FO, S, SO, SW, O, H].filter((c4) => c4 !== void 0);
  }
  function groupZ(I, Z, z) {
    const G = group(I, (i2) => Z[i2]);
    if (z === void 0 && G.size > I.length >> 1) {
      warn(`Warning: the implicit z channel has high cardinality. This may occur when the fill or stroke channel is associated with quantitative data rather than ordinal or categorical data. You can suppress this warning by setting the z option explicitly; if this data represents a single series, set z to null.`);
    }
    return G.values();
  }
  function* groupIndex(I, position3, { z }, channels) {
    const { z: Z } = channels;
    const A2 = groupAesthetics(channels);
    const C2 = [...position3, ...A2];
    for (const G of Z ? groupZ(I, Z, z) : [I]) {
      let Ag;
      let Gg;
      out:
        for (const i2 of G) {
          for (const c4 of C2) {
            if (!defined(c4[i2])) {
              if (Gg)
                Gg.push(-1);
              continue out;
            }
          }
          if (Ag === void 0) {
            if (Gg)
              yield Gg;
            Ag = A2.map((c4) => keyof2(c4[i2])), Gg = [i2];
            continue;
          }
          Gg.push(i2);
          for (let j = 0; j < A2.length; ++j) {
            const k2 = keyof2(A2[j][i2]);
            if (k2 !== Ag[j]) {
              yield Gg;
              Ag = A2.map((c4) => keyof2(c4[i2])), Gg = [i2];
              continue out;
            }
          }
        }
      if (Gg)
        yield Gg;
    }
  }
  function maybeClip(clip) {
    if (clip === true)
      return "frame";
    if (clip == null || clip === false)
      return false;
    throw new Error(`invalid clip method: ${clip}`);
  }
  function applyIndirectStyles(selection2, mark2, scales, dimensions) {
    applyAttr(selection2, "aria-label", mark2.ariaLabel);
    applyAttr(selection2, "aria-description", mark2.ariaDescription);
    applyAttr(selection2, "aria-hidden", mark2.ariaHidden);
    applyAttr(selection2, "fill", mark2.fill);
    applyAttr(selection2, "fill-opacity", mark2.fillOpacity);
    applyAttr(selection2, "stroke", mark2.stroke);
    applyAttr(selection2, "stroke-width", mark2.strokeWidth);
    applyAttr(selection2, "stroke-opacity", mark2.strokeOpacity);
    applyAttr(selection2, "stroke-linejoin", mark2.strokeLinejoin);
    applyAttr(selection2, "stroke-linecap", mark2.strokeLinecap);
    applyAttr(selection2, "stroke-miterlimit", mark2.strokeMiterlimit);
    applyAttr(selection2, "stroke-dasharray", mark2.strokeDasharray);
    applyAttr(selection2, "stroke-dashoffset", mark2.strokeDashoffset);
    applyAttr(selection2, "shape-rendering", mark2.shapeRendering);
    applyAttr(selection2, "paint-order", mark2.paintOrder);
    applyAttr(selection2, "pointer-events", mark2.pointerEvents);
    if (mark2.clip === "frame") {
      const { x: x2, y: y2 } = scales;
      const { width: width8, height: height8, marginLeft, marginRight, marginTop, marginBottom } = dimensions;
      const id3 = `plot-clip-${++nextClipId}`;
      selection2.attr("clip-path", `url(#${id3})`).append("clipPath").attr("id", id3).append("rect").attr("x", marginLeft - (x2?.bandwidth ? x2.bandwidth() / 2 : 0)).attr("y", marginTop - (y2?.bandwidth ? y2.bandwidth() / 2 : 0)).attr("width", width8 - marginRight - marginLeft).attr("height", height8 - marginTop - marginBottom);
    }
  }
  function applyDirectStyles(selection2, mark2) {
    applyStyle(selection2, "mix-blend-mode", mark2.mixBlendMode);
    applyAttr(selection2, "opacity", mark2.opacity);
  }
  function applyHref(selection2, href4, target5) {
    selection2.each(function(i2) {
      const h = href4(i2);
      if (h != null) {
        const a3 = this.ownerDocument.createElementNS(namespaces_default.svg, "a");
        a3.setAttribute("fill", "inherit");
        a3.setAttributeNS(namespaces_default.xlink, "href", h);
        if (target5 != null)
          a3.setAttribute("target", target5);
        this.parentNode.insertBefore(a3, this).appendChild(this);
      }
    });
  }
  function applyAttr(selection2, name15, value12) {
    if (value12 != null)
      selection2.attr(name15, value12);
  }
  function applyStyle(selection2, name15, value12) {
    if (value12 != null)
      selection2.style(name15, value12);
  }
  function applyTransform(selection2, mark2, { x: x2, y: y2 }, tx = offset, ty = offset) {
    tx += mark2.dx;
    ty += mark2.dy;
    if (x2?.bandwidth)
      tx += x2.bandwidth() / 2;
    if (y2?.bandwidth)
      ty += y2.bandwidth() / 2;
    if (tx || ty)
      selection2.attr("transform", `translate(${tx},${ty})`);
  }
  function impliedString(value12, impliedValue) {
    if ((value12 = string(value12)) !== impliedValue)
      return value12;
  }
  function impliedNumber(value12, impliedValue) {
    if ((value12 = number5(value12)) !== impliedValue)
      return value12;
  }
  var validClassName = /^-?([_a-z]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])([_a-z0-9-]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])*$/;
  function maybeClassName(name15) {
    if (name15 === void 0)
      return `plot-${Math.random().toString(16).slice(2)}`;
    name15 = `${name15}`;
    if (!validClassName.test(name15))
      throw new Error(`invalid class name: ${name15}`);
    return name15;
  }
  function applyInlineStyles(selection2, style2) {
    if (typeof style2 === "string") {
      selection2.property("style", style2);
    } else if (style2 != null) {
      for (const element2 of selection2) {
        Object.assign(element2.style, style2);
      }
    }
  }

  // node_modules/@observablehq/plot/dist/axis.js
  var AxisX = class {
    constructor({ name: name15 = "x", axis: axis2, ticks: ticks2, tickSize = name15 === "fx" ? 0 : 6, tickPadding = tickSize === 0 ? 9 : 3, tickFormat: tickFormat2, fontVariant, grid, label: label5, labelAnchor, labelOffset, line: line2, tickRotate, ariaLabel, ariaDescription } = {}) {
      this.name = name15;
      this.axis = keyword(axis2, "axis", ["top", "bottom"]);
      this.ticks = maybeTicks(ticks2);
      this.tickSize = number5(tickSize);
      this.tickPadding = number5(tickPadding);
      this.tickFormat = maybeTickFormat(tickFormat2);
      this.fontVariant = impliedString(fontVariant, "normal");
      this.grid = boolean(grid);
      this.label = string(label5);
      this.labelAnchor = maybeKeyword(labelAnchor, "labelAnchor", ["center", "left", "right"]);
      this.labelOffset = number5(labelOffset);
      this.line = boolean(line2);
      this.tickRotate = number5(tickRotate);
      this.ariaLabel = string(ariaLabel);
      this.ariaDescription = string(ariaDescription);
    }
    render(index5, { [this.name]: x2, fy }, { width: width8, height: height8, marginTop, marginRight, marginBottom, marginLeft, offsetLeft: offsetLeft2 = 0, facetMarginTop, facetMarginBottom, labelMarginLeft = 0, labelMarginRight = 0 }, context) {
      const { axis: axis2, fontVariant, grid, label: label5, labelAnchor, labelOffset, line: line2, name: name15, tickRotate } = this;
      const offset2 = name15 === "x" ? 0 : axis2 === "top" ? marginTop - facetMarginTop : marginBottom - facetMarginBottom;
      const offsetSign = axis2 === "top" ? -1 : 1;
      const ty = offsetSign * offset2 + (axis2 === "top" ? marginTop : height8 - marginBottom);
      return create2("svg:g", context).call(applyAria, this).attr("transform", `translate(${offsetLeft2},${ty})`).call(createAxis(axis2 === "top" ? axisTop : axisBottom, x2, this)).call(maybeTickRotate, tickRotate).attr("font-size", null).attr("font-family", null).attr("font-variant", fontVariant).call(!line2 ? (g) => g.select(".domain").remove() : () => {
      }).call(!grid ? () => {
      } : fy ? gridFacetX(index5, fy, -ty) : gridX(offsetSign * (marginBottom + marginTop - height8))).call(!label5 ? () => {
      } : (g) => g.append("text").attr("fill", "currentColor").attr("transform", `translate(${labelAnchor === "center" ? (width8 + marginLeft - marginRight) / 2 : labelAnchor === "right" ? width8 + labelMarginRight : -labelMarginLeft},${labelOffset * offsetSign})`).attr("dy", axis2 === "top" ? "1em" : "-0.32em").attr("text-anchor", labelAnchor === "center" ? "middle" : labelAnchor === "right" ? "end" : "start").text(label5)).node();
    }
  };
  var AxisY = class {
    constructor({ name: name15 = "y", axis: axis2, ticks: ticks2, tickSize = name15 === "fy" ? 0 : 6, tickPadding = tickSize === 0 ? 9 : 3, tickFormat: tickFormat2, fontVariant, grid, label: label5, labelAnchor, labelOffset, line: line2, tickRotate, ariaLabel, ariaDescription } = {}) {
      this.name = name15;
      this.axis = keyword(axis2, "axis", ["left", "right"]);
      this.ticks = maybeTicks(ticks2);
      this.tickSize = number5(tickSize);
      this.tickPadding = number5(tickPadding);
      this.tickFormat = maybeTickFormat(tickFormat2);
      this.fontVariant = impliedString(fontVariant, "normal");
      this.grid = boolean(grid);
      this.label = string(label5);
      this.labelAnchor = maybeKeyword(labelAnchor, "labelAnchor", ["center", "top", "bottom"]);
      this.labelOffset = number5(labelOffset);
      this.line = boolean(line2);
      this.tickRotate = number5(tickRotate);
      this.ariaLabel = string(ariaLabel);
      this.ariaDescription = string(ariaDescription);
    }
    render(index5, { [this.name]: y2, fx }, { width: width8, height: height8, marginTop, marginRight, marginBottom, marginLeft, offsetTop: offsetTop2 = 0, facetMarginLeft, facetMarginRight }, context) {
      const { axis: axis2, fontVariant, grid, label: label5, labelAnchor, labelOffset, line: line2, name: name15, tickRotate } = this;
      const offset2 = name15 === "y" ? 0 : axis2 === "left" ? marginLeft - facetMarginLeft : marginRight - facetMarginRight;
      const offsetSign = axis2 === "left" ? -1 : 1;
      const tx = offsetSign * offset2 + (axis2 === "right" ? width8 - marginRight : marginLeft);
      return create2("svg:g", context).call(applyAria, this).attr("transform", `translate(${tx},${offsetTop2})`).call(createAxis(axis2 === "right" ? axisRight : axisLeft, y2, this)).call(maybeTickRotate, tickRotate).attr("font-size", null).attr("font-family", null).attr("font-variant", fontVariant).call(!line2 ? (g) => g.select(".domain").remove() : () => {
      }).call(!grid ? () => {
      } : fx ? gridFacetY(index5, fx, -tx) : gridY(offsetSign * (marginLeft + marginRight - width8))).call(!label5 ? () => {
      } : (g) => g.append("text").attr("fill", "currentColor").attr("font-variant", fontVariant == null ? null : "normal").attr("transform", `translate(${labelOffset * offsetSign},${labelAnchor === "center" ? (height8 + marginTop - marginBottom) / 2 : labelAnchor === "bottom" ? height8 - marginBottom : marginTop})${labelAnchor === "center" ? ` rotate(-90)` : ""}`).attr("dy", labelAnchor === "center" ? axis2 === "right" ? "-0.32em" : "0.75em" : labelAnchor === "bottom" ? "1.4em" : "-1em").attr("text-anchor", labelAnchor === "center" ? "middle" : axis2 === "right" ? "end" : "start").text(label5)).node();
    }
  };
  function applyAria(selection2, { name: name15, label: label5, ariaLabel = `${name15}-axis`, ariaDescription = label5 }) {
    applyAttr(selection2, "aria-label", ariaLabel);
    applyAttr(selection2, "aria-description", ariaDescription);
  }
  function gridX(y2) {
    return (g) => g.selectAll(".tick line").clone(true).attr("stroke-opacity", 0.1).attr("y2", y2);
  }
  function gridY(x2) {
    return (g) => g.selectAll(".tick line").clone(true).attr("stroke-opacity", 0.1).attr("x2", x2);
  }
  function gridFacetX(index5, fy, ty) {
    const dy = fy.bandwidth();
    const domain = fy.domain();
    return (g) => g.selectAll(".tick").append("path").attr("stroke", "currentColor").attr("stroke-opacity", 0.1).attr("d", (index5 ? take2(domain, index5) : domain).map((v) => `M0,${fy(v) + ty}v${dy}`).join(""));
  }
  function gridFacetY(index5, fx, tx) {
    const dx = fx.bandwidth();
    const domain = fx.domain();
    return (g) => g.selectAll(".tick").append("path").attr("stroke", "currentColor").attr("stroke-opacity", 0.1).attr("d", (index5 ? take2(domain, index5) : domain).map((v) => `M${fx(v) + tx},0h${dx}`).join(""));
  }
  function maybeTicks(ticks2) {
    return ticks2 === null ? [] : ticks2;
  }
  function maybeTickFormat(tickFormat2) {
    return tickFormat2 === null ? () => null : tickFormat2;
  }
  function maybeAutoTickFormat(tickFormat2, domain) {
    return tickFormat2 === void 0 ? isTemporal(domain) ? formatIsoDate : string : typeof tickFormat2 === "function" ? tickFormat2 : (typeof tickFormat2 === "string" ? isTemporal(domain) ? utcFormat : format2 : constant2)(tickFormat2);
  }
  function createAxis(axis2, scale, { ticks: ticks2, tickSize, tickPadding, tickFormat: tickFormat2 }) {
    if (!scale.tickFormat) {
      tickFormat2 = maybeAutoTickFormat(tickFormat2, scale.domain());
    }
    return axis2(scale).ticks(Array.isArray(ticks2) ? null : ticks2, typeof tickFormat2 === "function" ? null : tickFormat2).tickFormat(typeof tickFormat2 === "function" ? tickFormat2 : null).tickSizeInner(tickSize).tickSizeOuter(0).tickPadding(tickPadding).tickValues(Array.isArray(ticks2) ? ticks2 : null);
  }
  function maybeTickRotate(g, rotate) {
    if (!(rotate = +rotate))
      return;
    for (const text6 of g.selectAll("text")) {
      const x2 = +text6.getAttribute("x");
      const y2 = +text6.getAttribute("y");
      if (Math.abs(y2) > Math.abs(x2)) {
        const s3 = Math.sign(y2);
        text6.setAttribute("transform", `translate(0, ${y2 + s3 * 4 * Math.cos(rotate * radians2)}) rotate(${rotate})`);
        text6.setAttribute("text-anchor", Math.abs(rotate) < 10 ? "middle" : rotate < 0 ^ s3 > 0 ? "start" : "end");
      } else {
        const s3 = Math.sign(x2);
        text6.setAttribute("transform", `translate(${x2 + s3 * 4 * Math.abs(Math.sin(rotate * radians2))}, 0) rotate(${rotate})`);
        text6.setAttribute("text-anchor", Math.abs(rotate) > 60 ? "middle" : s3 > 0 ? "start" : "end");
      }
      text6.removeAttribute("x");
      text6.removeAttribute("y");
      text6.setAttribute("dy", "0.32em");
    }
  }

  // node_modules/@observablehq/plot/dist/scales/index.js
  var position = Symbol("position");
  var color2 = Symbol("color");
  var radius = Symbol("radius");
  var length5 = Symbol("length");
  var opacity = Symbol("opacity");
  var symbol = Symbol("symbol");
  var registry = /* @__PURE__ */ new Map([
    ["x", position],
    ["y", position],
    ["fx", position],
    ["fy", position],
    ["r", radius],
    ["color", color2],
    ["opacity", opacity],
    ["symbol", symbol],
    ["length", length5]
  ]);

  // node_modules/@observablehq/plot/dist/scales/schemes.js
  var ordinalSchemes = /* @__PURE__ */ new Map([
    ["accent", Accent_default],
    ["category10", category10_default],
    ["dark2", Dark2_default],
    ["paired", Paired_default],
    ["pastel1", Pastel1_default],
    ["pastel2", Pastel2_default],
    ["set1", Set1_default],
    ["set2", Set2_default],
    ["set3", Set3_default],
    ["tableau10", Tableau10_default],
    ["brbg", scheme112(scheme, BrBG_default)],
    ["prgn", scheme112(scheme2, PRGn_default)],
    ["piyg", scheme112(scheme3, PiYG_default)],
    ["puor", scheme112(scheme4, PuOr_default)],
    ["rdbu", scheme112(scheme5, RdBu_default)],
    ["rdgy", scheme112(scheme6, RdGy_default)],
    ["rdylbu", scheme112(scheme7, RdYlBu_default)],
    ["rdylgn", scheme112(scheme8, RdYlGn_default)],
    ["spectral", scheme112(scheme9, Spectral_default)],
    ["burd", scheme11r(scheme5, RdBu_default)],
    ["buylrd", scheme11r(scheme7, RdYlBu_default)],
    ["blues", scheme92(scheme22, Blues_default)],
    ["greens", scheme92(scheme23, Greens_default)],
    ["greys", scheme92(scheme24, Greys_default)],
    ["oranges", scheme92(scheme27, Oranges_default)],
    ["purples", scheme92(scheme25, Purples_default)],
    ["reds", scheme92(scheme26, Reds_default)],
    ["turbo", schemei(turbo_default)],
    ["viridis", schemei(viridis_default)],
    ["magma", schemei(magma)],
    ["inferno", schemei(inferno)],
    ["plasma", schemei(plasma)],
    ["cividis", schemei(cividis_default)],
    ["cubehelix", schemei(cubehelix_default2)],
    ["warm", schemei(warm)],
    ["cool", schemei(cool)],
    ["bugn", scheme92(scheme10, BuGn_default)],
    ["bupu", scheme92(scheme11, BuPu_default)],
    ["gnbu", scheme92(scheme12, GnBu_default)],
    ["orrd", scheme92(scheme13, OrRd_default)],
    ["pubu", scheme92(scheme15, PuBu_default)],
    ["pubugn", scheme92(scheme14, PuBuGn_default)],
    ["purd", scheme92(scheme16, PuRd_default)],
    ["rdpu", scheme92(scheme17, RdPu_default)],
    ["ylgn", scheme92(scheme19, YlGn_default)],
    ["ylgnbu", scheme92(scheme18, YlGnBu_default)],
    ["ylorbr", scheme92(scheme20, YlOrBr_default)],
    ["ylorrd", scheme92(scheme21, YlOrRd_default)],
    ["rainbow", schemeicyclical(rainbow_default)],
    ["sinebow", schemeicyclical(sinebow_default)]
  ]);
  function scheme92(scheme28, interpolate) {
    return ({ length: n }) => {
      if (n === 1)
        return [scheme28[3][1]];
      if (n === 2)
        return [scheme28[3][1], scheme28[3][2]];
      n = Math.max(3, Math.floor(n));
      return n > 9 ? quantize_default(interpolate, n) : scheme28[n];
    };
  }
  function scheme112(scheme28, interpolate) {
    return ({ length: n }) => {
      if (n === 2)
        return [scheme28[3][0], scheme28[3][2]];
      n = Math.max(3, Math.floor(n));
      return n > 11 ? quantize_default(interpolate, n) : scheme28[n];
    };
  }
  function scheme11r(scheme28, interpolate) {
    return ({ length: n }) => {
      if (n === 2)
        return [scheme28[3][2], scheme28[3][0]];
      n = Math.max(3, Math.floor(n));
      return n > 11 ? quantize_default((t) => interpolate(1 - t), n) : scheme28[n].slice().reverse();
    };
  }
  function schemei(interpolate) {
    return ({ length: n }) => quantize_default(interpolate, Math.max(2, Math.floor(n)));
  }
  function schemeicyclical(interpolate) {
    return ({ length: n }) => quantize_default(interpolate, Math.floor(n) + 1).slice(0, -1);
  }
  function ordinalScheme(scheme28) {
    const s3 = `${scheme28}`.toLowerCase();
    if (!ordinalSchemes.has(s3))
      throw new Error(`unknown scheme: ${s3}`);
    return ordinalSchemes.get(s3);
  }
  function ordinalRange(scheme28, length8) {
    const s3 = ordinalScheme(scheme28);
    const r2 = typeof s3 === "function" ? s3({ length: length8 }) : s3;
    return r2.length !== length8 ? r2.slice(0, length8) : r2;
  }
  function maybeBooleanRange(domain, scheme28 = "greys") {
    const range5 = /* @__PURE__ */ new Set();
    const [f, t] = ordinalRange(scheme28, 2);
    for (const value12 of domain) {
      if (value12 == null)
        continue;
      if (value12 === true)
        range5.add(t);
      else if (value12 === false)
        range5.add(f);
      else
        return;
    }
    return [...range5];
  }
  var quantitativeSchemes = /* @__PURE__ */ new Map([
    ["brbg", BrBG_default],
    ["prgn", PRGn_default],
    ["piyg", PiYG_default],
    ["puor", PuOr_default],
    ["rdbu", RdBu_default],
    ["rdgy", RdGy_default],
    ["rdylbu", RdYlBu_default],
    ["rdylgn", RdYlGn_default],
    ["spectral", Spectral_default],
    ["burd", (t) => RdBu_default(1 - t)],
    ["buylrd", (t) => RdYlBu_default(1 - t)],
    ["blues", Blues_default],
    ["greens", Greens_default],
    ["greys", Greys_default],
    ["purples", Purples_default],
    ["reds", Reds_default],
    ["oranges", Oranges_default],
    ["turbo", turbo_default],
    ["viridis", viridis_default],
    ["magma", magma],
    ["inferno", inferno],
    ["plasma", plasma],
    ["cividis", cividis_default],
    ["cubehelix", cubehelix_default2],
    ["warm", warm],
    ["cool", cool],
    ["bugn", BuGn_default],
    ["bupu", BuPu_default],
    ["gnbu", GnBu_default],
    ["orrd", OrRd_default],
    ["pubugn", PuBuGn_default],
    ["pubu", PuBu_default],
    ["purd", PuRd_default],
    ["rdpu", RdPu_default],
    ["ylgnbu", YlGnBu_default],
    ["ylgn", YlGn_default],
    ["ylorbr", YlOrBr_default],
    ["ylorrd", YlOrRd_default],
    ["rainbow", rainbow_default],
    ["sinebow", sinebow_default]
  ]);
  function quantitativeScheme(scheme28) {
    const s3 = `${scheme28}`.toLowerCase();
    if (!quantitativeSchemes.has(s3))
      throw new Error(`unknown scheme: ${s3}`);
    return quantitativeSchemes.get(s3);
  }
  var divergingSchemes = /* @__PURE__ */ new Set([
    "brbg",
    "prgn",
    "piyg",
    "puor",
    "rdbu",
    "rdgy",
    "rdylbu",
    "rdylgn",
    "spectral",
    "burd",
    "buylrd"
  ]);
  function isDivergingScheme(scheme28) {
    return scheme28 != null && divergingSchemes.has(`${scheme28}`.toLowerCase());
  }

  // node_modules/@observablehq/plot/dist/transforms/inset.js
  function maybeInsetX({ inset, insetLeft, insetRight, ...options2 } = {}) {
    [insetLeft, insetRight] = maybeInset(inset, insetLeft, insetRight);
    return { inset, insetLeft, insetRight, ...options2 };
  }
  function maybeInset(inset, inset1, inset2) {
    return inset === void 0 && inset1 === void 0 && inset2 === void 0 ? offset ? [1, 0] : [0.5, 0.5] : [inset1, inset2];
  }

  // node_modules/@observablehq/plot/dist/transforms/interval.js
  function maybeInterval(interval2) {
    if (interval2 == null)
      return;
    if (typeof interval2 === "number") {
      const n = interval2;
      return {
        floor: (d) => n * Math.floor(d / n),
        offset: (d) => d + n,
        range: (lo, hi) => range3(Math.ceil(lo / n), hi / n).map((x2) => n * x2)
      };
    }
    if (typeof interval2.floor !== "function" || typeof interval2.offset !== "function")
      throw new Error("invalid interval; missing floor or offset function");
    return interval2;
  }

  // node_modules/@observablehq/plot/dist/scales/quantitative.js
  var flip2 = (i2) => (t) => i2(1 - t);
  var unit3 = [0, 1];
  var interpolators = /* @__PURE__ */ new Map([
    ["number", number_default],
    ["rgb", rgb_default],
    ["hsl", hsl_default],
    ["hcl", hcl_default],
    ["lab", lab2]
  ]);
  function Interpolator(interpolate) {
    const i2 = `${interpolate}`.toLowerCase();
    if (!interpolators.has(i2))
      throw new Error(`unknown interpolator: ${i2}`);
    return interpolators.get(i2);
  }
  function ScaleQ(key, scale, channels, { type: type2, nice: nice3, clamp, zero: zero4, domain = inferAutoDomain(key, channels), unknown, round: round2, scheme: scheme28, interval: interval2, range: range5 = registry.get(key) === radius ? inferRadialRange(channels, domain) : registry.get(key) === length5 ? inferLengthRange(channels, domain) : registry.get(key) === opacity ? unit3 : void 0, interpolate = registry.get(key) === color2 ? scheme28 == null && range5 !== void 0 ? rgb_default : quantitativeScheme(scheme28 !== void 0 ? scheme28 : type2 === "cyclical" ? "rainbow" : "turbo") : round2 ? round_default : number_default, reverse: reverse4 }) {
    interval2 = maybeInterval(interval2);
    if (type2 === "cyclical" || type2 === "sequential")
      type2 = "linear";
    reverse4 = !!reverse4;
    if (typeof interpolate !== "function") {
      interpolate = Interpolator(interpolate);
    }
    if (interpolate.length === 1) {
      if (reverse4) {
        interpolate = flip2(interpolate);
        reverse4 = false;
      }
      if (range5 === void 0) {
        range5 = Float64Array.from(domain, (_, i2) => i2 / (domain.length - 1));
        if (range5.length === 2)
          range5 = unit3;
      }
      scale.interpolate((range5 === unit3 ? constant2 : interpolatePiecewise)(interpolate));
    } else {
      scale.interpolate(interpolate);
    }
    if (zero4) {
      const [min8, max8] = extent(domain);
      if (min8 > 0 || max8 < 0) {
        domain = slice5(domain);
        if (order(domain) !== Math.sign(min8))
          domain[domain.length - 1] = 0;
        else
          domain[0] = 0;
      }
    }
    if (reverse4)
      domain = reverse2(domain);
    scale.domain(domain).unknown(unknown);
    if (nice3)
      scale.nice(nice3 === true ? void 0 : nice3), domain = scale.domain();
    if (range5 !== void 0)
      scale.range(range5);
    if (clamp)
      scale.clamp(clamp);
    return { type: type2, domain, range: range5, scale, interpolate, interval: interval2 };
  }
  function ScaleLinear(key, channels, options2) {
    return ScaleQ(key, linear2(), channels, options2);
  }
  function ScaleSqrt(key, channels, options2) {
    return ScalePow(key, channels, { ...options2, exponent: 0.5 });
  }
  function ScalePow(key, channels, { exponent = 1, ...options2 }) {
    return ScaleQ(key, pow3().exponent(exponent), channels, { ...options2, type: "pow" });
  }
  function ScaleLog(key, channels, { base: base2 = 10, domain = inferLogDomain(channels), ...options2 }) {
    return ScaleQ(key, log2().base(base2), channels, { ...options2, domain });
  }
  function ScaleSymlog(key, channels, { constant: constant3 = 1, ...options2 }) {
    return ScaleQ(key, symlog().constant(constant3), channels, options2);
  }
  function ScaleQuantile(key, channels, {
    range: range5,
    quantiles = range5 === void 0 ? 5 : (range5 = [...range5]).length,
    n = quantiles,
    scheme: scheme28 = "rdylbu",
    domain = inferQuantileDomain(channels),
    interpolate,
    reverse: reverse4
  }) {
    if (range5 === void 0)
      range5 = interpolate !== void 0 ? quantize_default(interpolate, n) : registry.get(key) === color2 ? ordinalRange(scheme28, n) : void 0;
    return ScaleThreshold(key, channels, {
      domain: quantile2(domain, range5 === void 0 ? { length: n } : range5).quantiles(),
      range: range5,
      reverse: reverse4
    });
  }
  function ScaleQuantize(key, channels, { range: range5, n = range5 === void 0 ? 5 : (range5 = [...range5]).length, scheme: scheme28 = "rdylbu", domain = inferAutoDomain(key, channels), interpolate, reverse: reverse4 }) {
    const [min8, max8] = extent(domain);
    let thresholds;
    if (range5 === void 0) {
      thresholds = ticks(min8, max8, n);
      if (thresholds[0] <= min8)
        thresholds.splice(0, 1);
      if (thresholds[thresholds.length - 1] >= max8)
        thresholds.pop();
      n = thresholds.length + 1;
      range5 = interpolate !== void 0 ? quantize_default(interpolate, n) : registry.get(key) === color2 ? ordinalRange(scheme28, n) : void 0;
    } else {
      thresholds = quantize_default(number_default(min8, max8), n + 1).slice(1, -1);
      if (min8 instanceof Date)
        thresholds = thresholds.map((x2) => new Date(x2));
    }
    if (order(arrayify2(domain)) < 0)
      thresholds.reverse();
    return ScaleThreshold(key, channels, { domain: thresholds, range: range5, reverse: reverse4 });
  }
  function ScaleThreshold(key, channels, {
    domain = [0],
    unknown,
    scheme: scheme28 = "rdylbu",
    interpolate,
    range: range5 = interpolate !== void 0 ? quantize_default(interpolate, domain.length + 1) : registry.get(key) === color2 ? ordinalRange(scheme28, domain.length + 1) : void 0,
    reverse: reverse4
  }) {
    const sign3 = order(arrayify2(domain));
    if (!pairs(domain).every(([a3, b2]) => isOrdered(a3, b2, sign3)))
      throw new Error(`the ${key} scale has a non-monotonic domain`);
    if (reverse4)
      range5 = reverse2(range5);
    return {
      type: "threshold",
      scale: threshold(sign3 < 0 ? reverse2(domain) : domain, range5 === void 0 ? [] : range5).unknown(unknown),
      domain,
      range: range5
    };
  }
  function isOrdered(a3, b2, sign3) {
    const s3 = descending(a3, b2);
    return s3 === 0 || s3 === sign3;
  }
  function ScaleIdentity() {
    return { type: "identity", scale: identity10() };
  }
  function inferDomain(channels, f = finite) {
    return channels.length ? [
      min3(channels, ({ value: value12 }) => value12 === void 0 ? value12 : min3(value12, f)),
      max3(channels, ({ value: value12 }) => value12 === void 0 ? value12 : max3(value12, f))
    ] : [0, 1];
  }
  function inferAutoDomain(key, channels) {
    const type2 = registry.get(key);
    return (type2 === radius || type2 === opacity || type2 === length5 ? inferZeroDomain : inferDomain)(channels);
  }
  function inferZeroDomain(channels) {
    return [0, channels.length ? max3(channels, ({ value: value12 }) => value12 === void 0 ? value12 : max3(value12, finite)) : 1];
  }
  function inferRadialRange(channels, domain) {
    const hint = channels.find(({ radius: radius2 }) => radius2 !== void 0);
    if (hint !== void 0)
      return [0, hint.radius];
    const h25 = quantile(channels, 0.5, ({ value: value12 }) => value12 === void 0 ? NaN : quantile(value12, 0.25, positive));
    const range5 = domain.map((d) => 3 * Math.sqrt(d / h25));
    const k2 = 30 / max3(range5);
    return k2 < 1 ? range5.map((r2) => r2 * k2) : range5;
  }
  function inferLengthRange(channels, domain) {
    const h50 = median(channels, ({ value: value12 }) => value12 === void 0 ? NaN : median(value12, Math.abs));
    const range5 = domain.map((d) => 12 * d / h50);
    const k2 = 60 / max3(range5);
    return k2 < 1 ? range5.map((r2) => r2 * k2) : range5;
  }
  function inferLogDomain(channels) {
    for (const { value: value12 } of channels) {
      if (value12 !== void 0) {
        for (let v of value12) {
          v = +v;
          if (v > 0)
            return inferDomain(channels, positive);
          if (v < 0)
            return inferDomain(channels, negative);
        }
      }
    }
    return [1, 10];
  }
  function inferQuantileDomain(channels) {
    const domain = [];
    for (const { value: value12 } of channels) {
      if (value12 === void 0)
        continue;
      for (const v of value12)
        domain.push(v);
    }
    return domain;
  }
  function interpolatePiecewise(interpolate) {
    return (i2, j) => (t) => interpolate(i2 + t * (j - i2));
  }

  // node_modules/@observablehq/plot/dist/scales/diverging.js
  function ScaleD(key, scale, transform2, channels, { type: type2, nice: nice3, clamp, domain = inferDomain(channels), unknown, pivot = 0, scheme: scheme28, range: range5, symmetric = true, interpolate = registry.get(key) === color2 ? scheme28 == null && range5 !== void 0 ? rgb_default : quantitativeScheme(scheme28 !== void 0 ? scheme28 : "rdbu") : number_default, reverse: reverse4 }) {
    pivot = +pivot;
    let [min8, max8] = domain;
    min8 = Math.min(min8, pivot);
    max8 = Math.max(max8, pivot);
    if (typeof interpolate !== "function") {
      interpolate = Interpolator(interpolate);
    }
    if (range5 !== void 0) {
      interpolate = interpolate.length === 1 ? interpolatePiecewise(interpolate)(...range5) : piecewise(interpolate, range5);
    }
    if (reverse4)
      interpolate = flip2(interpolate);
    if (symmetric) {
      const mid3 = transform2.apply(pivot);
      const mindelta = mid3 - transform2.apply(min8);
      const maxdelta = transform2.apply(max8) - mid3;
      if (mindelta < maxdelta)
        min8 = transform2.invert(mid3 - maxdelta);
      else if (mindelta > maxdelta)
        max8 = transform2.invert(mid3 + mindelta);
    }
    scale.domain([min8, pivot, max8]).unknown(unknown).interpolator(interpolate);
    if (clamp)
      scale.clamp(clamp);
    if (nice3)
      scale.nice(nice3);
    return { type: type2, domain: [min8, max8], pivot, interpolate, scale };
  }
  function ScaleDiverging(key, channels, options2) {
    return ScaleD(key, diverging(), transformIdentity, channels, options2);
  }
  function ScaleDivergingSqrt(key, channels, options2) {
    return ScaleDivergingPow(key, channels, { ...options2, exponent: 0.5 });
  }
  function ScaleDivergingPow(key, channels, { exponent = 1, ...options2 }) {
    return ScaleD(key, divergingPow().exponent(exponent = +exponent), transformPow2(exponent), channels, {
      ...options2,
      type: "diverging-pow"
    });
  }
  function ScaleDivergingLog(key, channels, { base: base2 = 10, pivot = 1, domain = inferDomain(channels, pivot < 0 ? negative : positive), ...options2 }) {
    return ScaleD(key, divergingLog().base(base2 = +base2), transformLog2, channels, { domain, pivot, ...options2 });
  }
  function ScaleDivergingSymlog(key, channels, { constant: constant3 = 1, ...options2 }) {
    return ScaleD(key, divergingSymlog().constant(constant3 = +constant3), transformSymlog2(constant3), channels, options2);
  }
  var transformIdentity = {
    apply(x2) {
      return x2;
    },
    invert(x2) {
      return x2;
    }
  };
  var transformLog2 = {
    apply: Math.log,
    invert: Math.exp
  };
  var transformSqrt2 = {
    apply(x2) {
      return Math.sign(x2) * Math.sqrt(Math.abs(x2));
    },
    invert(x2) {
      return Math.sign(x2) * (x2 * x2);
    }
  };
  function transformPow2(exponent) {
    return exponent === 0.5 ? transformSqrt2 : {
      apply(x2) {
        return Math.sign(x2) * Math.pow(Math.abs(x2), exponent);
      },
      invert(x2) {
        return Math.sign(x2) * Math.pow(Math.abs(x2), 1 / exponent);
      }
    };
  }
  function transformSymlog2(constant3) {
    return {
      apply(x2) {
        return Math.sign(x2) * Math.log1p(Math.abs(x2 / constant3));
      },
      invert(x2) {
        return Math.sign(x2) * Math.expm1(Math.abs(x2)) * constant3;
      }
    };
  }

  // node_modules/@observablehq/plot/dist/scales/temporal.js
  function ScaleT(key, scale, channels, options2) {
    return ScaleQ(key, scale, channels, options2);
  }
  function ScaleTime(key, channels, options2) {
    return ScaleT(key, time(), channels, options2);
  }
  function ScaleUtc(key, channels, options2) {
    return ScaleT(key, utcTime(), channels, options2);
  }

  // node_modules/@observablehq/plot/dist/symbols.js
  var sqrt35 = Math.sqrt(3);
  var sqrt4_3 = 2 / sqrt35;
  var symbolHexagon = {
    draw(context, size5) {
      const rx = Math.sqrt(size5 / Math.PI), ry = rx * sqrt4_3, hy = ry / 2;
      context.moveTo(0, ry);
      context.lineTo(rx, hy);
      context.lineTo(rx, -hy);
      context.lineTo(0, -ry);
      context.lineTo(-rx, -hy);
      context.lineTo(-rx, hy);
      context.closePath();
    }
  };
  var symbols = /* @__PURE__ */ new Map([
    ["asterisk", asterisk_default],
    ["circle", circle_default],
    ["cross", cross_default],
    ["diamond", diamond_default],
    ["diamond2", diamond2_default],
    ["hexagon", symbolHexagon],
    ["plus", plus_default],
    ["square", square_default],
    ["square2", square2_default],
    ["star", star_default],
    ["times", x_default],
    ["triangle", triangle_default],
    ["triangle2", triangle2_default],
    ["wye", wye_default]
  ]);
  function isSymbolObject(value12) {
    return value12 && typeof value12.draw === "function";
  }
  function isSymbol(value12) {
    if (isSymbolObject(value12))
      return true;
    if (typeof value12 !== "string")
      return false;
    return symbols.has(value12.toLowerCase());
  }
  function maybeSymbol(symbol2) {
    if (symbol2 == null || isSymbolObject(symbol2))
      return symbol2;
    const value12 = symbols.get(`${symbol2}`.toLowerCase());
    if (value12)
      return value12;
    throw new Error(`invalid symbol: ${symbol2}`);
  }

  // node_modules/@observablehq/plot/dist/scales/ordinal.js
  var ordinalImplicit = Symbol("ordinal");
  function ScaleO(key, scale, channels, { type: type2, interval: interval2, domain, range: range5, reverse: reverse4, hint }) {
    interval2 = maybeInterval(interval2);
    if (domain === void 0)
      domain = inferDomain2(channels, interval2, key);
    if (type2 === "categorical" || type2 === ordinalImplicit)
      type2 = "ordinal";
    if (reverse4)
      domain = reverse2(domain);
    scale.domain(domain);
    if (range5 !== void 0) {
      if (typeof range5 === "function")
        range5 = range5(domain);
      scale.range(range5);
    }
    return { type: type2, domain, range: range5, scale, hint, interval: interval2 };
  }
  function ScaleOrdinal(key, channels, { type: type2, interval: interval2, domain, range: range5, scheme: scheme28, unknown, ...options2 }) {
    interval2 = maybeInterval(interval2);
    if (domain === void 0)
      domain = inferDomain2(channels, interval2, key);
    let hint;
    if (registry.get(key) === symbol) {
      hint = inferSymbolHint(channels);
      range5 = range5 === void 0 ? inferSymbolRange(hint) : map6(range5, maybeSymbol);
    } else if (registry.get(key) === color2) {
      if (range5 === void 0 && (type2 === "ordinal" || type2 === ordinalImplicit)) {
        range5 = maybeBooleanRange(domain, scheme28);
        if (range5 !== void 0)
          scheme28 = void 0;
      }
      if (scheme28 === void 0 && range5 === void 0) {
        scheme28 = type2 === "ordinal" ? "turbo" : "tableau10";
      }
      if (scheme28 !== void 0) {
        if (range5 !== void 0) {
          const interpolate = quantitativeScheme(scheme28);
          const t03 = range5[0], d = range5[1] - range5[0];
          range5 = ({ length: n }) => quantize_default((t) => interpolate(t03 + d * t), n);
        } else {
          range5 = ordinalScheme(scheme28);
        }
      }
    }
    if (unknown === implicit)
      throw new Error("implicit unknown is not supported");
    return ScaleO(key, ordinal().unknown(unknown), channels, { ...options2, type: type2, domain, range: range5, hint });
  }
  function ScalePoint(key, channels, { align = 0.5, padding = 0.5, ...options2 }) {
    return maybeRound(point().align(align).padding(padding), channels, options2, key);
  }
  function ScaleBand(key, channels, { align = 0.5, padding = 0.1, paddingInner = padding, paddingOuter = key === "fx" || key === "fy" ? 0 : padding, ...options2 }) {
    return maybeRound(band().align(align).paddingInner(paddingInner).paddingOuter(paddingOuter), channels, options2, key);
  }
  function maybeRound(scale, channels, options2, key) {
    let { round: round2 } = options2;
    if (round2 !== void 0)
      scale.round(round2 = !!round2);
    scale = ScaleO(key, scale, channels, options2);
    scale.round = round2;
    return scale;
  }
  function inferDomain2(channels, interval2, key) {
    const values3 = new InternSet();
    for (const { value: value12, domain } of channels) {
      if (domain !== void 0)
        return domain();
      if (value12 === void 0)
        continue;
      for (const v of value12)
        values3.add(v);
    }
    if (interval2 !== void 0) {
      const [min8, max8] = extent(values3).map(interval2.floor, interval2);
      return interval2.range(min8, interval2.offset(max8));
    }
    if (values3.size > 1e4 && registry.get(key) === position)
      throw new Error("implicit ordinal position domain has more than 10,000 values");
    return sort(values3, ascendingDefined2);
  }
  function inferHint(channels, key) {
    let value12;
    for (const { hint } of channels) {
      const candidate = hint?.[key];
      if (candidate === void 0)
        continue;
      if (value12 === void 0)
        value12 = candidate;
      else if (value12 !== candidate)
        return;
    }
    return value12;
  }
  function inferSymbolHint(channels) {
    return {
      fill: inferHint(channels, "fill"),
      stroke: inferHint(channels, "stroke")
    };
  }
  function inferSymbolRange(hint) {
    return isNoneish(hint.fill) ? symbolsStroke : symbolsFill;
  }

  // node_modules/@observablehq/plot/dist/scales.js
  function Scales(channelsByScale, { inset: globalInset = 0, insetTop: globalInsetTop = globalInset, insetRight: globalInsetRight = globalInset, insetBottom: globalInsetBottom = globalInset, insetLeft: globalInsetLeft = globalInset, round: round2, nice: nice3, clamp, zero: zero4, align, padding, ...options2 } = {}) {
    const scales = {};
    for (const [key, channels] of channelsByScale) {
      const scaleOptions = options2[key];
      const scale = Scale(key, channels, {
        round: registry.get(key) === position ? round2 : void 0,
        nice: nice3,
        clamp,
        zero: zero4,
        align,
        padding,
        ...scaleOptions
      });
      if (scale) {
        let {
          percent,
          transform: transform2,
          inset,
          insetTop = inset !== void 0 ? inset : key === "y" ? globalInsetTop : 0,
          insetRight = inset !== void 0 ? inset : key === "x" ? globalInsetRight : 0,
          insetBottom = inset !== void 0 ? inset : key === "y" ? globalInsetBottom : 0,
          insetLeft = inset !== void 0 ? inset : key === "x" ? globalInsetLeft : 0
        } = scaleOptions || {};
        if (transform2 == null)
          transform2 = void 0;
        else if (typeof transform2 !== "function")
          throw new Error("invalid scale transform; not a function");
        scale.percent = !!percent;
        scale.transform = transform2;
        if (key === "x" || key === "fx") {
          scale.insetLeft = +insetLeft;
          scale.insetRight = +insetRight;
        } else if (key === "y" || key === "fy") {
          scale.insetTop = +insetTop;
          scale.insetBottom = +insetBottom;
        }
        scales[key] = scale;
      }
    }
    return scales;
  }
  function ScaleFunctions(scales) {
    return Object.fromEntries(Object.entries(scales).map(([name15, { scale }]) => [name15, scale]));
  }
  function autoScaleRange({ x: x2, y: y2, fx, fy }, dimensions) {
    if (fx)
      autoScaleRangeX(fx, dimensions);
    if (fy)
      autoScaleRangeY(fy, dimensions);
    if (x2)
      autoScaleRangeX(x2, fx ? { width: fx.scale.bandwidth() } : dimensions);
    if (y2)
      autoScaleRangeY(y2, fy ? { height: fy.scale.bandwidth() } : dimensions);
  }
  function autoScaleRangeX(scale, dimensions) {
    if (scale.range === void 0) {
      const { insetLeft, insetRight } = scale;
      const { width: width8, marginLeft = 0, marginRight = 0 } = dimensions;
      const left2 = marginLeft + insetLeft;
      const right2 = width8 - marginRight - insetRight;
      scale.range = [left2, Math.max(left2, right2)];
      if (!isOrdinalScale(scale))
        scale.range = piecewiseRange(scale);
      scale.scale.range(scale.range);
    }
    autoScaleRound(scale);
  }
  function autoScaleRangeY(scale, dimensions) {
    if (scale.range === void 0) {
      const { insetTop, insetBottom } = scale;
      const { height: height8, marginTop = 0, marginBottom = 0 } = dimensions;
      const top4 = marginTop + insetTop;
      const bottom6 = height8 - marginBottom - insetBottom;
      scale.range = [Math.max(top4, bottom6), top4];
      if (!isOrdinalScale(scale))
        scale.range = piecewiseRange(scale);
      else
        scale.range.reverse();
      scale.scale.range(scale.range);
    }
    autoScaleRound(scale);
  }
  function autoScaleRound(scale) {
    if (scale.round === void 0 && isBandScale(scale) && roundError(scale) <= 30) {
      scale.scale.round(true);
    }
  }
  function roundError({ scale }) {
    const n = scale.domain().length;
    const [start3, stop] = scale.range();
    const paddingInner = scale.paddingInner ? scale.paddingInner() : 1;
    const paddingOuter = scale.paddingOuter ? scale.paddingOuter() : scale.padding();
    const m = n - paddingInner;
    const step3 = Math.abs(stop - start3) / Math.max(1, m + paddingOuter * 2);
    return (step3 - Math.floor(step3)) * m;
  }
  function piecewiseRange(scale) {
    const length8 = scale.scale.domain().length + isThresholdScale(scale);
    if (!(length8 > 2))
      return scale.range;
    const [start3, end] = scale.range;
    return Array.from({ length: length8 }, (_, i2) => start3 + i2 / (length8 - 1) * (end - start3));
  }
  function Scale(key, channels = [], options2 = {}) {
    const type2 = inferScaleType(key, channels, options2);
    if (options2.type === void 0 && options2.domain === void 0 && options2.range === void 0 && options2.interval == null && key !== "fx" && key !== "fy" && isOrdinalScale({ type: type2 })) {
      const values3 = channels.map(({ value: value12 }) => value12).filter((value12) => value12 !== void 0);
      if (values3.some(isTemporal))
        warn(`Warning: some data associated with the ${key} scale are dates. Dates are typically associated with a "utc" or "time" scale rather than a "${formatScaleType(type2)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can specify the interval of the ${key} scale (e.g., d3.utcDay), or you can suppress this warning by setting the type of the ${key} scale to "${formatScaleType(type2)}".`);
      else if (values3.some(isTemporalString))
        warn(`Warning: some data associated with the ${key} scale are strings that appear to be dates (e.g., YYYY-MM-DD). If these strings represent dates, you should parse them to Date objects. Dates are typically associated with a "utc" or "time" scale rather than a "${formatScaleType(type2)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can suppress this warning by setting the type of the ${key} scale to "${formatScaleType(type2)}".`);
      else if (values3.some(isNumericString))
        warn(`Warning: some data associated with the ${key} scale are strings that appear to be numbers. If these strings represent numbers, you should parse or coerce them to numbers. Numbers are typically associated with a "linear" scale rather than a "${formatScaleType(type2)}" scale. If you want to treat this data as ordinal, you can specify the interval of the ${key} scale (e.g., 1 for integers), or you can suppress this warning by setting the type of the ${key} scale to "${formatScaleType(type2)}".`);
    }
    options2.type = type2;
    switch (type2) {
      case "diverging":
      case "diverging-sqrt":
      case "diverging-pow":
      case "diverging-log":
      case "diverging-symlog":
      case "cyclical":
      case "sequential":
      case "linear":
      case "sqrt":
      case "threshold":
      case "quantile":
      case "pow":
      case "log":
      case "symlog":
        options2 = coerceType(channels, options2, coerceNumbers);
        break;
      case "identity":
        switch (registry.get(key)) {
          case position:
            options2 = coerceType(channels, options2, coerceNumbers);
            break;
          case symbol:
            options2 = coerceType(channels, options2, coerceSymbols);
            break;
        }
        break;
      case "utc":
      case "time":
        options2 = coerceType(channels, options2, coerceDates);
        break;
    }
    switch (type2) {
      case "diverging":
        return ScaleDiverging(key, channels, options2);
      case "diverging-sqrt":
        return ScaleDivergingSqrt(key, channels, options2);
      case "diverging-pow":
        return ScaleDivergingPow(key, channels, options2);
      case "diverging-log":
        return ScaleDivergingLog(key, channels, options2);
      case "diverging-symlog":
        return ScaleDivergingSymlog(key, channels, options2);
      case "categorical":
      case "ordinal":
      case ordinalImplicit:
        return ScaleOrdinal(key, channels, options2);
      case "cyclical":
      case "sequential":
      case "linear":
        return ScaleLinear(key, channels, options2);
      case "sqrt":
        return ScaleSqrt(key, channels, options2);
      case "threshold":
        return ScaleThreshold(key, channels, options2);
      case "quantile":
        return ScaleQuantile(key, channels, options2);
      case "quantize":
        return ScaleQuantize(key, channels, options2);
      case "pow":
        return ScalePow(key, channels, options2);
      case "log":
        return ScaleLog(key, channels, options2);
      case "symlog":
        return ScaleSymlog(key, channels, options2);
      case "utc":
        return ScaleUtc(key, channels, options2);
      case "time":
        return ScaleTime(key, channels, options2);
      case "point":
        return ScalePoint(key, channels, options2);
      case "band":
        return ScaleBand(key, channels, options2);
      case "identity":
        return registry.get(key) === position ? ScaleIdentity() : { type: "identity" };
      case void 0:
        return;
      default:
        throw new Error(`unknown scale type: ${type2}`);
    }
  }
  function formatScaleType(type2) {
    return typeof type2 === "symbol" ? type2.description : type2;
  }
  function inferScaleType(key, channels, { type: type2, domain, range: range5, scheme: scheme28, pivot }) {
    if (key === "fx" || key === "fy")
      return "band";
    for (const { type: t } of channels) {
      if (t === void 0)
        continue;
      else if (type2 === void 0)
        type2 = t;
      else if (type2 !== t)
        throw new Error(`scale incompatible with channel: ${type2} !== ${t}`);
    }
    if (type2 !== void 0)
      return type2;
    if (domain === void 0 && !channels.some(({ value: value12 }) => value12 !== void 0))
      return;
    const kind2 = registry.get(key);
    if (kind2 === color2 && range5 === void 0 && scheme28 === void 0 && isAll(domain, channels, isColor))
      return "identity";
    if (kind2 === symbol && range5 === void 0 && isAll(domain, channels, isSymbol))
      return "identity";
    if (kind2 === radius)
      return "sqrt";
    if (kind2 === opacity || kind2 === length5)
      return "linear";
    if (kind2 === symbol)
      return "ordinal";
    if ((domain || range5 || []).length > 2)
      return asOrdinalType(kind2);
    if (domain !== void 0) {
      if (isOrdinal(domain))
        return asOrdinalType(kind2);
      if (isTemporal(domain))
        return "utc";
      if (kind2 === color2 && (pivot != null || isDivergingScheme(scheme28)))
        return "diverging";
      return "linear";
    }
    const values3 = channels.map(({ value: value12 }) => value12).filter((value12) => value12 !== void 0);
    if (values3.some(isOrdinal))
      return asOrdinalType(kind2);
    if (values3.some(isTemporal))
      return "utc";
    if (kind2 === color2 && (pivot != null || isDivergingScheme(scheme28)))
      return "diverging";
    return "linear";
  }
  function asOrdinalType(kind2) {
    switch (kind2) {
      case position:
        return "point";
      case color2:
        return ordinalImplicit;
      default:
        return "ordinal";
    }
  }
  function isAll(domain, channels, is) {
    return domain !== void 0 ? isFirst(domain, is) && isEvery(domain, is) : channels.some(({ value: value12 }) => value12 !== void 0 && isFirst(value12, is)) && channels.every(({ value: value12 }) => value12 === void 0 || isEvery(value12, is));
  }
  function isTemporalScale({ type: type2 }) {
    return type2 === "time" || type2 === "utc";
  }
  function isOrdinalScale({ type: type2 }) {
    return type2 === "ordinal" || type2 === "point" || type2 === "band" || type2 === ordinalImplicit;
  }
  function isThresholdScale({ type: type2 }) {
    return type2 === "threshold";
  }
  function isBandScale({ type: type2 }) {
    return type2 === "point" || type2 === "band";
  }
  function scaleOrder({ range: range5, domain = range5 }) {
    return Math.sign(order(domain)) * Math.sign(order(range5));
  }
  function coerceType(channels, { domain, ...options2 }, coerceValues) {
    for (const c4 of channels) {
      if (c4.value !== void 0) {
        c4.value = coerceValues(c4.value);
      }
    }
    return {
      domain: domain === void 0 ? domain : coerceValues(domain),
      ...options2
    };
  }
  function coerceSymbols(values3) {
    return map6(values3, maybeSymbol);
  }
  function coerceDates(values3) {
    return map6(values3, coerceDate);
  }
  function coerceNumbers(values3) {
    return isTypedArray(values3) ? values3 : map6(values3, coerceNumber, Float64Array);
  }
  function coerceNumber(x2) {
    return x2 == null ? NaN : +x2;
  }
  function coerceDate(x2) {
    return x2 instanceof Date && !isNaN(x2) ? x2 : typeof x2 === "string" ? parse(x2) : x2 == null || isNaN(x2 = +x2) ? void 0 : new Date(x2);
  }
  function exposeScales(scaleDescriptors) {
    return (key) => {
      if (!registry.has(key = `${key}`))
        throw new Error(`unknown scale: ${key}`);
      return key in scaleDescriptors ? exposeScale(scaleDescriptors[key]) : void 0;
    };
  }
  function exposeScale({ scale, type: type2, domain, range: range5, label: label5, interpolate, interval: interval2, transform: transform2, percent, pivot }) {
    if (type2 === "identity")
      return { type: "identity", apply: (d) => d, invert: (d) => d };
    const unknown = scale.unknown ? scale.unknown() : void 0;
    return {
      type: type2,
      domain: slice5(domain),
      ...range5 !== void 0 && { range: slice5(range5) },
      ...transform2 !== void 0 && { transform: transform2 },
      ...percent && { percent },
      ...label5 !== void 0 && { label: label5 },
      ...unknown !== void 0 && { unknown },
      ...interval2 !== void 0 && { interval: interval2 },
      ...interpolate !== void 0 && { interpolate },
      ...scale.clamp && { clamp: scale.clamp() },
      ...pivot !== void 0 && { pivot, symmetric: false },
      ...scale.base && { base: scale.base() },
      ...scale.exponent && { exponent: scale.exponent() },
      ...scale.constant && { constant: scale.constant() },
      ...scale.align && { align: scale.align(), round: scale.round() },
      ...scale.padding && (scale.paddingInner ? { paddingInner: scale.paddingInner(), paddingOuter: scale.paddingOuter() } : { padding: scale.padding() }),
      ...scale.bandwidth && { bandwidth: scale.bandwidth(), step: scale.step() },
      apply: (t) => scale(t),
      ...scale.invert && { invert: (t) => scale.invert(t) }
    };
  }

  // node_modules/@observablehq/plot/dist/axes.js
  function Axes({ x: xScale, y: yScale, fx: fxScale, fy: fyScale }, { x: x2 = {}, y: y2 = {}, fx = {}, fy = {}, axis: axis2 = true, grid, line: line2, label: label5, facet: { axis: facetAxis = axis2, grid: facetGrid, label: facetLabel = label5 } = {} } = {}) {
    let { axis: xAxis = axis2 } = x2;
    let { axis: yAxis = axis2 } = y2;
    let { axis: fxAxis = facetAxis } = fx;
    let { axis: fyAxis = facetAxis } = fy;
    if (!xScale)
      xAxis = null;
    else if (xAxis === true)
      xAxis = "bottom";
    if (!yScale)
      yAxis = null;
    else if (yAxis === true)
      yAxis = "left";
    if (!fxScale)
      fxAxis = null;
    else if (fxAxis === true)
      fxAxis = xAxis === "bottom" ? "top" : "bottom";
    if (!fyScale)
      fyAxis = null;
    else if (fyAxis === true)
      fyAxis = yAxis === "left" ? "right" : "left";
    return {
      ...xAxis && { x: new AxisX({ grid, line: line2, label: label5, fontVariant: inferFontVariant(xScale), ...x2, axis: xAxis }) },
      ...yAxis && { y: new AxisY({ grid, line: line2, label: label5, fontVariant: inferFontVariant(yScale), ...y2, axis: yAxis }) },
      ...fxAxis && {
        fx: new AxisX({
          name: "fx",
          grid: facetGrid,
          label: facetLabel,
          fontVariant: inferFontVariant(fxScale),
          ...fx,
          axis: fxAxis
        })
      },
      ...fyAxis && {
        fy: new AxisY({
          name: "fy",
          grid: facetGrid,
          label: facetLabel,
          fontVariant: inferFontVariant(fyScale),
          ...fy,
          axis: fyAxis
        })
      }
    };
  }
  function autoAxisTicks({ x: x2, y: y2, fx, fy }, { x: xAxis, y: yAxis, fx: fxAxis, fy: fyAxis }) {
    if (fxAxis)
      autoAxisTicksK(fx, fxAxis, 80);
    if (fyAxis)
      autoAxisTicksK(fy, fyAxis, 35);
    if (xAxis)
      autoAxisTicksK(x2, xAxis, 80);
    if (yAxis)
      autoAxisTicksK(y2, yAxis, 35);
  }
  function autoAxisTicksK(scale, axis2, k2) {
    if (axis2.ticks === void 0) {
      const interval2 = scale.interval;
      if (interval2 !== void 0) {
        const [min8, max8] = extent(scale.scale.domain());
        axis2.ticks = interval2.range(interval2.floor(min8), interval2.offset(interval2.floor(max8)));
      } else {
        const [min8, max8] = extent(scale.scale.range());
        axis2.ticks = (max8 - min8) / k2;
      }
    }
    if (axis2.tickFormat === void 0 && isOrdinalScale(scale)) {
      axis2.tickFormat = formatDefault;
    }
  }
  function autoScaleLabels(channels, scales, { x: x2, y: y2, fx, fy }, dimensions, options2) {
    if (fx) {
      autoAxisLabelsX(fx, scales.fx, channels.get("fx"));
      if (fx.labelOffset === void 0) {
        const { facetMarginTop, facetMarginBottom } = dimensions;
        fx.labelOffset = fx.axis === "top" ? facetMarginTop : facetMarginBottom;
      }
    }
    if (fy) {
      autoAxisLabelsY(fy, fx, scales.fy, channels.get("fy"));
      if (fy.labelOffset === void 0) {
        const { facetMarginLeft, facetMarginRight } = dimensions;
        fy.labelOffset = fy.axis === "left" ? facetMarginLeft : facetMarginRight;
      }
    }
    if (x2) {
      autoAxisLabelsX(x2, scales.x, channels.get("x"));
      if (x2.labelOffset === void 0) {
        const { marginTop, marginBottom, facetMarginTop, facetMarginBottom } = dimensions;
        x2.labelOffset = x2.axis === "top" ? marginTop - facetMarginTop : marginBottom - facetMarginBottom;
      }
    }
    if (y2) {
      autoAxisLabelsY(y2, x2, scales.y, channels.get("y"));
      if (y2.labelOffset === void 0) {
        const { marginRight, marginLeft, facetMarginLeft, facetMarginRight } = dimensions;
        y2.labelOffset = y2.axis === "left" ? marginLeft - facetMarginLeft : marginRight - facetMarginRight;
      }
    }
    for (const [key, type2] of registry) {
      if (type2 !== position && scales[key]) {
        autoScaleLabel(key, scales[key], channels.get(key), options2[key]);
      }
    }
  }
  function autoAxisLabelsX(axis2, scale, channels) {
    if (axis2.labelAnchor === void 0) {
      axis2.labelAnchor = isOrdinalScale(scale) ? "center" : scaleOrder(scale) < 0 ? "left" : "right";
    }
    if (axis2.label === void 0) {
      axis2.label = inferLabel(channels, scale, axis2, "x");
    }
    scale.label = axis2.label;
  }
  function autoAxisLabelsY(axis2, opposite, scale, channels) {
    if (axis2.labelAnchor === void 0) {
      axis2.labelAnchor = isOrdinalScale(scale) ? "center" : opposite && opposite.axis === "top" ? "bottom" : "top";
    }
    if (axis2.label === void 0) {
      axis2.label = inferLabel(channels, scale, axis2, "y");
    }
    scale.label = axis2.label;
  }
  function autoScaleLabel(key, scale, channels, options2) {
    if (options2) {
      scale.label = options2.label;
    }
    if (scale.label === void 0) {
      scale.label = inferLabel(channels, scale, null, key);
    }
  }
  function inferLabel(channels = [], scale, axis2, key) {
    let candidate;
    for (const { label: label5 } of channels) {
      if (label5 === void 0)
        continue;
      if (candidate === void 0)
        candidate = label5;
      else if (candidate !== label5)
        return;
    }
    if (candidate !== void 0) {
      if (isTemporalScale(scale) && /^(date|time|year)$/i.test(candidate))
        return;
      if (!isOrdinalScale(scale)) {
        if (scale.percent)
          candidate = `${candidate} (%)`;
        if (key === "x" || key === "y") {
          const order2 = scaleOrder(scale);
          if (order2) {
            if (key === "x" || axis2 && axis2.labelAnchor === "center") {
              candidate = key === "x" === order2 < 0 ? `\u2190 ${candidate}` : `${candidate} \u2192`;
            } else {
              candidate = `${order2 < 0 ? "\u2191 " : "\u2193 "}${candidate}`;
            }
          }
        }
      }
    }
    return candidate;
  }
  function inferFontVariant(scale) {
    return isOrdinalScale(scale) && scale.interval === void 0 ? void 0 : "tabular-nums";
  }

  // node_modules/@observablehq/plot/dist/transforms/basic.js
  function basic(options2 = {}, transform2) {
    let { filter: f1, sort: s1, reverse: r1, transform: t13, initializer: i1, ...remainingOptions } = options2;
    if (t13 === void 0) {
      if (f1 != null)
        t13 = filterTransform(f1);
      if (s1 != null && !isDomainSort(s1))
        t13 = composeTransform(t13, sortTransform(s1));
      if (r1)
        t13 = composeTransform(t13, reverseTransform);
    }
    if (transform2 != null && i1 != null)
      throw new Error("transforms cannot be applied after initializers");
    return {
      ...remainingOptions,
      ...(s1 === null || isDomainSort(s1)) && { sort: s1 },
      transform: composeTransform(t13, transform2)
    };
  }
  function initializer(options2 = {}, initializer2) {
    let { filter: f1, sort: s1, reverse: r1, initializer: i1, ...remainingOptions } = options2;
    if (i1 === void 0) {
      if (f1 != null)
        i1 = filterTransform(f1);
      if (s1 != null && !isDomainSort(s1))
        i1 = composeInitializer(i1, sortTransform(s1));
      if (r1)
        i1 = composeInitializer(i1, reverseTransform);
    }
    return {
      ...remainingOptions,
      initializer: composeInitializer(i1, initializer2)
    };
  }
  function composeTransform(t13, t22) {
    if (t13 == null)
      return t22 === null ? void 0 : t22;
    if (t22 == null)
      return t13 === null ? void 0 : t13;
    return function(data, facets) {
      ({ data, facets } = t13.call(this, data, facets));
      return t22.call(this, arrayify2(data), facets);
    };
  }
  function composeInitializer(i1, i2) {
    if (i1 == null)
      return i2 === null ? void 0 : i2;
    if (i2 == null)
      return i1 === null ? void 0 : i1;
    return function(data, facets, channels, scales, dimensions) {
      let c1, d1, f1, c22, d2, f2;
      ({ data: d1 = data, facets: f1 = facets, channels: c1 } = i1.call(this, data, facets, channels, scales, dimensions));
      ({ data: d2 = d1, facets: f2 = f1, channels: c22 } = i2.call(this, d1, f1, { ...channels, ...c1 }, scales, dimensions));
      return { data: d2, facets: f2, channels: { ...c1, ...c22 } };
    };
  }
  function filterTransform(value12) {
    return (data, facets) => {
      const V = valueof(data, value12);
      return { data, facets: facets.map((I) => I.filter((i2) => V[i2])) };
    };
  }
  function reverseTransform(data, facets) {
    return { data, facets: facets.map((I) => I.slice().reverse()) };
  }
  function sortTransform(value12) {
    return (typeof value12 === "function" && value12.length !== 1 ? sortData : sortValue)(value12);
  }
  function sortData(compare4) {
    return (data, facets) => {
      const compareData = (i2, j) => compare4(data[i2], data[j]);
      return { data, facets: facets.map((I) => I.slice().sort(compareData)) };
    };
  }
  function sortValue(value12) {
    let channel, order2;
    ({ channel, value: value12, order: order2 = ascendingDefined2 } = { ...maybeValue(value12) });
    if (typeof order2 !== "function") {
      switch (`${order2}`.toLowerCase()) {
        case "ascending":
          order2 = ascendingDefined2;
          break;
        case "descending":
          order2 = descendingDefined;
          break;
        default:
          throw new Error(`invalid order: ${order2}`);
      }
    }
    return (data, facets, channels) => {
      let V;
      if (channel === void 0) {
        V = valueof(data, value12);
      } else {
        if (channels === void 0)
          throw new Error("channel sort requires an initializer");
        V = channels[channel];
        if (!V)
          return {};
        V = V.value;
      }
      const compareValue = (i2, j) => order2(V[i2], V[j]);
      return { data, facets: facets.map((I) => I.slice().sort(compareValue)) };
    };
  }

  // node_modules/@observablehq/plot/dist/transforms/group.js
  function hasOutput(outputs, ...names) {
    for (const { name: name15 } of outputs) {
      if (names.includes(name15)) {
        return true;
      }
    }
    return false;
  }
  function maybeOutputs(outputs, inputs) {
    const entries = Object.entries(outputs);
    if (inputs.title != null && outputs.title === void 0)
      entries.push(["title", reduceTitle]);
    if (inputs.href != null && outputs.href === void 0)
      entries.push(["href", reduceFirst]);
    return entries.map(([name15, reduce]) => {
      return reduce == null ? { name: name15, initialize() {
      }, scope() {
      }, reduce() {
      } } : maybeOutput(name15, reduce, inputs);
    });
  }
  function maybeOutput(name15, reduce, inputs) {
    const evaluator = maybeEvaluator(name15, reduce, inputs);
    const [output2, setOutput] = column(evaluator.label);
    let O;
    return {
      name: name15,
      output: output2,
      initialize(data) {
        evaluator.initialize(data);
        O = setOutput([]);
      },
      scope(scope2, I) {
        evaluator.scope(scope2, I);
      },
      reduce(I, extent3) {
        O.push(evaluator.reduce(I, extent3));
      }
    };
  }
  function maybeEvaluator(name15, reduce, inputs) {
    const input3 = maybeInput(name15, inputs);
    const reducer2 = maybeReduce(reduce, input3);
    let V, context;
    return {
      label: labelof(reducer2 === reduceCount ? null : input3, reducer2.label),
      initialize(data) {
        V = input3 === void 0 ? data : valueof(data, input3);
        if (reducer2.scope === "data") {
          context = reducer2.reduce(range4(data), V);
        }
      },
      scope(scope2, I) {
        if (reducer2.scope === scope2) {
          context = reducer2.reduce(I, V);
        }
      },
      reduce(I, extent3) {
        return reducer2.scope == null ? reducer2.reduce(I, V, extent3) : reducer2.reduce(I, V, context, extent3);
      }
    };
  }
  function maybeGroup(I, X2) {
    return X2 ? sort(group(I, (i2) => X2[i2]), first) : [[, I]];
  }
  function maybeReduce(reduce, value12) {
    if (reduce && typeof reduce.reduce === "function")
      return reduce;
    if (typeof reduce === "function")
      return reduceFunction(reduce);
    if (/^p\d{2}$/i.test(reduce))
      return reduceAccessor(percentile(reduce));
    switch (`${reduce}`.toLowerCase()) {
      case "first":
        return reduceFirst;
      case "last":
        return reduceLast;
      case "count":
        return reduceCount;
      case "distinct":
        return reduceDistinct;
      case "sum":
        return value12 == null ? reduceCount : reduceSum;
      case "proportion":
        return reduceProportion(value12, "data");
      case "proportion-facet":
        return reduceProportion(value12, "facet");
      case "deviation":
        return reduceAccessor(deviation);
      case "min":
        return reduceAccessor(min3);
      case "min-index":
        return reduceAccessor(minIndex);
      case "max":
        return reduceAccessor(max3);
      case "max-index":
        return reduceAccessor(maxIndex);
      case "mean":
        return reduceAccessor(mean);
      case "median":
        return reduceAccessor(median);
      case "variance":
        return reduceAccessor(variance);
      case "mode":
        return reduceAccessor(mode);
      case "x":
        return reduceX;
      case "x1":
        return reduceX1;
      case "x2":
        return reduceX2;
      case "y":
        return reduceY;
      case "y1":
        return reduceY1;
      case "y2":
        return reduceY2;
    }
    throw new Error(`invalid reduce: ${reduce}`);
  }
  function maybeSubgroup(outputs, inputs) {
    for (const name15 in inputs) {
      const value12 = inputs[name15];
      if (value12 !== void 0 && !outputs.some((o) => o.name === name15)) {
        return value12;
      }
    }
  }
  function maybeSort(facets, sort2, reverse4) {
    if (sort2) {
      const S = sort2.output.transform();
      const compare4 = (i2, j) => ascendingDefined2(S[i2], S[j]);
      facets.forEach((f) => f.sort(compare4));
    }
    if (reverse4) {
      facets.forEach((f) => f.reverse());
    }
  }
  function reduceFunction(f) {
    return {
      reduce(I, X2, extent3) {
        return f(take2(X2, I), extent3);
      }
    };
  }
  function reduceAccessor(f) {
    return {
      reduce(I, X2) {
        return f(I, (i2) => X2[i2]);
      }
    };
  }
  var reduceIdentity = {
    reduce(I, X2) {
      return take2(X2, I);
    }
  };
  var reduceFirst = {
    reduce(I, X2) {
      return X2[I[0]];
    }
  };
  var reduceTitle = {
    reduce(I, X2) {
      const n = 5;
      const groups2 = sort(rollup(I, (V) => V.length, (i2) => X2[i2]), second2);
      const top4 = groups2.slice(-n).reverse();
      if (top4.length < groups2.length) {
        const bottom6 = groups2.slice(0, 1 - n);
        top4[n - 1] = [`\u2026 ${bottom6.length.toLocaleString("en-US")} more`, sum2(bottom6, second2)];
      }
      return top4.map(([key, value12]) => `${key} (${value12.toLocaleString("en-US")})`).join("\n");
    }
  };
  var reduceLast = {
    reduce(I, X2) {
      return X2[I[I.length - 1]];
    }
  };
  var reduceCount = {
    label: "Frequency",
    reduce(I) {
      return I.length;
    }
  };
  var reduceDistinct = {
    label: "Distinct",
    reduce: (I, X2) => {
      const s3 = new InternSet();
      for (const i2 of I)
        s3.add(X2[i2]);
      return s3.size;
    }
  };
  var reduceSum = reduceAccessor(sum2);
  function reduceProportion(value12, scope2) {
    return value12 == null ? { scope: scope2, label: "Frequency", reduce: (I, V, basis2 = 1) => I.length / basis2 } : { scope: scope2, reduce: (I, V, basis2 = 1) => sum2(I, (i2) => V[i2]) / basis2 };
  }
  function mid2(x1, x2) {
    const m = (+x1 + +x2) / 2;
    return x1 instanceof Date ? new Date(m) : m;
  }
  var reduceX = {
    reduce(I, X2, { x1, x2 }) {
      return mid2(x1, x2);
    }
  };
  var reduceY = {
    reduce(I, X2, { y1, y2 }) {
      return mid2(y1, y2);
    }
  };
  var reduceX1 = {
    reduce(I, X2, { x1 }) {
      return x1;
    }
  };
  var reduceX2 = {
    reduce(I, X2, { x2 }) {
      return x2;
    }
  };
  var reduceY1 = {
    reduce(I, X2, { y1 }) {
      return y1;
    }
  };
  var reduceY2 = {
    reduce(I, X2, { y2 }) {
      return y2;
    }
  };

  // node_modules/@observablehq/plot/dist/channel.js
  function Channel(data, { scale, type: type2, value: value12, filter: filter6, hint }) {
    return {
      scale,
      type: type2,
      value: valueof(data, value12),
      label: labelof(value12),
      filter: filter6,
      hint
    };
  }
  function Channels(descriptors, data) {
    return Object.fromEntries(Object.entries(descriptors).map(([name15, channel]) => {
      return [name15, Channel(data, channel)];
    }));
  }
  function valueObject(channels, scales) {
    return Object.fromEntries(Object.entries(channels).map(([name15, { scale: scaleName, value: value12 }]) => {
      const scale = scales[scaleName];
      return [name15, scale === void 0 ? value12 : map6(value12, scale)];
    }));
  }
  function channelDomain(channels, facetChannels, data, options2) {
    const { reverse: defaultReverse, reduce: defaultReduce = true, limit: defaultLimit } = options2;
    for (const x2 in options2) {
      if (!registry.has(x2))
        continue;
      let { value: y2, reverse: reverse4 = defaultReverse, reduce = defaultReduce, limit = defaultLimit } = maybeValue(options2[x2]);
      if (reverse4 === void 0)
        reverse4 = y2 === "width" || y2 === "height";
      if (reduce == null || reduce === false)
        continue;
      const X2 = findScaleChannel(channels, x2) || facetChannels && findScaleChannel(facetChannels, x2);
      if (!X2)
        throw new Error(`missing channel for scale: ${x2}`);
      const XV = X2.value;
      const [lo = 0, hi = Infinity] = isIterable(limit) ? limit : limit < 0 ? [limit] : [0, limit];
      if (y2 == null) {
        X2.domain = () => {
          let domain = XV;
          if (reverse4)
            domain = domain.slice().reverse();
          if (lo !== 0 || hi !== Infinity)
            domain = domain.slice(lo, hi);
          return domain;
        };
      } else {
        const YV = y2 === "data" ? data : y2 === "height" ? difference3(channels, "y1", "y2") : y2 === "width" ? difference3(channels, "x1", "x2") : values2(channels, y2, y2 === "y" ? "y2" : y2 === "x" ? "x2" : void 0);
        const reducer2 = maybeReduce(reduce === true ? "max" : reduce, YV);
        X2.domain = () => {
          let domain = rollup(range4(XV), (I) => reducer2.reduce(I, YV), (i2) => XV[i2]);
          domain = sort(domain, reverse4 ? descendingGroup : ascendingGroup);
          if (lo !== 0 || hi !== Infinity)
            domain = domain.slice(lo, hi);
          return domain.map(first);
        };
      }
    }
  }
  function findScaleChannel(channels, scale) {
    for (const name15 in channels) {
      const channel = channels[name15];
      if (channel.scale === scale)
        return channel;
    }
  }
  function difference3(channels, k1, k2) {
    const X1 = values2(channels, k1);
    const X2 = values2(channels, k2);
    return map6(X2, (x2, i2) => Math.abs(x2 - X1[i2]), Float64Array);
  }
  function values2(channels, name15, alias) {
    let channel = channels[name15];
    if (!channel && alias !== void 0)
      channel = channels[alias];
    if (channel)
      return channel.value;
    throw new Error(`missing channel: ${name15}`);
  }
  function ascendingGroup([ak, av], [bk, bv]) {
    return ascending(av, bv) || ascending(ak, bk);
  }
  function descendingGroup([ak, av], [bk, bv]) {
    return descending(av, bv) || ascending(ak, bk);
  }

  // node_modules/@observablehq/plot/dist/dimensions.js
  function Dimensions(scales, { x: { axis: xAxis } = {}, y: { axis: yAxis } = {}, fx: { axis: fxAxis } = {}, fy: { axis: fyAxis } = {} }, { width: width8 = 640, height: height8 = autoHeight(scales), facet: { margin: facetMargin, marginTop: facetMarginTop = facetMargin !== void 0 ? facetMargin : fxAxis === "top" ? 30 : 0, marginRight: facetMarginRight = facetMargin !== void 0 ? facetMargin : fyAxis === "right" ? 40 : 0, marginBottom: facetMarginBottom = facetMargin !== void 0 ? facetMargin : fxAxis === "bottom" ? 30 : 0, marginLeft: facetMarginLeft = facetMargin !== void 0 ? facetMargin : fyAxis === "left" ? 40 : 0 } = {}, margin, marginTop = margin !== void 0 ? margin : Math.max((xAxis === "top" ? 30 : 0) + facetMarginTop, yAxis || fyAxis ? 20 : 0.5 - offset), marginRight = margin !== void 0 ? margin : Math.max((yAxis === "right" ? 40 : 0) + facetMarginRight, xAxis || fxAxis ? 20 : 0.5 + offset), marginBottom = margin !== void 0 ? margin : Math.max((xAxis === "bottom" ? 30 : 0) + facetMarginBottom, yAxis || fyAxis ? 20 : 0.5 + offset), marginLeft = margin !== void 0 ? margin : Math.max((yAxis === "left" ? 40 : 0) + facetMarginLeft, xAxis || fxAxis ? 20 : 0.5 - offset) } = {}) {
    return {
      width: width8,
      height: height8,
      marginTop,
      marginRight,
      marginBottom,
      marginLeft,
      facetMarginTop,
      facetMarginRight,
      facetMarginBottom,
      facetMarginLeft
    };
  }
  function autoHeight({ y: y2, fy, fx }) {
    const nfy = fy ? fy.scale.domain().length : 1;
    const ny = y2 ? isOrdinalScale(y2) ? y2.scale.domain().length : Math.max(7, 17 / nfy) : 1;
    return !!(y2 || fy) * Math.max(1, Math.min(60, ny * nfy)) * 20 + !!fx * 30 + 60;
  }

  // node_modules/@observablehq/plot/dist/legends/ramp.js
  function legendRamp(color3, options2) {
    let { label: label5 = color3.label, tickSize = 6, width: width8 = 240, height: height8 = 44 + tickSize, marginTop = 18, marginRight = 0, marginBottom = 16 + tickSize, marginLeft = 0, style: style2, ticks: ticks2 = (width8 - marginLeft - marginRight) / 64, tickFormat: tickFormat2, fontVariant = inferFontVariant(color3), round: round2 = true, className: className2 } = options2;
    const context = Context(options2);
    className2 = maybeClassName(className2);
    if (tickFormat2 === null)
      tickFormat2 = () => null;
    const svg = create2("svg", context).attr("class", className2).attr("font-family", "system-ui, sans-serif").attr("font-size", 10).attr("width", width8).attr("height", height8).attr("viewBox", `0 0 ${width8} ${height8}`).call((svg2) => svg2.append("style").text(`
        .${className2} {
          display: block;
          background: white;
          height: auto;
          height: intrinsic;
          max-width: 100%;
          overflow: visible;
        }
        .${className2} text {
          white-space: pre;
        }
      `)).call(applyInlineStyles, style2);
    let tickAdjust = (g) => g.selectAll(".tick line").attr("y1", marginTop + marginBottom - height8);
    let x2;
    const applyRange = round2 ? (x3, range6) => x3.rangeRound(range6) : (x3, range6) => x3.range(range6);
    const { type: type2, domain, range: range5, interpolate, scale, pivot } = color3;
    if (interpolate) {
      const interpolator = range5 === void 0 ? interpolate : piecewise(interpolate.length === 1 ? interpolatePiecewise(interpolate) : interpolate, range5);
      x2 = applyRange(scale.copy(), quantize_default(number_default(marginLeft, width8 - marginRight), Math.min(domain.length + (pivot !== void 0), range5 === void 0 ? Infinity : range5.length)));
      const n = 256;
      const canvas2 = context.document.createElement("canvas");
      canvas2.width = n;
      canvas2.height = 1;
      const context2 = canvas2.getContext("2d");
      for (let i2 = 0, j = n - 1; i2 < n; ++i2) {
        context2.fillStyle = interpolator(i2 / j);
        context2.fillRect(i2, 0, 1, 1);
      }
      svg.append("image").attr("x", marginLeft).attr("y", marginTop).attr("width", width8 - marginLeft - marginRight).attr("height", height8 - marginTop - marginBottom).attr("preserveAspectRatio", "none").attr("xlink:href", canvas2.toDataURL());
    } else if (type2 === "threshold") {
      const thresholds = domain;
      const thresholdFormat = tickFormat2 === void 0 ? (d) => d : typeof tickFormat2 === "string" ? format2(tickFormat2) : tickFormat2;
      x2 = applyRange(linear2().domain([-1, range5.length - 1]), [marginLeft, width8 - marginRight]);
      svg.append("g").selectAll().data(range5).enter().append("rect").attr("x", (d, i2) => x2(i2 - 1)).attr("y", marginTop).attr("width", (d, i2) => x2(i2) - x2(i2 - 1)).attr("height", height8 - marginTop - marginBottom).attr("fill", (d) => d);
      ticks2 = map6(thresholds, (_, i2) => i2);
      tickFormat2 = (i2) => thresholdFormat(thresholds[i2], i2);
    } else {
      x2 = applyRange(band().domain(domain), [marginLeft, width8 - marginRight]);
      svg.append("g").selectAll().data(domain).enter().append("rect").attr("x", x2).attr("y", marginTop).attr("width", Math.max(0, x2.bandwidth() - 1)).attr("height", height8 - marginTop - marginBottom).attr("fill", scale);
      tickAdjust = () => {
      };
    }
    svg.append("g").attr("transform", `translate(0,${height8 - marginBottom})`).call(axisBottom(x2).ticks(Array.isArray(ticks2) ? null : ticks2, typeof tickFormat2 === "string" ? tickFormat2 : void 0).tickFormat(typeof tickFormat2 === "function" ? tickFormat2 : void 0).tickSize(tickSize).tickValues(Array.isArray(ticks2) ? ticks2 : null)).attr("font-size", null).attr("font-family", null).attr("font-variant", impliedString(fontVariant, "normal")).call(tickAdjust).call((g) => g.select(".domain").remove());
    if (label5 !== void 0) {
      svg.append("text").attr("x", marginLeft).attr("y", marginTop - 6).attr("fill", "currentColor").attr("font-weight", "bold").text(label5);
    }
    return svg.node();
  }

  // node_modules/@observablehq/plot/dist/legends/swatches.js
  function maybeScale(scale, key) {
    if (key == null)
      return key;
    const s3 = scale(key);
    if (!s3)
      throw new Error(`scale not found: ${key}`);
    return s3;
  }
  function legendSwatches(color3, options2) {
    if (!isOrdinalScale(color3) && !isThresholdScale(color3))
      throw new Error(`swatches legend requires ordinal or threshold color scale (not ${color3.type})`);
    return legendItems(color3, options2, (selection2, scale) => selection2.append("svg").attr("fill", scale.scale).append("rect").attr("width", "100%").attr("height", "100%"), (className2) => `.${className2}-swatch svg {
        width: var(--swatchWidth);
        height: var(--swatchHeight);
        margin-right: 0.5em;
      }`);
  }
  function legendSymbols(symbol2, { fill = symbol2.hint?.fill !== void 0 ? symbol2.hint.fill : "none", fillOpacity = 1, stroke = symbol2.hint?.stroke !== void 0 ? symbol2.hint.stroke : isNoneish(fill) ? "currentColor" : "none", strokeOpacity = 1, strokeWidth = 1.5, r: r2 = 4.5, ...options2 } = {}, scale) {
    const [vf, cf] = maybeColorChannel(fill);
    const [vs, cs] = maybeColorChannel(stroke);
    const sf = maybeScale(scale, vf);
    const ss = maybeScale(scale, vs);
    const size5 = r2 * r2 * Math.PI;
    fillOpacity = maybeNumberChannel(fillOpacity)[1];
    strokeOpacity = maybeNumberChannel(strokeOpacity)[1];
    strokeWidth = maybeNumberChannel(strokeWidth)[1];
    return legendItems(symbol2, options2, (selection2) => selection2.append("svg").attr("viewBox", "-8 -8 16 16").attr("fill", vf === "color" ? (d) => sf.scale(d) : null).attr("stroke", vs === "color" ? (d) => ss.scale(d) : null).append("path").attr("d", (d) => {
      const p2 = path_default();
      symbol2.scale(d).draw(p2, size5);
      return p2;
    }), (className2) => `.${className2}-swatch > svg {
        width: var(--swatchWidth);
        height: var(--swatchHeight);
        margin-right: 0.5em;
        overflow: visible;
        fill: ${cf};
        fill-opacity: ${fillOpacity};
        stroke: ${cs};
        stroke-width: ${strokeWidth}px;
        stroke-opacity: ${strokeOpacity};
      }`);
  }
  function legendItems(scale, options2 = {}, swatch, swatchStyle) {
    let {
      columns,
      tickFormat: tickFormat2,
      fontVariant = inferFontVariant(scale),
      swatchSize = 15,
      swatchWidth = swatchSize,
      swatchHeight = swatchSize,
      marginLeft = 0,
      className: className2,
      style: style2,
      width: width8
    } = options2;
    const context = Context(options2);
    className2 = maybeClassName(className2);
    tickFormat2 = maybeAutoTickFormat(tickFormat2, scale.domain);
    const swatches = create2("div", context).attr("class", className2).attr("style", `
        --swatchWidth: ${+swatchWidth}px;
        --swatchHeight: ${+swatchHeight}px;
      `);
    let extraStyle;
    if (columns != null) {
      extraStyle = `
      .${className2}-swatch {
        display: flex;
        align-items: center;
        break-inside: avoid;
        padding-bottom: 1px;
      }
      .${className2}-swatch::before {
        flex-shrink: 0;
      }
      .${className2}-label {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    `;
      swatches.style("columns", columns).selectAll().data(scale.domain).enter().append("div").attr("class", `${className2}-swatch`).call(swatch, scale).call((item) => item.append("div").attr("class", `${className2}-label`).attr("title", tickFormat2).text(tickFormat2));
    } else {
      extraStyle = `
      .${className2} {
        display: flex;
        align-items: center;
        min-height: 33px;
        flex-wrap: wrap;
      }
      .${className2}-swatch {
        display: inline-flex;
        align-items: center;
        margin-right: 1em;
      }
    `;
      swatches.selectAll().data(scale.domain).enter().append("span").attr("class", `${className2}-swatch`).call(swatch, scale).append(function() {
        return this.ownerDocument.createTextNode(tickFormat2.apply(this, arguments));
      });
    }
    return swatches.call((div3) => div3.insert("style", "*").text(`
        .${className2} {
          font-family: system-ui, sans-serif;
          font-size: 10px;
          margin-bottom: 0.5em;${marginLeft === void 0 ? "" : `
          margin-left: ${+marginLeft}px;`}${width8 === void 0 ? "" : `
          width: ${width8}px;`}
        }
        ${swatchStyle(className2)}
        ${extraStyle}
      `)).style("font-variant", impliedString(fontVariant, "normal")).call(applyInlineStyles, style2).node();
  }

  // node_modules/@observablehq/plot/dist/legends.js
  var legendRegistry = /* @__PURE__ */ new Map([
    ["symbol", legendSymbols],
    ["color", legendColor],
    ["opacity", legendOpacity]
  ]);
  function exposeLegends(scales, context, defaults3 = {}) {
    return (key, options2) => {
      if (!legendRegistry.has(key))
        throw new Error(`unknown legend type: ${key}`);
      if (!(key in scales))
        return;
      return legendRegistry.get(key)(scales[key], legendOptions(context, defaults3[key], options2), (key2) => scales[key2]);
    };
  }
  function legendOptions(context, { label: label5, ticks: ticks2, tickFormat: tickFormat2 } = {}, options2) {
    return inherit2(options2, context, { label: label5, ticks: ticks2, tickFormat: tickFormat2 });
  }
  function legendColor(color3, { legend: legend2 = true, ...options2 }) {
    if (legend2 === true)
      legend2 = color3.type === "ordinal" ? "swatches" : "ramp";
    if (color3.domain === void 0)
      return;
    switch (`${legend2}`.toLowerCase()) {
      case "swatches":
        return legendSwatches(color3, options2);
      case "ramp":
        return legendRamp(color3, options2);
      default:
        throw new Error(`unknown legend type: ${legend2}`);
    }
  }
  function legendOpacity({ type: type2, interpolate, ...scale }, { legend: legend2 = true, color: color3 = rgb(0, 0, 0), ...options2 }) {
    if (!interpolate)
      throw new Error(`${type2} opacity scales are not supported`);
    if (legend2 === true)
      legend2 = "ramp";
    if (`${legend2}`.toLowerCase() !== "ramp")
      throw new Error(`${legend2} opacity legends are not supported`);
    return legendColor({ type: type2, ...scale, interpolate: interpolateOpacity(color3) }, { legend: legend2, ...options2 });
  }
  function interpolateOpacity(color3) {
    const { r: r2, g, b: b2 } = rgb(color3) || rgb(0, 0, 0);
    return (t) => `rgba(${r2},${g},${b2},${t})`;
  }
  function Legends(scales, context, options2) {
    const legends = [];
    for (const [key, value12] of legendRegistry) {
      const o = options2[key];
      if (o?.legend && key in scales) {
        const legend2 = value12(scales[key], legendOptions(context, scales[key], o), (key2) => scales[key2]);
        if (legend2 != null)
          legends.push(legend2);
      }
    }
    return legends;
  }

  // node_modules/@observablehq/plot/dist/plot.js
  function plot(options2 = {}) {
    const { facet, style: style2, caption: caption2, ariaLabel, ariaDescription } = options2;
    const className2 = maybeClassName(options2.className);
    const marks2 = options2.marks === void 0 ? [] : options2.marks.flat(Infinity).map(markify);
    const stateByMark = /* @__PURE__ */ new Map();
    const channelsByScale = /* @__PURE__ */ new Map();
    for (const key of registry.keys()) {
      if (isScaleOptions(options2[key]) && key !== "fx" && key !== "fy") {
        channelsByScale.set(key, []);
      }
    }
    let facets;
    let facetIndex;
    let facetChannels;
    let facetsIndex;
    let facetsExclude;
    let facetData;
    if (facet !== void 0) {
      const { x: x2, y: y2 } = facet;
      if (x2 != null || y2 != null) {
        facetData = arrayify2(facet.data);
        if (facetData == null)
          throw new Error("missing facet data");
        facetChannels = {};
        if (x2 != null) {
          const fx2 = Channel(facetData, { value: x2, scale: "fx" });
          facetChannels.fx = fx2;
          channelsByScale.set("fx", [fx2]);
        }
        if (y2 != null) {
          const fy2 = Channel(facetData, { value: y2, scale: "fy" });
          facetChannels.fy = fy2;
          channelsByScale.set("fy", [fy2]);
        }
        facetIndex = range4(facetData);
        facets = facetGroups(facetIndex, facetChannels);
        facetsIndex = facets.map(second2);
      }
    }
    for (const mark2 of marks2) {
      if (stateByMark.has(mark2))
        throw new Error("duplicate mark; each mark must be unique");
      const markFacets = facetsIndex === void 0 ? void 0 : mark2.facet === "auto" ? mark2.data === facet.data ? facetsIndex : void 0 : mark2.facet === "include" ? facetsIndex : mark2.facet === "exclude" ? facetsExclude || (facetsExclude = facetsIndex.map((f) => Uint32Array.from(difference2(facetIndex, f)))) : void 0;
      const { data, facets: facets2, channels } = mark2.initialize(markFacets, facetChannels);
      applyScaleTransforms(channels, options2);
      stateByMark.set(mark2, { data, facets: facets2, channels });
      if (facetIndex?.length > 1 && mark2.facet === "auto" && mark2.data !== facet.data && arrayify2(mark2.data)?.length === facetData.length) {
        warn(`Warning: the ${mark2.ariaLabel} mark appears to use faceted data, but isn\u2019t faceted. The mark data has the same length as the facet data and the mark facet option is "auto", but the mark data and facet data are distinct. If this mark should be faceted, set the mark facet option to true; otherwise, suppress this warning by setting the mark facet option to false.`);
      }
    }
    const scaleDescriptors = Scales(addScaleChannels(channelsByScale, stateByMark), options2);
    const scales = ScaleFunctions(scaleDescriptors);
    const axes = Axes(scaleDescriptors, options2);
    const dimensions = Dimensions(scaleDescriptors, axes, options2);
    const context = Context(options2);
    autoScaleRange(scaleDescriptors, dimensions);
    autoAxisTicks(scaleDescriptors, axes);
    const { fx, fy } = scales;
    const fyMargins = fy && { marginTop: 0, marginBottom: 0, height: fy.bandwidth() };
    const fxMargins = fx && { marginRight: 0, marginLeft: 0, width: fx.bandwidth() };
    const subdimensions = { ...dimensions, ...fxMargins, ...fyMargins };
    const newByScale = /* @__PURE__ */ new Set();
    for (const [mark2, state3] of stateByMark) {
      if (mark2.initializer != null) {
        const { facets: facets2, channels } = mark2.initializer(state3.data, state3.facets, state3.channels, scales, subdimensions);
        if (facets2 !== void 0)
          state3.facets = facets2;
        if (channels !== void 0) {
          inferChannelScale(channels, mark2);
          applyScaleTransforms(channels, options2);
          Object.assign(state3.channels, channels);
          for (const { scale } of Object.values(channels))
            if (scale != null)
              newByScale.add(scale);
        }
      }
    }
    if (newByScale.size) {
      for (const key of newByScale)
        if (registry.get(key) === position)
          throw new Error(`initializers cannot declare position scales: ${key}`);
      const newScaleDescriptors = Scales(addScaleChannels(/* @__PURE__ */ new Map(), stateByMark, (key) => newByScale.has(key)), options2);
      const newScales = ScaleFunctions(newScaleDescriptors);
      Object.assign(scaleDescriptors, newScaleDescriptors);
      Object.assign(scales, newScales);
    }
    autoScaleLabels(channelsByScale, scaleDescriptors, axes, dimensions, options2);
    for (const state3 of stateByMark.values()) {
      state3.values = valueObject(state3.channels, scales);
    }
    const { width: width8, height: height8 } = dimensions;
    const svg = create2("svg", context).attr("class", className2).attr("fill", "currentColor").attr("font-family", "system-ui, sans-serif").attr("font-size", 10).attr("text-anchor", "middle").attr("width", width8).attr("height", height8).attr("viewBox", `0 0 ${width8} ${height8}`).attr("aria-label", ariaLabel).attr("aria-description", ariaDescription).call((svg2) => svg2.append("style").text(`
        .${className2} {
          display: block;
          background: white;
          height: auto;
          height: intrinsic;
          max-width: 100%;
        }
        .${className2} text,
        .${className2} tspan {
          white-space: pre;
        }
      `)).call(applyInlineStyles, style2).node();
    const axisY = axes[facets !== void 0 && fy ? "fy" : "y"];
    const axisX = axes[facets !== void 0 && fx ? "fx" : "x"];
    if (axisY)
      svg.appendChild(axisY.render(null, scales, dimensions, context));
    if (axisX)
      svg.appendChild(axisX.render(null, scales, dimensions, context));
    if (facets !== void 0) {
      const fyDomain = fy && fy.domain();
      const fxDomain = fx && fx.domain();
      const indexByFacet = facetMap(facetChannels);
      facets.forEach(([key], i2) => indexByFacet.set(key, i2));
      const selection2 = select_default2(svg);
      if (fy && axes.y) {
        const axis1 = axes.y, axis2 = nolabel(axis1);
        const j = axis1.labelAnchor === "bottom" ? fyDomain.length - 1 : axis1.labelAnchor === "center" ? fyDomain.length >> 1 : 0;
        selection2.selectAll().data(fyDomain).enter().append((ky2, i2) => (i2 === j ? axis1 : axis2).render(fx && where(fxDomain, (kx2) => indexByFacet.has([kx2, ky2])), scales, { ...dimensions, ...fyMargins, offsetTop: fy(ky2) }, context));
      }
      if (fx && axes.x) {
        const axis1 = axes.x, axis2 = nolabel(axis1);
        const j = axis1.labelAnchor === "right" ? fxDomain.length - 1 : axis1.labelAnchor === "center" ? fxDomain.length >> 1 : 0;
        const { marginLeft, marginRight } = dimensions;
        selection2.selectAll().data(fxDomain).enter().append((kx2, i2) => (i2 === j ? axis1 : axis2).render(fy && where(fyDomain, (ky2) => indexByFacet.has([kx2, ky2])), scales, {
          ...dimensions,
          ...fxMargins,
          labelMarginLeft: marginLeft,
          labelMarginRight: marginRight,
          offsetLeft: fx(kx2)
        }, context));
      }
      selection2.selectAll().data(facetKeys(scales).filter(indexByFacet.has, indexByFacet)).enter().append("g").attr("aria-label", "facet").attr("transform", facetTranslate(fx, fy)).each(function(key) {
        const j = indexByFacet.get(key);
        for (const [mark2, { channels, values: values3, facets: facets2 }] of stateByMark) {
          const facet2 = facets2 ? mark2.filter(facets2[j] ?? facets2[0], channels, values3) : null;
          const node = mark2.render(facet2, scales, values3, subdimensions, context);
          if (node != null)
            this.appendChild(node);
        }
      });
    } else {
      for (const [mark2, { channels, values: values3, facets: facets2 }] of stateByMark) {
        const facet2 = facets2 ? mark2.filter(facets2[0], channels, values3) : null;
        const node = mark2.render(facet2, scales, values3, dimensions, context);
        if (node != null)
          svg.appendChild(node);
      }
    }
    let figure2 = svg;
    const legends = Legends(scaleDescriptors, context, options2);
    if (caption2 != null || legends.length > 0) {
      const { document: document3 } = context;
      figure2 = document3.createElement("figure");
      figure2.style.maxWidth = "initial";
      for (const legend2 of legends)
        figure2.appendChild(legend2);
      figure2.appendChild(svg);
      if (caption2 != null) {
        const figcaption2 = document3.createElement("figcaption");
        figcaption2.appendChild(caption2 instanceof Node ? caption2 : document3.createTextNode(caption2));
        figure2.appendChild(figcaption2);
      }
    }
    figure2.scale = exposeScales(scaleDescriptors);
    figure2.legend = exposeLegends(scaleDescriptors, context, options2);
    const w = consumeWarnings();
    if (w > 0) {
      select_default2(svg).append("text").attr("x", width8).attr("y", 20).attr("dy", "-1em").attr("text-anchor", "end").attr("font-family", "initial").text("\u26A0\uFE0F").append("title").text(`${w.toLocaleString("en-US")} warning${w === 1 ? "" : "s"}. Please check the console.`);
    }
    return figure2;
  }
  var Mark = class {
    constructor(data, channels = {}, options2 = {}, defaults3) {
      const { facet = "auto", sort: sort2, dx, dy, clip, channels: extraChannels } = options2;
      this.data = data;
      this.sort = isDomainSort(sort2) ? sort2 : null;
      this.initializer = initializer(options2).initializer;
      this.transform = this.initializer ? options2.transform : basic(options2).transform;
      this.facet = facet == null || facet === false ? null : keyword(facet === true ? "include" : facet, "facet", ["auto", "include", "exclude"]);
      channels = maybeNamed(channels);
      if (extraChannels !== void 0)
        channels = { ...maybeNamed(extraChannels), ...channels };
      if (defaults3 !== void 0)
        channels = { ...styles(this, options2, defaults3), ...channels };
      this.channels = Object.fromEntries(Object.entries(channels).filter(([name15, { value: value12, optional }]) => {
        if (value12 != null)
          return true;
        if (optional)
          return false;
        throw new Error(`missing channel value: ${name15}`);
      }));
      this.dx = +dx || 0;
      this.dy = +dy || 0;
      this.clip = maybeClip(clip);
    }
    initialize(facets, facetChannels) {
      let data = arrayify2(this.data);
      if (facets === void 0 && data != null)
        facets = [range4(data)];
      if (this.transform != null)
        ({ facets, data } = this.transform(data, facets)), data = arrayify2(data);
      const channels = Channels(this.channels, data);
      if (this.sort != null)
        channelDomain(channels, facetChannels, data, this.sort);
      return { data, facets, channels };
    }
    filter(index5, channels, values3) {
      for (const name15 in channels) {
        const { filter: filter6 = defined } = channels[name15];
        if (filter6 !== null) {
          const value12 = values3[name15];
          index5 = index5.filter((i2) => filter6(value12[i2]));
        }
      }
      return index5;
    }
    plot({ marks: marks2 = [], ...options2 } = {}) {
      return plot({ ...options2, marks: [...marks2, this] });
    }
  };
  function markify(mark2) {
    return typeof mark2?.render === "function" ? mark2 : new Render(mark2);
  }
  var Render = class extends Mark {
    constructor(render) {
      super();
      if (render == null)
        return;
      if (typeof render !== "function")
        throw new TypeError("invalid mark; missing render function");
      this.render = render;
    }
    render() {
    }
  };
  function applyScaleTransforms(channels, options2) {
    for (const name15 in channels) {
      const channel = channels[name15];
      const { scale } = channel;
      if (scale != null) {
        const { percent, interval: interval2, transform: transform2 = percent ? (x2) => x2 * 100 : maybeInterval(interval2)?.floor } = options2[scale] || {};
        if (transform2 != null)
          channel.value = map6(channel.value, transform2);
      }
    }
    return channels;
  }
  function inferChannelScale(channels) {
    for (const name15 in channels) {
      const channel = channels[name15];
      let { scale } = channel;
      if (scale === true) {
        switch (name15) {
          case "fill":
          case "stroke":
            scale = "color";
            break;
          case "fillOpacity":
          case "strokeOpacity":
          case "opacity":
            scale = "opacity";
            break;
          default:
            scale = registry.has(name15) ? name15 : null;
            break;
        }
        channel.scale = scale;
      }
    }
  }
  function addScaleChannels(channelsByScale, stateByMark, filter6 = yes) {
    for (const { channels } of stateByMark.values()) {
      for (const name15 in channels) {
        const channel = channels[name15];
        const { scale } = channel;
        if (scale != null && filter6(scale)) {
          const channels2 = channelsByScale.get(scale);
          if (channels2 !== void 0)
            channels2.push(channel);
          else
            channelsByScale.set(scale, [channel]);
        }
      }
    }
    return channelsByScale;
  }
  function nolabel(axis2) {
    return axis2 === void 0 || axis2.label === void 0 ? axis2 : Object.assign(Object.create(axis2), { label: void 0 });
  }
  function facetKeys({ fx, fy }) {
    return fx && fy ? cross(fx.domain(), fy.domain()) : fx ? fx.domain() : fy.domain();
  }
  function facetGroups(index5, { fx, fy }) {
    return fx && fy ? facetGroup2(index5, fx, fy) : fx ? facetGroup1(index5, fx) : facetGroup1(index5, fy);
  }
  function facetGroup1(index5, { value: F }) {
    return groups(index5, (i2) => F[i2]);
  }
  function facetGroup2(index5, { value: FX }, { value: FY }) {
    return groups(index5, (i2) => FX[i2], (i2) => FY[i2]).flatMap(([x2, xgroup]) => xgroup.map(([y2, ygroup]) => [[x2, y2], ygroup]));
  }
  function facetTranslate(fx, fy) {
    return fx && fy ? ([kx2, ky2]) => `translate(${fx(kx2)},${fy(ky2)})` : fx ? (kx2) => `translate(${fx(kx2)},0)` : (ky2) => `translate(0,${fy(ky2)})`;
  }
  function facetMap({ fx, fy }) {
    return new (fx && fy ? FacetMap2 : FacetMap)();
  }
  var FacetMap = class {
    constructor() {
      this._ = new InternMap();
    }
    has(key) {
      return this._.has(key);
    }
    get(key) {
      return this._.get(key);
    }
    set(key, value12) {
      return this._.set(key, value12), this;
    }
  };
  var FacetMap2 = class extends FacetMap {
    has([key1, key2]) {
      const map14 = super.get(key1);
      return map14 ? map14.has(key2) : false;
    }
    get([key1, key2]) {
      const map14 = super.get(key1);
      return map14 && map14.get(key2);
    }
    set([key1, key2], value12) {
      const map14 = super.get(key1);
      if (map14)
        map14.set(key2, value12);
      else
        super.set(key1, new InternMap([[key2, value12]]));
      return this;
    }
  };

  // node_modules/@observablehq/plot/dist/curve.js
  var curves = /* @__PURE__ */ new Map([
    ["basis", basis_default2],
    ["basis-closed", basisClosed_default2],
    ["basis-open", basisOpen_default],
    ["bundle", bundle_default],
    ["bump-x", bumpX],
    ["bump-y", bumpY],
    ["cardinal", cardinal_default],
    ["cardinal-closed", cardinalClosed_default],
    ["cardinal-open", cardinalOpen_default],
    ["catmull-rom", catmullRom_default],
    ["catmull-rom-closed", catmullRomClosed_default],
    ["catmull-rom-open", catmullRomOpen_default],
    ["linear", linear_default],
    ["linear-closed", linearClosed_default],
    ["monotone-x", monotoneX],
    ["monotone-y", monotoneY],
    ["natural", natural_default],
    ["step", step_default],
    ["step-after", stepAfter],
    ["step-before", stepBefore]
  ]);
  function Curve(curve = linear_default, tension) {
    if (typeof curve === "function")
      return curve;
    const c4 = curves.get(`${curve}`.toLowerCase());
    if (!c4)
      throw new Error(`unknown curve: ${curve}`);
    if (tension !== void 0) {
      if ("beta" in c4) {
        return c4.beta(tension);
      } else if ("tension" in c4) {
        return c4.tension(tension);
      } else if ("alpha" in c4) {
        return c4.alpha(tension);
      }
    }
    return c4;
  }

  // node_modules/@observablehq/plot/dist/transforms/bin.js
  function binX(outputs = { y: "count" }, options2 = {}) {
    [outputs, options2] = mergeOptions(outputs, options2);
    const { x: x2, y: y2 } = options2;
    return binn(maybeBinValue(x2, options2, identity12), null, null, y2, outputs, maybeInsetX(options2));
  }
  function maybeDenseInterval(bin2, k2, options2 = {}) {
    return options2?.interval == null ? options2 : bin2({ [k2]: options2?.reduce === void 0 ? reduceFirst : options2.reduce, filter: null }, options2);
  }
  function maybeDenseIntervalX(options2) {
    return maybeDenseInterval(binX, "y", options2);
  }
  function binn(bx, by, gx, gy, {
    data: reduceData = reduceIdentity,
    filter: filter6 = reduceCount,
    sort: sort2,
    reverse: reverse4,
    ...outputs
  } = {}, inputs = {}) {
    bx = maybeBin(bx);
    by = maybeBin(by);
    outputs = maybeOutputs(outputs, inputs);
    reduceData = maybeReduce(reduceData, identity12);
    sort2 = sort2 == null ? void 0 : maybeOutput("sort", sort2, inputs);
    filter6 = filter6 == null ? void 0 : maybeEvaluator("filter", filter6, inputs);
    if (gx != null && hasOutput(outputs, "x", "x1", "x2"))
      gx = null;
    if (gy != null && hasOutput(outputs, "y", "y1", "y2"))
      gy = null;
    const [BX1, setBX1] = maybeColumn(bx);
    const [BX2, setBX2] = maybeColumn(bx);
    const [BY1, setBY1] = maybeColumn(by);
    const [BY2, setBY2] = maybeColumn(by);
    const [k2, gk] = gx != null ? [gx, "x"] : gy != null ? [gy, "y"] : [];
    const [GK, setGK] = maybeColumn(k2);
    const {
      x: x2,
      y: y2,
      z,
      fill,
      stroke,
      x1,
      x2: x22,
      y1,
      y2: y22,
      domain,
      cumulative,
      thresholds,
      interval: interval2,
      ...options2
    } = inputs;
    const [GZ, setGZ] = maybeColumn(z);
    const [vfill] = maybeColorChannel(fill);
    const [vstroke] = maybeColorChannel(stroke);
    const [GF, setGF] = maybeColumn(vfill);
    const [GS, setGS] = maybeColumn(vstroke);
    return {
      ..."z" in inputs && { z: GZ || z },
      ..."fill" in inputs && { fill: GF || fill },
      ..."stroke" in inputs && { stroke: GS || stroke },
      ...basic(options2, (data, facets) => {
        const K2 = valueof(data, k2);
        const Z = valueof(data, z);
        const F = valueof(data, vfill);
        const S = valueof(data, vstroke);
        const G = maybeSubgroup(outputs, { z: Z, fill: F, stroke: S });
        const groupFacets = [];
        const groupData = [];
        const GK2 = K2 && setGK([]);
        const GZ2 = Z && setGZ([]);
        const GF2 = F && setGF([]);
        const GS2 = S && setGS([]);
        const BX = bx ? bx(data) : [[, , (I) => I]];
        const BY = by ? by(data) : [[, , (I) => I]];
        const BX12 = bx && setBX1([]);
        const BX22 = bx && setBX2([]);
        const BY12 = by && setBY1([]);
        const BY22 = by && setBY2([]);
        let i2 = 0;
        for (const o of outputs)
          o.initialize(data);
        if (sort2)
          sort2.initialize(data);
        if (filter6)
          filter6.initialize(data);
        for (const facet of facets) {
          const groupFacet = [];
          for (const o of outputs)
            o.scope("facet", facet);
          if (sort2)
            sort2.scope("facet", facet);
          if (filter6)
            filter6.scope("facet", facet);
          for (const [f, I] of maybeGroup(facet, G)) {
            for (const [k3, g] of maybeGroup(I, K2)) {
              for (const [x12, x23, fx] of BX) {
                const bb = fx(g);
                for (const [y12, y23, fy] of BY) {
                  const extent3 = { x1: x12, x2: x23, y1: y12, y2: y23 };
                  const b2 = fy(bb);
                  if (filter6 && !filter6.reduce(b2, extent3))
                    continue;
                  groupFacet.push(i2++);
                  groupData.push(reduceData.reduce(b2, data, extent3));
                  if (K2)
                    GK2.push(k3);
                  if (Z)
                    GZ2.push(G === Z ? f : Z[b2[0]]);
                  if (F)
                    GF2.push(G === F ? f : F[b2[0]]);
                  if (S)
                    GS2.push(G === S ? f : S[b2[0]]);
                  if (BX12)
                    BX12.push(x12), BX22.push(x23);
                  if (BY12)
                    BY12.push(y12), BY22.push(y23);
                  for (const o of outputs)
                    o.reduce(b2, extent3);
                  if (sort2)
                    sort2.reduce(b2);
                }
              }
            }
          }
          groupFacets.push(groupFacet);
        }
        maybeSort(groupFacets, sort2, reverse4);
        return { data: groupData, facets: groupFacets };
      }),
      ...!hasOutput(outputs, "x") && (BX1 ? { x1: BX1, x2: BX2, x: mid(BX1, BX2) } : { x: x2, x1, x2: x22 }),
      ...!hasOutput(outputs, "y") && (BY1 ? { y1: BY1, y2: BY2, y: mid(BY1, BY2) } : { y: y2, y1, y2: y22 }),
      ...GK && { [gk]: GK },
      ...Object.fromEntries(outputs.map(({ name: name15, output: output2 }) => [name15, output2]))
    };
  }
  function mergeOptions({ cumulative, domain, thresholds, interval: interval2, ...outputs }, options2) {
    return [outputs, { cumulative, domain, thresholds, interval: interval2, ...options2 }];
  }
  function maybeBinValue(value12, { cumulative, domain, thresholds, interval: interval2 }, defaultValue4) {
    value12 = { ...maybeValue(value12) };
    if (value12.domain === void 0)
      value12.domain = domain;
    if (value12.cumulative === void 0)
      value12.cumulative = cumulative;
    if (value12.thresholds === void 0)
      value12.thresholds = thresholds;
    if (value12.interval === void 0)
      value12.interval = interval2;
    if (value12.value === void 0)
      value12.value = defaultValue4;
    value12.thresholds = maybeThresholds(value12.thresholds, value12.interval);
    return value12;
  }
  function maybeBin(options2) {
    if (options2 == null)
      return;
    const { value: value12, cumulative, domain = extent, thresholds } = options2;
    const bin2 = (data) => {
      let V = valueof(data, value12, Array);
      const bin3 = bin().value((i2) => V[i2]);
      if (isTemporal(V) || isTimeThresholds(thresholds)) {
        V = V.map(coerceDate);
        let [min8, max8] = typeof domain === "function" ? domain(V) : domain;
        let t = typeof thresholds === "function" && !isInterval(thresholds) ? thresholds(V, min8, max8) : thresholds;
        if (typeof t === "number")
          t = utcTickInterval(min8, max8, t);
        if (isInterval(t)) {
          if (domain === extent) {
            min8 = t.floor(min8);
            max8 = t.ceil(new Date(+max8 + 1));
          }
          t = t.range(min8, max8);
        }
        bin3.thresholds(t).domain([min8, max8]);
      } else {
        V = V.map(coerceNumber);
        let d = domain;
        let t = thresholds;
        if (isInterval(t)) {
          let [min8, max8] = typeof d === "function" ? d(V) : d;
          if (d === extent) {
            min8 = t.floor(min8);
            max8 = t.offset(t.floor(max8));
            d = [min8, max8];
          }
          t = t.range(min8, max8);
        }
        bin3.thresholds(t).domain(d);
      }
      let bins = bin3(range4(data)).map(binset);
      if (cumulative)
        bins = (cumulative < 0 ? bins.reverse() : bins).map(bincumset);
      return bins.map(binfilter);
    };
    bin2.label = labelof(value12);
    return bin2;
  }
  function maybeThresholds(thresholds, interval2) {
    if (thresholds === void 0) {
      return interval2 === void 0 ? thresholdAuto : maybeRangeInterval(interval2);
    }
    if (typeof thresholds === "string") {
      switch (thresholds.toLowerCase()) {
        case "freedman-diaconis":
          return thresholdFreedmanDiaconis;
        case "scott":
          return thresholdScott;
        case "sturges":
          return thresholdSturges;
        case "auto":
          return thresholdAuto;
      }
      throw new Error(`invalid thresholds: ${thresholds}`);
    }
    return thresholds;
  }
  function maybeRangeInterval(interval2) {
    interval2 = maybeInterval(interval2);
    if (!isInterval(interval2))
      throw new Error(`invalid interval: ${interval2}`);
    return interval2;
  }
  function thresholdAuto(values3, min8, max8) {
    return Math.min(200, thresholdScott(values3, min8, max8));
  }
  function isTimeThresholds(t) {
    return isTimeInterval(t) || isIterable(t) && isTemporal(t);
  }
  function isTimeInterval(t) {
    return isInterval(t) && typeof t === "function" && t() instanceof Date;
  }
  function isInterval(t) {
    return t ? typeof t.range === "function" : false;
  }
  function binset(bin2) {
    return [bin2, new Set(bin2)];
  }
  function bincumset([bin2], j, bins) {
    return [
      bin2,
      {
        get size() {
          for (let k2 = 0; k2 <= j; ++k2) {
            if (bins[k2][1].size) {
              return 1;
            }
          }
          return 0;
        },
        has(i2) {
          for (let k2 = 0; k2 <= j; ++k2) {
            if (bins[k2][1].has(i2)) {
              return true;
            }
          }
          return false;
        }
      }
    ];
  }
  function binfilter([{ x0, x1 }, set3]) {
    return [x0, x1, set3.size ? (I) => I.filter(set3.has, set3) : binempty];
  }
  function binempty() {
    return new Uint32Array(0);
  }

  // node_modules/@observablehq/plot/dist/transforms/identity.js
  function maybeIdentityY(options2 = {}) {
    const { y: y2, y1, y2: y22 } = options2;
    return y1 === void 0 && y22 === void 0 && y2 === void 0 ? { ...options2, y: identity12 } : options2;
  }

  // node_modules/@observablehq/plot/dist/transforms/stack.js
  function stackY(stack2 = {}, options2 = {}) {
    if (arguments.length === 1)
      [stack2, options2] = mergeOptions2(stack2);
    const { x1, x: x2 = x1, y: y2, ...rest } = options2;
    const [transform2, X2, y1, y22] = stackAlias(x2, y2, "y", stack2, rest);
    return { ...transform2, x1, x: X2, y1, y2: y22, y: mid(y1, y22) };
  }
  function maybeStackY({ y: y2, y1, y2: y22, ...options2 } = {}) {
    if (y1 === void 0 && y22 === void 0)
      return stackY({ y: y2, ...options2 });
    [y1, y22] = maybeZero(y2, y1, y22);
    return { ...options2, y1, y2: y22 };
  }
  function mergeOptions2(options2) {
    const { offset: offset2, order: order2, reverse: reverse4, ...rest } = options2;
    return [{ offset: offset2, order: order2, reverse: reverse4 }, rest];
  }
  function stack(x2, y2 = one3, ky2, { offset: offset2, order: order2, reverse: reverse4 }, options2) {
    const z = maybeZ(options2);
    const [X2, setX] = maybeColumn(x2);
    const [Y1, setY1] = column(y2);
    const [Y2, setY2] = column(y2);
    offset2 = maybeOffset(offset2);
    order2 = maybeOrder(order2, offset2, ky2);
    return [
      basic(options2, (data, facets) => {
        const X3 = x2 == null ? void 0 : setX(valueof(data, x2));
        const Y3 = valueof(data, y2, Float64Array);
        const Z = valueof(data, z);
        const O = order2 && order2(data, X3, Y3, Z);
        const n = data.length;
        const Y12 = setY1(new Float64Array(n));
        const Y22 = setY2(new Float64Array(n));
        const facetstacks = [];
        for (const facet of facets) {
          const stacks = X3 ? Array.from(group(facet, (i2) => X3[i2]).values()) : [facet];
          if (O)
            applyOrder(stacks, O);
          for (const stack2 of stacks) {
            let yn = 0, yp = 0;
            if (reverse4)
              stack2.reverse();
            for (const i2 of stack2) {
              const y3 = Y3[i2];
              if (y3 < 0)
                yn = Y22[i2] = (Y12[i2] = yn) + y3;
              else if (y3 > 0)
                yp = Y22[i2] = (Y12[i2] = yp) + y3;
              else
                Y22[i2] = Y12[i2] = yp;
            }
          }
          facetstacks.push(stacks);
        }
        if (offset2)
          offset2(facetstacks, Y12, Y22, Z);
        return { data, facets };
      }),
      X2,
      Y1,
      Y2
    ];
  }
  var stackAlias = stack;
  function maybeOffset(offset2) {
    if (offset2 == null)
      return;
    if (typeof offset2 === "function")
      return offset2;
    switch (`${offset2}`.toLowerCase()) {
      case "expand":
      case "normalize":
        return offsetExpand;
      case "center":
      case "silhouette":
        return offsetCenter;
      case "wiggle":
        return offsetWiggle;
    }
    throw new Error(`unknown offset: ${offset2}`);
  }
  function extent2(stack2, Y2) {
    let min8 = 0, max8 = 0;
    for (const i2 of stack2) {
      const y2 = Y2[i2];
      if (y2 < min8)
        min8 = y2;
      if (y2 > max8)
        max8 = y2;
    }
    return [min8, max8];
  }
  function offsetExpand(facetstacks, Y1, Y2) {
    for (const stacks of facetstacks) {
      for (const stack2 of stacks) {
        const [yn, yp] = extent2(stack2, Y2);
        for (const i2 of stack2) {
          const m = 1 / (yp - yn || 1);
          Y1[i2] = m * (Y1[i2] - yn);
          Y2[i2] = m * (Y2[i2] - yn);
        }
      }
    }
  }
  function offsetCenter(facetstacks, Y1, Y2) {
    for (const stacks of facetstacks) {
      for (const stack2 of stacks) {
        const [yn, yp] = extent2(stack2, Y2);
        for (const i2 of stack2) {
          const m = (yp + yn) / 2;
          Y1[i2] -= m;
          Y2[i2] -= m;
        }
      }
      offsetZero(stacks, Y1, Y2);
    }
    offsetCenterFacets(facetstacks, Y1, Y2);
  }
  function offsetWiggle(facetstacks, Y1, Y2, Z) {
    for (const stacks of facetstacks) {
      const prev = new InternMap();
      let y2 = 0;
      for (const stack2 of stacks) {
        let j = -1;
        const Fi = stack2.map((i2) => Math.abs(Y2[i2] - Y1[i2]));
        const Df = stack2.map((i2) => {
          j = Z ? Z[i2] : ++j;
          const value12 = Y2[i2] - Y1[i2];
          const diff = prev.has(j) ? value12 - prev.get(j) : 0;
          prev.set(j, value12);
          return diff;
        });
        const Cf1 = [0, ...cumsum(Df)];
        for (const i2 of stack2) {
          Y1[i2] += y2;
          Y2[i2] += y2;
        }
        const s1 = sum2(Fi);
        if (s1)
          y2 -= sum2(Fi, (d, i2) => (Df[i2] / 2 + Cf1[i2]) * d) / s1;
      }
      offsetZero(stacks, Y1, Y2);
    }
    offsetCenterFacets(facetstacks, Y1, Y2);
  }
  function offsetZero(stacks, Y1, Y2) {
    const m = min3(stacks, (stack2) => min3(stack2, (i2) => Y1[i2]));
    for (const stack2 of stacks) {
      for (const i2 of stack2) {
        Y1[i2] -= m;
        Y2[i2] -= m;
      }
    }
  }
  function offsetCenterFacets(facetstacks, Y1, Y2) {
    const n = facetstacks.length;
    if (n === 1)
      return;
    const facets = facetstacks.map((stacks) => stacks.flat());
    const m = facets.map((I) => (min3(I, (i2) => Y1[i2]) + max3(I, (i2) => Y2[i2])) / 2);
    const m0 = min3(m);
    for (let j = 0; j < n; j++) {
      const p2 = m0 - m[j];
      for (const i2 of facets[j]) {
        Y1[i2] += p2;
        Y2[i2] += p2;
      }
    }
  }
  function maybeOrder(order2, offset2, ky2) {
    if (order2 === void 0 && offset2 === offsetWiggle)
      return orderInsideOut;
    if (order2 == null)
      return;
    if (typeof order2 === "string") {
      switch (order2.toLowerCase()) {
        case "value":
        case ky2:
          return orderY;
        case "z":
          return orderZ;
        case "sum":
          return orderSum;
        case "appearance":
          return orderAppearance;
        case "inside-out":
          return orderInsideOut;
      }
      return orderFunction(field(order2));
    }
    if (typeof order2 === "function")
      return orderFunction(order2);
    if (Array.isArray(order2))
      return orderGiven(order2);
    throw new Error(`invalid order: ${order2}`);
  }
  function orderY(data, X2, Y2) {
    return Y2;
  }
  function orderZ(order2, X2, Y2, Z) {
    return Z;
  }
  function orderSum(data, X2, Y2, Z) {
    return orderZDomain(Z, groupSort(range4(data), (I) => sum2(I, (i2) => Y2[i2]), (i2) => Z[i2]));
  }
  function orderAppearance(data, X2, Y2, Z) {
    return orderZDomain(Z, groupSort(range4(data), (I) => X2[greatest(I, (i2) => Y2[i2])], (i2) => Z[i2]));
  }
  function orderInsideOut(data, X2, Y2, Z) {
    const I = range4(data);
    const K2 = groupSort(I, (I2) => X2[greatest(I2, (i2) => Y2[i2])], (i2) => Z[i2]);
    const sums = rollup(I, (I2) => sum2(I2, (i2) => Y2[i2]), (i2) => Z[i2]);
    const Kp = [], Kn = [];
    let s3 = 0;
    for (const k2 of K2) {
      if (s3 < 0) {
        s3 += sums.get(k2);
        Kp.push(k2);
      } else {
        s3 -= sums.get(k2);
        Kn.push(k2);
      }
    }
    return orderZDomain(Z, Kn.reverse().concat(Kp));
  }
  function orderFunction(f) {
    return (data) => valueof(data, f);
  }
  function orderGiven(domain) {
    return (data, X2, Y2, Z) => orderZDomain(Z, domain);
  }
  function orderZDomain(Z, domain) {
    domain = new InternMap(domain.map((d, i2) => [d, i2]));
    return Z.map((z) => domain.get(z));
  }
  function applyOrder(stacks, O) {
    for (const stack2 of stacks) {
      stack2.sort((i2, j) => ascendingDefined2(O[i2], O[j]));
    }
  }

  // node_modules/@observablehq/plot/dist/marks/area.js
  var defaults = {
    ariaLabel: "area",
    strokeWidth: 1,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeMiterlimit: 1
  };
  var Area = class extends Mark {
    constructor(data, options2 = {}) {
      const { x1, y1, x2, y2, z, curve, tension } = options2;
      super(data, {
        x1: { value: x1, scale: "x" },
        y1: { value: y1, scale: "y" },
        x2: { value: x2, scale: "x", optional: true },
        y2: { value: y2, scale: "y", optional: true },
        z: { value: maybeZ(options2), optional: true }
      }, options2, defaults);
      this.z = z;
      this.curve = Curve(curve, tension);
    }
    filter(index5) {
      return index5;
    }
    render(index5, scales, channels, dimensions, context) {
      const { x1: X1, y1: Y1, x2: X2 = X1, y2: Y2 = Y1 } = channels;
      return create2("svg:g", context).call(applyIndirectStyles, this, scales, dimensions).call(applyTransform, this, scales, 0, 0).call((g) => g.selectAll().data(groupIndex(index5, [X1, Y1, X2, Y2], this, channels)).enter().append("path").call(applyDirectStyles, this).call(applyGroupedChannelStyles, this, channels).attr("d", area_default().curve(this.curve).defined((i2) => i2 >= 0).x0((i2) => X1[i2]).y0((i2) => Y1[i2]).x1((i2) => X2[i2]).y1((i2) => Y2[i2]))).node();
    }
  };
  function areaY(data, options2) {
    const { x: x2 = indexOf, ...rest } = maybeDenseIntervalX(options2);
    return new Area(data, maybeStackY(maybeIdentityY({ ...rest, x1: x2, x2: void 0 })));
  }

  // node_modules/@observablehq/plot/dist/marks/marker.js
  function markers(mark2, { marker, markerStart = marker, markerMid = marker, markerEnd = marker } = {}) {
    mark2.markerStart = maybeMarker(markerStart);
    mark2.markerMid = maybeMarker(markerMid);
    mark2.markerEnd = maybeMarker(markerEnd);
  }
  function maybeMarker(marker) {
    if (marker == null || marker === false)
      return null;
    if (marker === true)
      return markerCircleFill;
    if (typeof marker === "function")
      return marker;
    switch (`${marker}`.toLowerCase()) {
      case "none":
        return null;
      case "arrow":
        return markerArrow;
      case "dot":
        return markerDot;
      case "circle":
      case "circle-fill":
        return markerCircleFill;
      case "circle-stroke":
        return markerCircleStroke;
    }
    throw new Error(`invalid marker: ${marker}`);
  }
  function markerArrow(color3, context) {
    return create2("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("orient", "auto").attr("fill", "none").attr("stroke", color3).attr("stroke-width", 1.5).attr("stroke-linecap", "round").attr("stroke-linejoin", "round").call((marker) => marker.append("path").attr("d", "M-1.5,-3l3,3l-3,3")).node();
  }
  function markerDot(color3, context) {
    return create2("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("fill", color3).attr("stroke", "none").call((marker) => marker.append("circle").attr("r", 2.5)).node();
  }
  function markerCircleFill(color3, context) {
    return create2("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("fill", color3).attr("stroke", "white").attr("stroke-width", 1.5).call((marker) => marker.append("circle").attr("r", 3)).node();
  }
  function markerCircleStroke(color3, context) {
    return create2("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("fill", "white").attr("stroke", color3).attr("stroke-width", 1.5).call((marker) => marker.append("circle").attr("r", 3)).node();
  }
  var nextMarkerId = 0;
  function applyGroupedMarkers(path2, mark2, { stroke: S } = {}) {
    return applyMarkersColor(path2, mark2, S && (([i2]) => S[i2]));
  }
  function applyMarkersColor(path2, { markerStart, markerMid, markerEnd, stroke }, strokeof = () => stroke) {
    const iriByMarkerColor = /* @__PURE__ */ new Map();
    function applyMarker(marker) {
      return function(i2) {
        const color3 = strokeof(i2);
        let iriByColor = iriByMarkerColor.get(marker);
        if (!iriByColor)
          iriByMarkerColor.set(marker, iriByColor = /* @__PURE__ */ new Map());
        let iri = iriByColor.get(color3);
        if (!iri) {
          const context = { document: this.ownerDocument };
          const node = this.parentNode.insertBefore(marker(color3, context), this);
          const id3 = `plot-marker-${++nextMarkerId}`;
          node.setAttribute("id", id3);
          iriByColor.set(color3, iri = `url(#${id3})`);
        }
        return iri;
      };
    }
    if (markerStart)
      path2.attr("marker-start", applyMarker(markerStart));
    if (markerMid)
      path2.attr("marker-mid", applyMarker(markerMid));
    if (markerEnd)
      path2.attr("marker-end", applyMarker(markerEnd));
  }

  // node_modules/@observablehq/plot/dist/transforms/map.js
  function mapY(map14, options2 = {}) {
    return mapAlias(Object.fromEntries(["y", "y1", "y2"].filter((key) => options2[key] != null).map((key) => [key, map14])), options2);
  }
  function map7(outputs = {}, options2 = {}) {
    const z = maybeZ(options2);
    const channels = Object.entries(outputs).map(([key, map14]) => {
      const input3 = maybeInput(key, options2);
      if (input3 == null)
        throw new Error(`missing channel: ${key}`);
      const [output2, setOutput] = column(input3);
      return { key, input: input3, output: output2, setOutput, map: maybeMap(map14) };
    });
    return {
      ...basic(options2, (data, facets) => {
        const Z = valueof(data, z);
        const X2 = channels.map(({ input: input3 }) => valueof(data, input3));
        const MX = channels.map(({ setOutput }) => setOutput(new Array(data.length)));
        for (const facet of facets) {
          for (const I of Z ? group(facet, (i2) => Z[i2]).values() : [facet]) {
            channels.forEach(({ map: map14 }, i2) => map14.map(I, X2[i2], MX[i2]));
          }
        }
        return { data, facets };
      }),
      ...Object.fromEntries(channels.map(({ key, output: output2 }) => [key, output2]))
    };
  }
  var mapAlias = map7;
  function maybeMap(map14) {
    if (map14 && typeof map14.map === "function")
      return map14;
    if (typeof map14 === "function")
      return mapFunction(map14);
    switch (`${map14}`.toLowerCase()) {
      case "cumsum":
        return mapCumsum;
      case "rank":
        return mapFunction(rank);
      case "quantile":
        return mapFunction(rankQuantile);
    }
    throw new Error(`invalid map: ${map14}`);
  }
  function rankQuantile(V) {
    const n = count(V) - 1;
    return rank(V).map((r2) => r2 / n);
  }
  function mapFunction(f) {
    return {
      map(I, S, T) {
        const M = f(take2(S, I));
        if (M.length !== I.length)
          throw new Error("map function returned a mismatched length");
        for (let i2 = 0, n = I.length; i2 < n; ++i2)
          T[I[i2]] = M[i2];
      }
    };
  }
  var mapCumsum = {
    map(I, S, T) {
      let sum3 = 0;
      for (const i2 of I)
        T[i2] = sum3 += S[i2];
    }
  };

  // node_modules/@observablehq/plot/dist/marks/line.js
  var defaults2 = {
    ariaLabel: "line",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 1.5,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeMiterlimit: 1
  };
  var Line = class extends Mark {
    constructor(data, options2 = {}) {
      const { x: x2, y: y2, z, curve, tension } = options2;
      super(data, {
        x: { value: x2, scale: "x" },
        y: { value: y2, scale: "y" },
        z: { value: maybeZ(options2), optional: true }
      }, options2, defaults2);
      this.z = z;
      this.curve = Curve(curve, tension);
      markers(this, options2);
    }
    filter(index5) {
      return index5;
    }
    render(index5, scales, channels, dimensions, context) {
      const { x: X2, y: Y2 } = channels;
      return create2("svg:g", context).call(applyIndirectStyles, this, scales, dimensions).call(applyTransform, this, scales).call((g) => g.selectAll().data(groupIndex(index5, [X2, Y2], this, channels)).enter().append("path").call(applyDirectStyles, this).call(applyGroupedChannelStyles, this, channels).call(applyGroupedMarkers, this, channels).attr("d", line_default().curve(this.curve).defined((i2) => i2 >= 0).x((i2) => X2[i2]).y((i2) => Y2[i2]))).node();
    }
  };
  function lineY(data, options2 = {}) {
    const { x: x2 = indexOf, y: y2 = identity12, ...remainingOptions } = options2;
    return new Line(data, maybeDenseIntervalX({ ...remainingOptions, x: x2, y: y2 }));
  }

  // node_modules/@observablehq/plot/dist/transforms/window.js
  function windowY(windowOptions = {}, options2) {
    if (arguments.length === 1)
      options2 = windowOptions;
    return mapY(window2(windowOptions), options2);
  }
  function window2(options2 = {}) {
    if (typeof options2 === "number")
      options2 = { k: options2 };
    let { k: k2, reduce, shift, anchor, strict } = options2;
    if (anchor === void 0 && shift !== void 0) {
      anchor = maybeShift(shift);
      warn(`Warning: the shift option is deprecated; please use anchor "${anchor}" instead.`);
    }
    if (!((k2 = Math.floor(k2)) > 0))
      throw new Error(`invalid k: ${k2}`);
    return maybeReduce2(reduce)(k2, maybeAnchor(anchor, k2), strict);
  }
  function maybeAnchor(anchor = "middle", k2) {
    switch (`${anchor}`.toLowerCase()) {
      case "middle":
        return k2 - 1 >> 1;
      case "start":
        return 0;
      case "end":
        return k2 - 1;
    }
    throw new Error(`invalid anchor: ${anchor}`);
  }
  function maybeShift(shift) {
    switch (`${shift}`.toLowerCase()) {
      case "centered":
        return "middle";
      case "leading":
        return "start";
      case "trailing":
        return "end";
    }
    throw new Error(`invalid shift: ${shift}`);
  }
  function maybeReduce2(reduce = "mean") {
    if (typeof reduce === "string") {
      if (/^p\d{2}$/i.test(reduce))
        return reduceNumbers(percentile(reduce));
      switch (reduce.toLowerCase()) {
        case "deviation":
          return reduceNumbers(deviation);
        case "max":
          return reduceArray(max3);
        case "mean":
          return reduceMean;
        case "median":
          return reduceNumbers(median);
        case "min":
          return reduceArray(min3);
        case "mode":
          return reduceArray(mode);
        case "sum":
          return reduceSum2;
        case "variance":
          return reduceNumbers(variance);
        case "difference":
          return reduceDifference;
        case "ratio":
          return reduceRatio;
        case "first":
          return reduceFirst2;
        case "last":
          return reduceLast2;
      }
    }
    if (typeof reduce !== "function")
      throw new Error(`invalid reduce: ${reduce}`);
    return reduceArray(reduce);
  }
  function slice6(I, i2, j) {
    return I.subarray ? I.subarray(i2, j) : I.slice(i2, j);
  }
  function reduceNumbers(f) {
    return (k2, s3, strict) => strict ? {
      map(I, S, T) {
        const C2 = Float64Array.from(I, (i2) => S[i2] === null ? NaN : S[i2]);
        let nans = 0;
        for (let i2 = 0; i2 < k2 - 1; ++i2)
          if (isNaN(C2[i2]))
            ++nans;
        for (let i2 = 0, n = I.length - k2 + 1; i2 < n; ++i2) {
          if (isNaN(C2[i2 + k2 - 1]))
            ++nans;
          T[I[i2 + s3]] = nans === 0 ? f(C2.subarray(i2, i2 + k2)) : NaN;
          if (isNaN(C2[i2]))
            --nans;
        }
      }
    } : {
      map(I, S, T) {
        const C2 = Float64Array.from(I, (i2) => S[i2] === null ? NaN : S[i2]);
        for (let i2 = -s3; i2 < 0; ++i2) {
          T[I[i2 + s3]] = f(C2.subarray(0, i2 + k2));
        }
        for (let i2 = 0, n = I.length - s3; i2 < n; ++i2) {
          T[I[i2 + s3]] = f(C2.subarray(i2, i2 + k2));
        }
      }
    };
  }
  function reduceArray(f) {
    return (k2, s3, strict) => strict ? {
      map(I, S, T) {
        let count2 = 0;
        for (let i2 = 0; i2 < k2 - 1; ++i2)
          count2 += defined(S[I[i2]]);
        for (let i2 = 0, n = I.length - k2 + 1; i2 < n; ++i2) {
          count2 += defined(S[I[i2 + k2 - 1]]);
          if (count2 === k2)
            T[I[i2 + s3]] = f(take2(S, slice6(I, i2, i2 + k2)));
          count2 -= defined(S[I[i2]]);
        }
      }
    } : {
      map(I, S, T) {
        for (let i2 = -s3; i2 < 0; ++i2) {
          T[I[i2 + s3]] = f(take2(S, slice6(I, 0, i2 + k2)));
        }
        for (let i2 = 0, n = I.length - s3; i2 < n; ++i2) {
          T[I[i2 + s3]] = f(take2(S, slice6(I, i2, i2 + k2)));
        }
      }
    };
  }
  function reduceSum2(k2, s3, strict) {
    return strict ? {
      map(I, S, T) {
        let nans = 0;
        let sum3 = 0;
        for (let i2 = 0; i2 < k2 - 1; ++i2) {
          const v = S[I[i2]];
          if (v === null || isNaN(v))
            ++nans;
          else
            sum3 += +v;
        }
        for (let i2 = 0, n = I.length - k2 + 1; i2 < n; ++i2) {
          const a3 = S[I[i2]];
          const b2 = S[I[i2 + k2 - 1]];
          if (b2 === null || isNaN(b2))
            ++nans;
          else
            sum3 += +b2;
          T[I[i2 + s3]] = nans === 0 ? sum3 : NaN;
          if (a3 === null || isNaN(a3))
            --nans;
          else
            sum3 -= +a3;
        }
      }
    } : {
      map(I, S, T) {
        let sum3 = 0;
        const n = I.length;
        for (let i2 = 0, j = Math.min(n, k2 - s3 - 1); i2 < j; ++i2) {
          sum3 += +S[I[i2]] || 0;
        }
        for (let i2 = -s3, j = n - s3; i2 < j; ++i2) {
          sum3 += +S[I[i2 + k2 - 1]] || 0;
          T[I[i2 + s3]] = sum3;
          sum3 -= +S[I[i2]] || 0;
        }
      }
    };
  }
  function reduceMean(k2, s3, strict) {
    if (strict) {
      const sum3 = reduceSum2(k2, s3, strict);
      return {
        map(I, S, T) {
          sum3.map(I, S, T);
          for (let i2 = 0, n = I.length - k2 + 1; i2 < n; ++i2) {
            T[I[i2 + s3]] /= k2;
          }
        }
      };
    } else {
      return {
        map(I, S, T) {
          let sum3 = 0;
          let count2 = 0;
          const n = I.length;
          for (let i2 = 0, j = Math.min(n, k2 - s3 - 1); i2 < j; ++i2) {
            let v = S[I[i2]];
            if (v !== null && !isNaN(v = +v))
              sum3 += v, ++count2;
          }
          for (let i2 = -s3, j = n - s3; i2 < j; ++i2) {
            let a3 = S[I[i2 + k2 - 1]];
            let b2 = S[I[i2]];
            if (a3 !== null && !isNaN(a3 = +a3))
              sum3 += a3, ++count2;
            T[I[i2 + s3]] = sum3 / count2;
            if (b2 !== null && !isNaN(b2 = +b2))
              sum3 -= b2, --count2;
          }
        }
      };
    }
  }
  function firstDefined(S, I, i2, k2) {
    for (let j = i2 + k2; i2 < j; ++i2) {
      const v = S[I[i2]];
      if (defined(v))
        return v;
    }
  }
  function lastDefined(S, I, i2, k2) {
    for (let j = i2 + k2 - 1; j >= i2; --j) {
      const v = S[I[j]];
      if (defined(v))
        return v;
    }
  }
  function firstNumber(S, I, i2, k2) {
    for (let j = i2 + k2; i2 < j; ++i2) {
      let v = S[I[i2]];
      if (v !== null && !isNaN(v = +v))
        return v;
    }
  }
  function lastNumber(S, I, i2, k2) {
    for (let j = i2 + k2 - 1; j >= i2; --j) {
      let v = S[I[j]];
      if (v !== null && !isNaN(v = +v))
        return v;
    }
  }
  function reduceDifference(k2, s3, strict) {
    return strict ? {
      map(I, S, T) {
        for (let i2 = 0, n = I.length - k2; i2 < n; ++i2) {
          const a3 = S[I[i2]];
          const b2 = S[I[i2 + k2 - 1]];
          T[I[i2 + s3]] = a3 === null || b2 === null ? NaN : b2 - a3;
        }
      }
    } : {
      map(I, S, T) {
        for (let i2 = -s3, n = I.length - k2 + s3 + 1; i2 < n; ++i2) {
          T[I[i2 + s3]] = lastNumber(S, I, i2, k2) - firstNumber(S, I, i2, k2);
        }
      }
    };
  }
  function reduceRatio(k2, s3, strict) {
    return strict ? {
      map(I, S, T) {
        for (let i2 = 0, n = I.length - k2; i2 < n; ++i2) {
          const a3 = S[I[i2]];
          const b2 = S[I[i2 + k2 - 1]];
          T[I[i2 + s3]] = a3 === null || b2 === null ? NaN : b2 / a3;
        }
      }
    } : {
      map(I, S, T) {
        for (let i2 = -s3, n = I.length - k2 + s3 + 1; i2 < n; ++i2) {
          T[I[i2 + s3]] = lastNumber(S, I, i2, k2) / firstNumber(S, I, i2, k2);
        }
      }
    };
  }
  function reduceFirst2(k2, s3, strict) {
    return strict ? {
      map(I, S, T) {
        for (let i2 = 0, n = I.length - k2; i2 < n; ++i2) {
          T[I[i2 + s3]] = S[I[i2]];
        }
      }
    } : {
      map(I, S, T) {
        for (let i2 = -s3, n = I.length - k2 + s3 + 1; i2 < n; ++i2) {
          T[I[i2 + s3]] = firstDefined(S, I, i2, k2);
        }
      }
    };
  }
  function reduceLast2(k2, s3, strict) {
    return strict ? {
      map(I, S, T) {
        for (let i2 = 0, n = I.length - k2; i2 < n; ++i2) {
          T[I[i2 + s3]] = S[I[i2 + k2 - 1]];
        }
      }
    } : {
      map(I, S, T) {
        for (let i2 = -s3, n = I.length - k2 + s3 + 1; i2 < n; ++i2) {
          T[I[i2 + s3]] = lastDefined(S, I, i2, k2);
        }
      }
    };
  }

  // output/LargeChart/foreign.js
  var import_react = __toESM(require_react(), 1);
  var __assign = function() {
    __assign = Object.assign || function(t) {
      for (var s3, i2 = 1, n = arguments.length; i2 < n; i2++) {
        s3 = arguments[i2];
        for (var p2 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p2))
            t[p2] = s3[p2];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  function _largeChart(props) {
    var ref = import_react.default.useRef();
    import_react.default.useEffect(function() {
      var chart = plot({
        width: props.width,
        height: props.height,
        style: {
          background: "transparent"
        },
        y: {
          label: "\u2191 ($)",
          grid: true
        },
        marks: [
          areaY(props.data.map(function(d) {
            return __assign(__assign({}, d), { x: timeParse("%B, %Y")("".concat(d.month, ", ").concat(d.year)) });
          }).filter(function(d) {
            return d.x >= props.min && d.x <= props.max;
          }), {
            x: function(d) {
              return d.x;
            },
            y: function(d) {
              return d.value;
            },
            fill: "tomato",
            opacity: 0.2
          }),
          lineY(props.data.map(function(d) {
            return __assign(__assign({}, d), { x: timeParse("%B, %Y")("".concat(d.month, ", ").concat(d.year)) });
          }).filter(function(d) {
            return d.x >= props.min && d.x <= props.max;
          }), {
            x: function(d) {
              return d.x;
            },
            y: function(d) {
              return d.value;
            },
            strokeWidth: 1
          })
        ]
      });
      ref.current.append(chart);
      return function() {
        return chart.remove();
      };
    }, [props]);
    return import_react.default.createElement("div", { ref });
  }

  // output/Data.Time.Component/index.js
  var $runtime_lazy3 = function(name15, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var ordSecond = ordInt;
  var ordMinute = ordInt;
  var ordMillisecond = ordInt;
  var ordHour = ordInt;
  var eqSecond = eqInt;
  var eqMinute = eqInt;
  var eqMillisecond = eqInt;
  var eqHour = eqInt;
  var boundedSecond = {
    bottom: 0,
    top: 59,
    Ord0: function() {
      return ordSecond;
    }
  };
  var boundedMinute = {
    bottom: 0,
    top: 59,
    Ord0: function() {
      return ordMinute;
    }
  };
  var boundedMillisecond = {
    bottom: 0,
    top: 999,
    Ord0: function() {
      return ordMillisecond;
    }
  };
  var boundedHour = {
    bottom: 0,
    top: 23,
    Ord0: function() {
      return ordHour;
    }
  };
  var boundedEnumSecond = {
    cardinality: 60,
    toEnum: function(n) {
      if (n >= 0 && n <= 59) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedSecond;
    },
    Enum1: function() {
      return $lazy_enumSecond(0);
    }
  };
  var $lazy_enumSecond = /* @__PURE__ */ $runtime_lazy3("enumSecond", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $36 = toEnum(boundedEnumSecond);
        var $37 = fromEnum(boundedEnumSecond);
        return function($38) {
          return $36(function(v) {
            return v + 1 | 0;
          }($37($38)));
        };
      }(),
      pred: function() {
        var $39 = toEnum(boundedEnumSecond);
        var $40 = fromEnum(boundedEnumSecond);
        return function($41) {
          return $39(function(v) {
            return v - 1 | 0;
          }($40($41)));
        };
      }(),
      Ord0: function() {
        return ordSecond;
      }
    };
  });
  var boundedEnumMinute = {
    cardinality: 60,
    toEnum: function(n) {
      if (n >= 0 && n <= 59) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedMinute;
    },
    Enum1: function() {
      return $lazy_enumMinute(0);
    }
  };
  var $lazy_enumMinute = /* @__PURE__ */ $runtime_lazy3("enumMinute", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $42 = toEnum(boundedEnumMinute);
        var $43 = fromEnum(boundedEnumMinute);
        return function($44) {
          return $42(function(v) {
            return v + 1 | 0;
          }($43($44)));
        };
      }(),
      pred: function() {
        var $45 = toEnum(boundedEnumMinute);
        var $46 = fromEnum(boundedEnumMinute);
        return function($47) {
          return $45(function(v) {
            return v - 1 | 0;
          }($46($47)));
        };
      }(),
      Ord0: function() {
        return ordMinute;
      }
    };
  });
  var boundedEnumMillisecond = {
    cardinality: 1e3,
    toEnum: function(n) {
      if (n >= 0 && n <= 999) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedMillisecond;
    },
    Enum1: function() {
      return $lazy_enumMillisecond(0);
    }
  };
  var $lazy_enumMillisecond = /* @__PURE__ */ $runtime_lazy3("enumMillisecond", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $48 = toEnum(boundedEnumMillisecond);
        var $49 = fromEnum(boundedEnumMillisecond);
        return function($50) {
          return $48(function(v) {
            return v + 1 | 0;
          }($49($50)));
        };
      }(),
      pred: function() {
        var $51 = toEnum(boundedEnumMillisecond);
        var $52 = fromEnum(boundedEnumMillisecond);
        return function($53) {
          return $51(function(v) {
            return v - 1 | 0;
          }($52($53)));
        };
      }(),
      Ord0: function() {
        return ordMillisecond;
      }
    };
  });
  var boundedEnumHour = {
    cardinality: 24,
    toEnum: function(n) {
      if (n >= 0 && n <= 23) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedHour;
    },
    Enum1: function() {
      return $lazy_enumHour(0);
    }
  };
  var $lazy_enumHour = /* @__PURE__ */ $runtime_lazy3("enumHour", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $54 = toEnum(boundedEnumHour);
        var $55 = fromEnum(boundedEnumHour);
        return function($56) {
          return $54(function(v) {
            return v + 1 | 0;
          }($55($56)));
        };
      }(),
      pred: function() {
        var $57 = toEnum(boundedEnumHour);
        var $58 = fromEnum(boundedEnumHour);
        return function($59) {
          return $57(function(v) {
            return v - 1 | 0;
          }($58($59)));
        };
      }(),
      Ord0: function() {
        return ordHour;
      }
    };
  });

  // output/Data.Time/index.js
  var eq2 = /* @__PURE__ */ eq(eqHour);
  var eq12 = /* @__PURE__ */ eq(eqMinute);
  var eq22 = /* @__PURE__ */ eq(eqSecond);
  var eq3 = /* @__PURE__ */ eq(eqMillisecond);
  var compare2 = /* @__PURE__ */ compare(ordHour);
  var compare12 = /* @__PURE__ */ compare(ordMinute);
  var compare22 = /* @__PURE__ */ compare(ordSecond);
  var compare3 = /* @__PURE__ */ compare(ordMillisecond);
  var Time = /* @__PURE__ */ function() {
    function Time2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Time2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Time2(value0, value1, value22, value32);
          };
        };
      };
    };
    return Time2;
  }();
  var second3 = function(v) {
    return v.value2;
  };
  var minute2 = function(v) {
    return v.value1;
  };
  var millisecond2 = function(v) {
    return v.value3;
  };
  var hour2 = function(v) {
    return v.value0;
  };
  var eqTime = {
    eq: function(x2) {
      return function(y2) {
        return eq2(x2.value0)(y2.value0) && eq12(x2.value1)(y2.value1) && eq22(x2.value2)(y2.value2) && eq3(x2.value3)(y2.value3);
      };
    }
  };
  var ordTime = {
    compare: function(x2) {
      return function(y2) {
        var v = compare2(x2.value0)(y2.value0);
        if (v instanceof LT) {
          return LT.value;
        }
        ;
        if (v instanceof GT) {
          return GT.value;
        }
        ;
        var v1 = compare12(x2.value1)(y2.value1);
        if (v1 instanceof LT) {
          return LT.value;
        }
        ;
        if (v1 instanceof GT) {
          return GT.value;
        }
        ;
        var v2 = compare22(x2.value2)(y2.value2);
        if (v2 instanceof LT) {
          return LT.value;
        }
        ;
        if (v2 instanceof GT) {
          return GT.value;
        }
        ;
        return compare3(x2.value3)(y2.value3);
      };
    },
    Eq0: function() {
      return eqTime;
    }
  };
  var boundedTime = /* @__PURE__ */ function() {
    return {
      bottom: new Time(bottom(boundedHour), bottom(boundedMinute), bottom(boundedSecond), bottom(boundedMillisecond)),
      top: new Time(top(boundedHour), top(boundedMinute), top(boundedSecond), top(boundedMillisecond)),
      Ord0: function() {
        return ordTime;
      }
    };
  }();

  // output/Data.DateTime/index.js
  var DateTime = /* @__PURE__ */ function() {
    function DateTime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    DateTime2.create = function(value0) {
      return function(value1) {
        return new DateTime2(value0, value1);
      };
    };
    return DateTime2;
  }();

  // output/Data.JSDate/foreign.js
  var createDate2 = function(y2, m, d, h, mi, s3, ms) {
    var date3 = new Date(Date.UTC(y2, m, d, h, mi, s3, ms));
    if (y2 >= 0 && y2 < 100) {
      date3.setUTCFullYear(y2);
    }
    return date3;
  };
  function jsdate(parts) {
    return createDate2(
      parts.year,
      parts.month,
      parts.day,
      parts.hour,
      parts.minute,
      parts.second,
      parts.millisecond
    );
  }

  // output/Foreign/foreign.js
  var isArray = Array.isArray || function(value12) {
    return Object.prototype.toString.call(value12) === "[object Array]";
  };

  // output/Effect.Exception/foreign.js
  function error(msg2) {
    return new Error(msg2);
  }
  function throwException(e) {
    return function() {
      throw e;
    };
  }

  // output/Effect.Exception/index.js
  var $$throw = function($4) {
    return throwException(error($4));
  };

  // output/Control.Monad.Error.Class/index.js
  var throwError = function(dict) {
    return dict.throwError;
  };
  var monadThrowEffect = {
    throwError: throwException,
    Monad0: function() {
      return monadEffect;
    }
  };
  var catchError = function(dict) {
    return dict.catchError;
  };
  var $$try = function(dictMonadError) {
    var catchError1 = catchError(dictMonadError);
    var Monad0 = dictMonadError.MonadThrow0().Monad0();
    var map14 = map(Monad0.Bind1().Apply0().Functor0());
    var pure8 = pure(Monad0.Applicative0());
    return function(a3) {
      return catchError1(map14(Right.create)(a3))(function($52) {
        return pure8(Left.create($52));
      });
    };
  };

  // output/Effect.Class/index.js
  var liftEffect = function(dict) {
    return dict.liftEffect;
  };

  // output/Data.JSDate/index.js
  var fromEnum3 = /* @__PURE__ */ fromEnum(boundedEnumYear);
  var fromEnum1 = /* @__PURE__ */ fromEnum(boundedEnumMonth);
  var fromEnum22 = /* @__PURE__ */ fromEnum(boundedEnumDay);
  var fromEnum32 = /* @__PURE__ */ fromEnum(boundedEnumHour);
  var fromEnum4 = /* @__PURE__ */ fromEnum(boundedEnumMinute);
  var fromEnum5 = /* @__PURE__ */ fromEnum(boundedEnumSecond);
  var fromEnum6 = /* @__PURE__ */ fromEnum(boundedEnumMillisecond);
  var fromDateTime = function(v) {
    return jsdate({
      year: toNumber(fromEnum3(year(v.value0))),
      month: toNumber(fromEnum1(month(v.value0)) - 1 | 0),
      day: toNumber(fromEnum22(day(v.value0))),
      hour: toNumber(fromEnum32(hour2(v.value1))),
      minute: toNumber(fromEnum4(minute2(v.value1))),
      second: toNumber(fromEnum5(second3(v.value1))),
      millisecond: toNumber(fromEnum6(millisecond2(v.value1)))
    });
  };

  // output/React.Basic/foreign.js
  var import_react2 = __toESM(require_react(), 1);
  var createElement = import_react2.default.createElement;
  var Fragment = import_react2.default.Fragment;
  function element(component2) {
    return (props) => Array.isArray(props.children) ? createElement.apply(null, [component2, props].concat(props.children)) : createElement(component2, props);
  }

  // output/LargeChart/index.js
  var bottom4 = /* @__PURE__ */ bottom(boundedTime);
  var make = /* @__PURE__ */ pure(applicativeEffect)(/* @__PURE__ */ function() {
    var $4 = element(_largeChart);
    return function($5) {
      return $4(function(props) {
        return {
          data: props.data,
          width: props.width,
          height: props.height,
          min: fromDateTime(new DateTime(props.min, bottom4)),
          max: fromDateTime(new DateTime(props.max, bottom4))
        };
      }($5));
    };
  }());

  // output/React.Basic.DOM/foreign.js
  var import_react_dom = __toESM(require_react_dom(), 1);

  // output/Effect.Unsafe/foreign.js
  var unsafePerformEffect = function(f) {
    return f();
  };

  // output/React.Basic.DOM.Internal/foreign.js
  var import_react3 = __toESM(require_react(), 1);
  function unsafeCreateDOMComponent_(createElement2) {
    return (el) => {
      const flattenDataProp = (props, ref) => {
        var data = null;
        if (props._data != null) {
          data = { _data: void 0 };
          Object.entries(props._data).forEach(function(entry) {
            data["data-" + entry[0]] = entry[1];
          });
        }
        var aria = null;
        if (props._aria != null) {
          aria = { _aria: void 0 };
          Object.entries(props._aria).forEach(function(entry) {
            aria["aria-" + entry[0]] = entry[1];
          });
        }
        return Object.assign({ ref }, props, data, aria);
      };
      return () => {
        const c4 = import_react3.default.forwardRef(
          (props, ref) => createElement2(el)(flattenDataProp(props, ref))
        );
        c4.displayName = el;
        return c4;
      };
    };
  }

  // output/React.Basic.DOM.Internal/index.js
  var unsafeCreateDOMComponent = /* @__PURE__ */ unsafeCreateDOMComponent_(element);

  // output/React.Basic.DOM.Generated/index.js
  var _section$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("section"));
  var section$prime = function() {
    return _section$prime;
  };
  var section$prime1 = /* @__PURE__ */ section$prime();
  var section = function() {
    return element(section$prime1);
  };
  var _pre$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("pre"));
  var pre$prime = function() {
    return _pre$prime;
  };
  var pre$prime1 = /* @__PURE__ */ pre$prime();
  var pre = function() {
    return element(pre$prime1);
  };
  var pre1 = /* @__PURE__ */ pre();
  var pre_ = function(children3) {
    return pre1({
      children: children3
    });
  };
  var _output$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("output"));
  var output$prime = function() {
    return _output$prime;
  };
  var output$prime1 = /* @__PURE__ */ output$prime();
  var output = function() {
    return element(output$prime1);
  };
  var output1 = /* @__PURE__ */ output();
  var output_ = function(children3) {
    return output1({
      children: children3
    });
  };
  var _main$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("main"));
  var main$prime = function() {
    return _main$prime;
  };
  var main$prime1 = /* @__PURE__ */ main$prime();
  var main = function() {
    return element(main$prime1);
  };
  var main1 = /* @__PURE__ */ main();
  var main_ = function(children3) {
    return main1({
      children: children3
    });
  };
  var _input$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("input"));
  var input$prime = function() {
    return _input$prime;
  };
  var input$prime1 = /* @__PURE__ */ input$prime();
  var input = function() {
    return element(input$prime1);
  };
  var _div$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("div"));
  var div$prime = function() {
    return _div$prime;
  };
  var div$prime1 = /* @__PURE__ */ div$prime();
  var div2 = function() {
    return element(div$prime1);
  };

  // output/React.Basic.DOM/index.js
  var text = unsafeCoerce2;

  // output/Data.Nullable/foreign.js
  var nullImpl = null;
  function nullable(a3, r2, f) {
    return a3 == null ? r2 : f(a3);
  }

  // output/Data.Nullable/index.js
  var toMaybe = function(n) {
    return nullable(n, Nothing.value, Just.create);
  };

  // output/Effect.Uncurried/foreign.js
  var mkEffectFn1 = function mkEffectFn12(fn) {
    return function(x2) {
      return fn(x2)();
    };
  };
  var runEffectFn1 = function runEffectFn12(fn) {
    return function(a3) {
      return function() {
        return fn(a3);
      };
    };
  };

  // output/Data.Function.Uncurried/foreign.js
  var mkFn2 = function(fn) {
    return function(a3, b2) {
      return fn(a3)(b2);
    };
  };

  // output/React.Basic.Events/index.js
  var EventFn = function(x2) {
    return x2;
  };
  var unsafeEventFn = EventFn;
  var handler = function(v) {
    return function(cb) {
      return function($31) {
        return cb(v($31))();
      };
    };
  };

  // output/React.Basic.DOM.Events/index.js
  var targetValue = /* @__PURE__ */ unsafeEventFn(function(e) {
    return toMaybe(e.target.value);
  });

  // output/React.Basic.Hooks/foreign.js
  var import_react4 = __toESM(require_react(), 1);
  var useEqCache = (eq5, a3) => {
    const memoRef = import_react4.default.useRef(a3);
    if (memoRef.current !== a3 && !eq5(memoRef.current, a3)) {
      memoRef.current = a3;
    }
    return memoRef.current;
  };
  var memo_ = import_react4.default.memo;
  var memoEq_ = import_react4.default.memo;
  function useState_(tuple, initialState) {
    const [state3, setState] = import_react4.default.useState(
      typeof initialState === "function" ? () => initialState : initialState
    );
    if (!setState.hasOwnProperty("$$reactBasicHooks$$cachedSetState")) {
      setState.$$reactBasicHooks$$cachedSetState = (update2) => () => setState(update2);
    }
    return tuple(state3, setState.$$reactBasicHooks$$cachedSetState);
  }
  function useEffect_(eq5, deps, effect) {
    const memoizedKey = useEqCache(eq5, deps);
    import_react4.default.useEffect(effect, [memoizedKey]);
  }
  function useLayoutEffect_(eq5, deps, effect) {
    const memoizedKey = useEqCache(eq5, deps);
    import_react4.default.useLayoutEffect(effect, [memoizedKey]);
  }
  function useReducer_(tuple, reducer2, initialState) {
    const [state3, dispatch2] = import_react4.default.useReducer(reducer2, initialState);
    if (!dispatch2.hasOwnProperty("$$reactBasicHooks$$cachedDispatch")) {
      dispatch2.$$reactBasicHooks$$cachedDispatch = (action2) => () => dispatch2(action2);
    }
    return tuple(state3, dispatch2.$$reactBasicHooks$$cachedDispatch);
  }
  var useRef_ = import_react4.default.useRef;
  function readRef_(ref) {
    return ref.current;
  }
  var useContext_ = import_react4.default.useContext;
  var useDebugValue_ = import_react4.default.useDebugValue;
  var useId_ = import_react4.default.useId;
  var useDeferredValue_ = import_react4.default.useDeferredValue;
  var useSyncExternalStore2_ = import_react4.default.useSyncExternalStore;
  var useSyncExternalStore3_ = import_react4.default.useSyncExternalStore;
  function unsafeSetDisplayName(displayName2, component2) {
    component2.displayName = displayName2;
    component2.toString = () => displayName2;
    return component2;
  }

  // output/Control.Bind.Indexed/index.js
  var ibind = function(dict) {
    return dict.ibind;
  };

  // output/React.Basic.Hooks.Internal/index.js
  var map9 = /* @__PURE__ */ map(functorEffect);
  var apply2 = /* @__PURE__ */ apply(applyEffect);
  var pure2 = /* @__PURE__ */ pure(applicativeEffect);
  var Render2 = function(x2) {
    return x2;
  };
  var unsafeRenderEffect = Render2;
  var unsafeHook = Render2;
  var ixFunctorRender = {
    imap: function(f) {
      return function(v) {
        return map9(f)(v);
      };
    }
  };
  var ixApplyRender = {
    iapply: function(v) {
      return function(v1) {
        return apply2(v)(v1);
      };
    },
    IxFunctor0: function() {
      return ixFunctorRender;
    }
  };
  var ixBindRender = {
    ibind: function(v) {
      return function(f) {
        return function __do4() {
          var a3 = v();
          var v1 = f(a3);
          return v1();
        };
      };
    },
    IxApply0: function() {
      return ixApplyRender;
    }
  };
  var functorRender = {
    map: function(f) {
      return function(v) {
        return map9(f)(v);
      };
    }
  };
  var discard2 = function(dictIxBind) {
    return ibind(dictIxBind);
  };
  var coerceHook = function() {
    return function(v) {
      return v;
    };
  };
  var bind2 = function(dictIxBind) {
    return ibind(dictIxBind);
  };
  var applyRender = function(dictTypeEquals) {
    return {
      apply: function(v) {
        return function(v1) {
          return apply2(v)(v1);
        };
      },
      Functor0: function() {
        return functorRender;
      }
    };
  };
  var applicativeRender = function(dictTypeEquals) {
    var applyRender1 = applyRender(dictTypeEquals);
    return {
      pure: function(a3) {
        return pure2(a3);
      },
      Apply0: function() {
        return applyRender1;
      }
    };
  };

  // output/React.Basic.Hooks/index.js
  var mapFlipped2 = /* @__PURE__ */ mapFlipped(functorRender);
  var rmap2 = /* @__PURE__ */ rmap(bifunctorTuple);
  var map10 = /* @__PURE__ */ map(functorEffect);
  var pure3 = /* @__PURE__ */ pure(applicativeEffect);
  var Reducer = function(x2) {
    return x2;
  };
  var useState = function(initialState) {
    return unsafeHook(function() {
      return useState_(mkFn2(Tuple.create), initialState);
    });
  };
  var useState$prime = function(initialState) {
    return mapFlipped2(useState(initialState))(rmap2(function(v) {
      return function($36) {
        return v($$const($36));
      };
    }));
  };
  var useRef = function(initialValue) {
    return unsafeHook(function() {
      return useRef_(initialValue);
    });
  };
  var useReducer = function(initialState) {
    return function(v) {
      return unsafeHook(function() {
        return useReducer_(mkFn2(Tuple.create), v, initialState);
      });
    };
  };
  var useLayoutEffectOnce = function(effect) {
    return unsafeHook(function() {
      return useLayoutEffect_(function(v, v1) {
        return true;
      }, unit, effect);
    });
  };
  var useEffectOnce = function(effect) {
    return unsafeHook(function() {
      return useEffect_(function(v, v1) {
        return true;
      }, unit, effect);
    });
  };
  var useEffect = function(dictEq) {
    var eq5 = eq(dictEq);
    return function(deps) {
      return function(effect) {
        return unsafeHook(function() {
          return useEffect_(mkFn2(eq5), deps, effect);
        });
      };
    };
  };
  var unsafeReactFunctionComponent = unsafeCoerce2;
  var unsafeDiscardRenderEffects = unsafeCoerce2;
  var unsafeReactComponent = function() {
    return function() {
      return function(name15) {
        return function(renderFn) {
          var c4 = unsafeReactFunctionComponent(function(props) {
            return unsafeDiscardRenderEffects(renderFn(props))();
          });
          return function() {
            return unsafeSetDisplayName(name15, c4);
          };
        };
      };
    };
  };
  var unsafeReactComponent1 = /* @__PURE__ */ unsafeReactComponent()();
  var readRef = /* @__PURE__ */ runEffectFn1(readRef_);
  var readRefMaybe = function(a3) {
    return map10(toMaybe)(readRef(a3));
  };
  var reactComponent = function() {
    return function() {
      return function() {
        return unsafeReactComponent1;
      };
    };
  };
  var reactComponent1 = /* @__PURE__ */ reactComponent()()();
  var mkReducer = function($37) {
    return pure3(Reducer(mkFn2($37)));
  };
  var component = function(name15) {
    return function(renderFn) {
      return function __do4() {
        var c4 = reactComponent1(name15)(function($38) {
          return renderFn(function(v) {
            return v.nested;
          }($38));
        })();
        var $39 = element(c4);
        return function($40) {
          return $39(function(v) {
            return {
              nested: v
            };
          }($40));
        };
      };
    };
  };

  // node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js
  var resizeObservers = [];

  // node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js
  var hasActiveObservations = function() {
    return resizeObservers.some(function(ro) {
      return ro.activeTargets.length > 0;
    });
  };

  // node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js
  var hasSkippedObservations = function() {
    return resizeObservers.some(function(ro) {
      return ro.skippedTargets.length > 0;
    });
  };

  // node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js
  var msg = "ResizeObserver loop completed with undelivered notifications.";
  var deliverResizeLoopError = function() {
    var event;
    if (typeof ErrorEvent === "function") {
      event = new ErrorEvent("error", {
        message: msg
      });
    } else {
      event = document.createEvent("Event");
      event.initEvent("error", false, false);
      event.message = msg;
    }
    window.dispatchEvent(event);
  };

  // node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js
  var ResizeObserverBoxOptions;
  (function(ResizeObserverBoxOptions2) {
    ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
    ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
    ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
  })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

  // node_modules/@juggle/resize-observer/lib/utils/freeze.js
  var freeze2 = function(obj) {
    return Object.freeze(obj);
  };

  // node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js
  var ResizeObserverSize = function() {
    function ResizeObserverSize2(inlineSize, blockSize) {
      this.inlineSize = inlineSize;
      this.blockSize = blockSize;
      freeze2(this);
    }
    return ResizeObserverSize2;
  }();

  // node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js
  var DOMRectReadOnly = function() {
    function DOMRectReadOnly2(x2, y2, width8, height8) {
      this.x = x2;
      this.y = y2;
      this.width = width8;
      this.height = height8;
      this.top = this.y;
      this.left = this.x;
      this.bottom = this.top + this.height;
      this.right = this.left + this.width;
      return freeze2(this);
    }
    DOMRectReadOnly2.prototype.toJSON = function() {
      var _a = this, x2 = _a.x, y2 = _a.y, top4 = _a.top, right2 = _a.right, bottom6 = _a.bottom, left2 = _a.left, width8 = _a.width, height8 = _a.height;
      return { x: x2, y: y2, top: top4, right: right2, bottom: bottom6, left: left2, width: width8, height: height8 };
    };
    DOMRectReadOnly2.fromRect = function(rectangle) {
      return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    };
    return DOMRectReadOnly2;
  }();

  // node_modules/@juggle/resize-observer/lib/utils/element.js
  var isSVG = function(target5) {
    return target5 instanceof SVGElement && "getBBox" in target5;
  };
  var isHidden = function(target5) {
    if (isSVG(target5)) {
      var _a = target5.getBBox(), width8 = _a.width, height8 = _a.height;
      return !width8 && !height8;
    }
    var _b = target5, offsetWidth2 = _b.offsetWidth, offsetHeight2 = _b.offsetHeight;
    return !(offsetWidth2 || offsetHeight2 || target5.getClientRects().length);
  };
  var isElement = function(obj) {
    var _a;
    if (obj instanceof Element) {
      return true;
    }
    var scope2 = (_a = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
    return !!(scope2 && obj instanceof scope2.Element);
  };
  var isReplacedElement = function(target5) {
    switch (target5.tagName) {
      case "INPUT":
        if (target5.type !== "image") {
          break;
        }
      case "VIDEO":
      case "AUDIO":
      case "EMBED":
      case "OBJECT":
      case "CANVAS":
      case "IFRAME":
      case "IMG":
        return true;
    }
    return false;
  };

  // node_modules/@juggle/resize-observer/lib/utils/global.js
  var global2 = typeof window !== "undefined" ? window : {};

  // node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js
  var cache = /* @__PURE__ */ new WeakMap();
  var scrollRegexp = /auto|scroll/;
  var verticalRegexp = /^tb|vertical/;
  var IE = /msie|trident/i.test(global2.navigator && global2.navigator.userAgent);
  var parseDimension = function(pixel) {
    return parseFloat(pixel || "0");
  };
  var size2 = function(inlineSize, blockSize, switchSizes) {
    if (inlineSize === void 0) {
      inlineSize = 0;
    }
    if (blockSize === void 0) {
      blockSize = 0;
    }
    if (switchSizes === void 0) {
      switchSizes = false;
    }
    return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
  };
  var zeroBoxes = freeze2({
    devicePixelContentBoxSize: size2(),
    borderBoxSize: size2(),
    contentBoxSize: size2(),
    contentRect: new DOMRectReadOnly(0, 0, 0, 0)
  });
  var calculateBoxSizes = function(target5, forceRecalculation) {
    if (forceRecalculation === void 0) {
      forceRecalculation = false;
    }
    if (cache.has(target5) && !forceRecalculation) {
      return cache.get(target5);
    }
    if (isHidden(target5)) {
      cache.set(target5, zeroBoxes);
      return zeroBoxes;
    }
    var cs = getComputedStyle(target5);
    var svg = isSVG(target5) && target5.ownerSVGElement && target5.getBBox();
    var removePadding = !IE && cs.boxSizing === "border-box";
    var switchSizes = verticalRegexp.test(cs.writingMode || "");
    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
    var horizontalPadding = paddingLeft + paddingRight;
    var verticalPadding = paddingTop + paddingBottom;
    var horizontalBorderArea = borderLeft + borderRight;
    var verticalBorderArea = borderTop + borderBottom;
    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target5.offsetHeight - verticalBorderArea - target5.clientHeight;
    var verticalScrollbarThickness = !canScrollVertically ? 0 : target5.offsetWidth - horizontalBorderArea - target5.clientWidth;
    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
    var boxes = freeze2({
      devicePixelContentBoxSize: size2(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
      borderBoxSize: size2(borderBoxWidth, borderBoxHeight, switchSizes),
      contentBoxSize: size2(contentWidth, contentHeight, switchSizes),
      contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
    });
    cache.set(target5, boxes);
    return boxes;
  };
  var calculateBoxSize = function(target5, observedBox, forceRecalculation) {
    var _a = calculateBoxSizes(target5, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
    switch (observedBox) {
      case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
        return devicePixelContentBoxSize;
      case ResizeObserverBoxOptions.BORDER_BOX:
        return borderBoxSize;
      default:
        return contentBoxSize;
    }
  };

  // node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js
  var ResizeObserverEntry = function() {
    function ResizeObserverEntry2(target5) {
      var boxes = calculateBoxSizes(target5);
      this.target = target5;
      this.contentRect = boxes.contentRect;
      this.borderBoxSize = freeze2([boxes.borderBoxSize]);
      this.contentBoxSize = freeze2([boxes.contentBoxSize]);
      this.devicePixelContentBoxSize = freeze2([boxes.devicePixelContentBoxSize]);
    }
    return ResizeObserverEntry2;
  }();

  // node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js
  var calculateDepthForNode = function(node) {
    if (isHidden(node)) {
      return Infinity;
    }
    var depth = 0;
    var parent2 = node.parentNode;
    while (parent2) {
      depth += 1;
      parent2 = parent2.parentNode;
    }
    return depth;
  };

  // node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js
  var broadcastActiveObservations = function() {
    var shallowestDepth = Infinity;
    var callbacks2 = [];
    resizeObservers.forEach(function processObserver(ro) {
      if (ro.activeTargets.length === 0) {
        return;
      }
      var entries = [];
      ro.activeTargets.forEach(function processTarget(ot) {
        var entry = new ResizeObserverEntry(ot.target);
        var targetDepth = calculateDepthForNode(ot.target);
        entries.push(entry);
        ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
        if (targetDepth < shallowestDepth) {
          shallowestDepth = targetDepth;
        }
      });
      callbacks2.push(function resizeObserverCallback() {
        ro.callback.call(ro.observer, entries, ro.observer);
      });
      ro.activeTargets.splice(0, ro.activeTargets.length);
    });
    for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
      var callback = callbacks_1[_i];
      callback();
    }
    return shallowestDepth;
  };

  // node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js
  var gatherActiveObservationsAtDepth = function(depth) {
    resizeObservers.forEach(function processObserver(ro) {
      ro.activeTargets.splice(0, ro.activeTargets.length);
      ro.skippedTargets.splice(0, ro.skippedTargets.length);
      ro.observationTargets.forEach(function processTarget(ot) {
        if (ot.isActive()) {
          if (calculateDepthForNode(ot.target) > depth) {
            ro.activeTargets.push(ot);
          } else {
            ro.skippedTargets.push(ot);
          }
        }
      });
    });
  };

  // node_modules/@juggle/resize-observer/lib/utils/process.js
  var process2 = function() {
    var depth = 0;
    gatherActiveObservationsAtDepth(depth);
    while (hasActiveObservations()) {
      depth = broadcastActiveObservations();
      gatherActiveObservationsAtDepth(depth);
    }
    if (hasSkippedObservations()) {
      deliverResizeLoopError();
    }
    return depth > 0;
  };

  // node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js
  var trigger;
  var callbacks = [];
  var notify = function() {
    return callbacks.splice(0).forEach(function(cb) {
      return cb();
    });
  };
  var queueMicroTask = function(callback) {
    if (!trigger) {
      var toggle_1 = 0;
      var el_1 = document.createTextNode("");
      var config = { characterData: true };
      new MutationObserver(function() {
        return notify();
      }).observe(el_1, config);
      trigger = function() {
        el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
      };
    }
    callbacks.push(callback);
    trigger();
  };

  // node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js
  var queueResizeObserver = function(cb) {
    queueMicroTask(function ResizeObserver3() {
      requestAnimationFrame(cb);
    });
  };

  // node_modules/@juggle/resize-observer/lib/utils/scheduler.js
  var watching = 0;
  var isWatching = function() {
    return !!watching;
  };
  var CATCH_PERIOD = 250;
  var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
  var events = [
    "resize",
    "load",
    "transitionend",
    "animationend",
    "animationstart",
    "animationiteration",
    "keyup",
    "keydown",
    "mouseup",
    "mousedown",
    "mouseover",
    "mouseout",
    "blur",
    "focus"
  ];
  var time3 = function(timeout2) {
    if (timeout2 === void 0) {
      timeout2 = 0;
    }
    return Date.now() + timeout2;
  };
  var scheduled = false;
  var Scheduler = function() {
    function Scheduler2() {
      var _this = this;
      this.stopped = true;
      this.listener = function() {
        return _this.schedule();
      };
    }
    Scheduler2.prototype.run = function(timeout2) {
      var _this = this;
      if (timeout2 === void 0) {
        timeout2 = CATCH_PERIOD;
      }
      if (scheduled) {
        return;
      }
      scheduled = true;
      var until = time3(timeout2);
      queueResizeObserver(function() {
        var elementsHaveResized = false;
        try {
          elementsHaveResized = process2();
        } finally {
          scheduled = false;
          timeout2 = until - time3();
          if (!isWatching()) {
            return;
          }
          if (elementsHaveResized) {
            _this.run(1e3);
          } else if (timeout2 > 0) {
            _this.run(timeout2);
          } else {
            _this.start();
          }
        }
      });
    };
    Scheduler2.prototype.schedule = function() {
      this.stop();
      this.run();
    };
    Scheduler2.prototype.observe = function() {
      var _this = this;
      var cb = function() {
        return _this.observer && _this.observer.observe(document.body, observerConfig);
      };
      document.body ? cb() : global2.addEventListener("DOMContentLoaded", cb);
    };
    Scheduler2.prototype.start = function() {
      var _this = this;
      if (this.stopped) {
        this.stopped = false;
        this.observer = new MutationObserver(this.listener);
        this.observe();
        events.forEach(function(name15) {
          return global2.addEventListener(name15, _this.listener, true);
        });
      }
    };
    Scheduler2.prototype.stop = function() {
      var _this = this;
      if (!this.stopped) {
        this.observer && this.observer.disconnect();
        events.forEach(function(name15) {
          return global2.removeEventListener(name15, _this.listener, true);
        });
        this.stopped = true;
      }
    };
    return Scheduler2;
  }();
  var scheduler = new Scheduler();
  var updateCount = function(n) {
    !watching && n > 0 && scheduler.start();
    watching += n;
    !watching && scheduler.stop();
  };

  // node_modules/@juggle/resize-observer/lib/ResizeObservation.js
  var skipNotifyOnElement = function(target5) {
    return !isSVG(target5) && !isReplacedElement(target5) && getComputedStyle(target5).display === "inline";
  };
  var ResizeObservation = function() {
    function ResizeObservation2(target5, observedBox) {
      this.target = target5;
      this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
      this.lastReportedSize = {
        inlineSize: 0,
        blockSize: 0
      };
    }
    ResizeObservation2.prototype.isActive = function() {
      var size5 = calculateBoxSize(this.target, this.observedBox, true);
      if (skipNotifyOnElement(this.target)) {
        this.lastReportedSize = size5;
      }
      if (this.lastReportedSize.inlineSize !== size5.inlineSize || this.lastReportedSize.blockSize !== size5.blockSize) {
        return true;
      }
      return false;
    };
    return ResizeObservation2;
  }();

  // node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js
  var ResizeObserverDetail = function() {
    function ResizeObserverDetail2(resizeObserver, callback) {
      this.activeTargets = [];
      this.skippedTargets = [];
      this.observationTargets = [];
      this.observer = resizeObserver;
      this.callback = callback;
    }
    return ResizeObserverDetail2;
  }();

  // node_modules/@juggle/resize-observer/lib/ResizeObserverController.js
  var observerMap = /* @__PURE__ */ new WeakMap();
  var getObservationIndex = function(observationTargets, target5) {
    for (var i2 = 0; i2 < observationTargets.length; i2 += 1) {
      if (observationTargets[i2].target === target5) {
        return i2;
      }
    }
    return -1;
  };
  var ResizeObserverController = function() {
    function ResizeObserverController2() {
    }
    ResizeObserverController2.connect = function(resizeObserver, callback) {
      var detail = new ResizeObserverDetail(resizeObserver, callback);
      observerMap.set(resizeObserver, detail);
    };
    ResizeObserverController2.observe = function(resizeObserver, target5, options2) {
      var detail = observerMap.get(resizeObserver);
      var firstObservation = detail.observationTargets.length === 0;
      if (getObservationIndex(detail.observationTargets, target5) < 0) {
        firstObservation && resizeObservers.push(detail);
        detail.observationTargets.push(new ResizeObservation(target5, options2 && options2.box));
        updateCount(1);
        scheduler.schedule();
      }
    };
    ResizeObserverController2.unobserve = function(resizeObserver, target5) {
      var detail = observerMap.get(resizeObserver);
      var index5 = getObservationIndex(detail.observationTargets, target5);
      var lastObservation = detail.observationTargets.length === 1;
      if (index5 >= 0) {
        lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
        detail.observationTargets.splice(index5, 1);
        updateCount(-1);
      }
    };
    ResizeObserverController2.disconnect = function(resizeObserver) {
      var _this = this;
      var detail = observerMap.get(resizeObserver);
      detail.observationTargets.slice().forEach(function(ot) {
        return _this.unobserve(resizeObserver, ot.target);
      });
      detail.activeTargets.splice(0, detail.activeTargets.length);
    };
    return ResizeObserverController2;
  }();

  // node_modules/@juggle/resize-observer/lib/ResizeObserver.js
  var ResizeObserver = function() {
    function ResizeObserver3(callback) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
      }
      if (typeof callback !== "function") {
        throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
      }
      ResizeObserverController.connect(this, callback);
    }
    ResizeObserver3.prototype.observe = function(target5, options2) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
      }
      if (!isElement(target5)) {
        throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
      }
      ResizeObserverController.observe(this, target5, options2);
    };
    ResizeObserver3.prototype.unobserve = function(target5) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
      }
      if (!isElement(target5)) {
        throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
      }
      ResizeObserverController.unobserve(this, target5);
    };
    ResizeObserver3.prototype.disconnect = function() {
      ResizeObserverController.disconnect(this);
    };
    ResizeObserver3.toString = function() {
      return "function ResizeObserver () { [polyfill code] }";
    };
    return ResizeObserver3;
  }();

  // node_modules/@react-hook/passive-layout-effect/dist/module/index.js
  var import_react5 = __toESM(require_react());
  var usePassiveLayoutEffect = import_react5.default[typeof document !== "undefined" && document.createElement !== void 0 ? "useLayoutEffect" : "useEffect"];
  var module_default = usePassiveLayoutEffect;

  // node_modules/@react-hook/latest/dist/module/index.js
  var React6 = __toESM(require_react());
  var useLatest = (current) => {
    const storedValue = React6.useRef(current);
    React6.useEffect(() => {
      storedValue.current = current;
    });
    return storedValue;
  };
  var module_default2 = useLatest;

  // node_modules/@react-hook/resize-observer/dist/module/index.js
  var ResizeObserver2 = typeof window !== "undefined" && "ResizeObserver" in window ? window.ResizeObserver : ResizeObserver;
  function _ref() {
  }
  function useResizeObserver(target5, callback) {
    const resizeObserver = getResizeObserver();
    const storedCallback = module_default2(callback);
    module_default(() => {
      let didUnsubscribe = false;
      const targetEl = target5 && "current" in target5 ? target5.current : target5;
      if (!targetEl)
        return _ref;
      function cb(entry, observer) {
        if (didUnsubscribe)
          return;
        storedCallback.current(entry, observer);
      }
      resizeObserver.subscribe(targetEl, cb);
      return () => {
        didUnsubscribe = true;
        resizeObserver.unsubscribe(targetEl, cb);
      };
    }, [target5, resizeObserver, storedCallback]);
    return resizeObserver.observer;
  }
  function createResizeObserver() {
    let ticking = false;
    let allEntries = [];
    const callbacks2 = /* @__PURE__ */ new Map();
    const observer = new ResizeObserver2((entries, obs) => {
      allEntries = allEntries.concat(entries);
      function _ref2() {
        const triggered = /* @__PURE__ */ new Set();
        for (let i2 = 0; i2 < allEntries.length; i2++) {
          if (triggered.has(allEntries[i2].target))
            continue;
          triggered.add(allEntries[i2].target);
          const cbs = callbacks2.get(allEntries[i2].target);
          cbs === null || cbs === void 0 ? void 0 : cbs.forEach((cb) => cb(allEntries[i2], obs));
        }
        allEntries = [];
        ticking = false;
      }
      if (!ticking) {
        window.requestAnimationFrame(_ref2);
      }
      ticking = true;
    });
    return {
      observer,
      subscribe(target5, callback) {
        var _callbacks$get;
        observer.observe(target5);
        const cbs = (_callbacks$get = callbacks2.get(target5)) !== null && _callbacks$get !== void 0 ? _callbacks$get : [];
        cbs.push(callback);
        callbacks2.set(target5, cbs);
      },
      unsubscribe(target5, callback) {
        var _callbacks$get2;
        const cbs = (_callbacks$get2 = callbacks2.get(target5)) !== null && _callbacks$get2 !== void 0 ? _callbacks$get2 : [];
        if (cbs.length === 1) {
          observer.unobserve(target5);
          callbacks2.delete(target5);
          return;
        }
        const cbIndex = cbs.indexOf(callback);
        if (cbIndex !== -1)
          cbs.splice(cbIndex, 1);
        callbacks2.set(target5, cbs);
      }
    };
  }
  var _resizeObserver;
  var getResizeObserver = () => !_resizeObserver ? _resizeObserver = createResizeObserver() : _resizeObserver;
  var module_default3 = useResizeObserver;

  // output/Foreign.Hooks/foreign.js
  var _useResizeObserver = function(props) {
    return module_default3(props.ref, function(element2) {
      return props.callback(element2.contentRect);
    });
  };

  // output/Effect.Aff/foreign.js
  var Aff = function() {
    var EMPTY = {};
    var PURE = "Pure";
    var THROW = "Throw";
    var CATCH = "Catch";
    var SYNC = "Sync";
    var ASYNC = "Async";
    var BIND = "Bind";
    var BRACKET = "Bracket";
    var FORK = "Fork";
    var SEQ = "Sequential";
    var MAP = "Map";
    var APPLY = "Apply";
    var ALT = "Alt";
    var CONS = "Cons";
    var RESUME = "Resume";
    var RELEASE = "Release";
    var FINALIZER = "Finalizer";
    var FINALIZED = "Finalized";
    var FORKED = "Forked";
    var FIBER = "Fiber";
    var THUNK = "Thunk";
    function Aff2(tag, _1, _2, _3) {
      this.tag = tag;
      this._1 = _1;
      this._2 = _2;
      this._3 = _3;
    }
    function AffCtr(tag) {
      var fn = function(_1, _2, _3) {
        return new Aff2(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }
    function nonCanceler(error2) {
      return new Aff2(PURE, void 0);
    }
    function runEff(eff) {
      try {
        eff();
      } catch (error2) {
        setTimeout(function() {
          throw error2;
        }, 0);
      }
    }
    function runSync(left2, right2, eff) {
      try {
        return right2(eff());
      } catch (error2) {
        return left2(error2);
      }
    }
    function runAsync(left2, eff, k2) {
      try {
        return eff(k2)();
      } catch (error2) {
        k2(left2(error2))();
        return nonCanceler;
      }
    }
    var Scheduler2 = function() {
      var limit = 1024;
      var size5 = 0;
      var ix = 0;
      var queue = new Array(limit);
      var draining = false;
      function drain() {
        var thunk;
        draining = true;
        while (size5 !== 0) {
          size5--;
          thunk = queue[ix];
          queue[ix] = void 0;
          ix = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }
      return {
        isDraining: function() {
          return draining;
        },
        enqueue: function(cb) {
          var i2, tmp;
          if (size5 === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }
          queue[(ix + size5) % limit] = cb;
          size5++;
          if (!draining) {
            drain();
          }
        }
      };
    }();
    function Supervisor(util) {
      var fibers = {};
      var fiberId = 0;
      var count2 = 0;
      return {
        register: function(fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function(result) {
              return function() {
                count2--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count2++;
        },
        isEmpty: function() {
          return count2 === 0;
        },
        killAll: function(killError, cb) {
          return function() {
            if (count2 === 0) {
              return cb();
            }
            var killCount = 0;
            var kills = {};
            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function(result) {
                return function() {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function() {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }
            for (var k2 in fibers) {
              if (fibers.hasOwnProperty(k2)) {
                killCount++;
                kill(k2);
              }
            }
            fibers = {};
            fiberId = 0;
            count2 = 0;
            return function(error2) {
              return new Aff2(SYNC, function() {
                for (var k3 in kills) {
                  if (kills.hasOwnProperty(k3)) {
                    kills[k3]();
                  }
                }
              });
            };
          };
        }
      };
    }
    var SUSPENDED = 0;
    var CONTINUE = 1;
    var STEP_BIND = 2;
    var STEP_RESULT = 3;
    var PENDING = 4;
    var RETURN = 5;
    var COMPLETED = 6;
    function Fiber(util, supervisor, aff) {
      var runTick = 0;
      var status = SUSPENDED;
      var step3 = aff;
      var fail = null;
      var interrupt = null;
      var bhead = null;
      var btail = null;
      var attempts = null;
      var bracketCount = 0;
      var joinId = 0;
      var joins = null;
      var rethrow = true;
      function run3(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp = null;
          result = null;
          attempt = null;
          switch (status) {
            case STEP_BIND:
              status = CONTINUE;
              try {
                step3 = bhead(step3);
                if (btail === null) {
                  bhead = null;
                } else {
                  bhead = btail._1;
                  btail = btail._2;
                }
              } catch (e) {
                status = RETURN;
                fail = util.left(e);
                step3 = null;
              }
              break;
            case STEP_RESULT:
              if (util.isLeft(step3)) {
                status = RETURN;
                fail = step3;
                step3 = null;
              } else if (bhead === null) {
                status = RETURN;
              } else {
                status = STEP_BIND;
                step3 = util.fromRight(step3);
              }
              break;
            case CONTINUE:
              switch (step3.tag) {
                case BIND:
                  if (bhead) {
                    btail = new Aff2(CONS, bhead, btail);
                  }
                  bhead = step3._2;
                  status = CONTINUE;
                  step3 = step3._1;
                  break;
                case PURE:
                  if (bhead === null) {
                    status = RETURN;
                    step3 = util.right(step3._1);
                  } else {
                    status = STEP_BIND;
                    step3 = step3._1;
                  }
                  break;
                case SYNC:
                  status = STEP_RESULT;
                  step3 = runSync(util.left, util.right, step3._1);
                  break;
                case ASYNC:
                  status = PENDING;
                  step3 = runAsync(util.left, step3._1, function(result2) {
                    return function() {
                      if (runTick !== localRunTick) {
                        return;
                      }
                      runTick++;
                      Scheduler2.enqueue(function() {
                        if (runTick !== localRunTick + 1) {
                          return;
                        }
                        status = STEP_RESULT;
                        step3 = result2;
                        run3(runTick);
                      });
                    };
                  });
                  return;
                case THROW:
                  status = RETURN;
                  fail = util.left(step3._1);
                  step3 = null;
                  break;
                case CATCH:
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step3, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step3 = step3._1;
                  break;
                case BRACKET:
                  bracketCount++;
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step3, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step3 = step3._1;
                  break;
                case FORK:
                  status = STEP_RESULT;
                  tmp = Fiber(util, supervisor, step3._2);
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
                  if (step3._1) {
                    tmp.run();
                  }
                  step3 = util.right(tmp);
                  break;
                case SEQ:
                  status = CONTINUE;
                  step3 = sequential2(util, supervisor, step3._1);
                  break;
              }
              break;
            case RETURN:
              bhead = null;
              btail = null;
              if (attempts === null) {
                status = COMPLETED;
                step3 = interrupt || fail || step3;
              } else {
                tmp = attempts._3;
                attempt = attempts._1;
                attempts = attempts._2;
                switch (attempt.tag) {
                  case CATCH:
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      status = RETURN;
                    } else if (fail) {
                      status = CONTINUE;
                      step3 = attempt._2(util.fromLeft(fail));
                      fail = null;
                    }
                    break;
                  case RESUME:
                    if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                      status = RETURN;
                    } else {
                      bhead = attempt._1;
                      btail = attempt._2;
                      status = STEP_BIND;
                      step3 = util.fromRight(step3);
                    }
                    break;
                  case BRACKET:
                    bracketCount--;
                    if (fail === null) {
                      result = util.fromRight(step3);
                      attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                      if (interrupt === tmp || bracketCount > 0) {
                        status = CONTINUE;
                        step3 = attempt._3(result);
                      }
                    }
                    break;
                  case RELEASE:
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail), attempts, interrupt);
                    status = CONTINUE;
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      step3 = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                    } else if (fail) {
                      step3 = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                    } else {
                      step3 = attempt._1.completed(util.fromRight(step3))(attempt._2);
                    }
                    fail = null;
                    bracketCount++;
                    break;
                  case FINALIZER:
                    bracketCount++;
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail), attempts, interrupt);
                    status = CONTINUE;
                    step3 = attempt._1;
                    break;
                  case FINALIZED:
                    bracketCount--;
                    status = RETURN;
                    step3 = attempt._1;
                    fail = attempt._2;
                    break;
                }
              }
              break;
            case COMPLETED:
              for (var k2 in joins) {
                if (joins.hasOwnProperty(k2)) {
                  rethrow = rethrow && joins[k2].rethrow;
                  runEff(joins[k2].handler(step3));
                }
              }
              joins = null;
              if (interrupt && fail) {
                setTimeout(function() {
                  throw util.fromLeft(fail);
                }, 0);
              } else if (util.isLeft(step3) && rethrow) {
                setTimeout(function() {
                  if (rethrow) {
                    throw util.fromLeft(step3);
                  }
                }, 0);
              }
              return;
            case SUSPENDED:
              status = CONTINUE;
              break;
            case PENDING:
              return;
          }
        }
      }
      function onComplete(join3) {
        return function() {
          if (status === COMPLETED) {
            rethrow = rethrow && join3.rethrow;
            join3.handler(step3)();
            return function() {
            };
          }
          var jid = joinId++;
          joins = joins || {};
          joins[jid] = join3;
          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }
      function kill(error2, cb) {
        return function() {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function() {
            };
          }
          var canceler = onComplete({
            rethrow: false,
            handler: function() {
              return cb(util.right(void 0));
            }
          })();
          switch (status) {
            case SUSPENDED:
              interrupt = util.left(error2);
              status = COMPLETED;
              step3 = interrupt;
              run3(runTick);
              break;
            case PENDING:
              if (interrupt === null) {
                interrupt = util.left(error2);
              }
              if (bracketCount === 0) {
                if (status === PENDING) {
                  attempts = new Aff2(CONS, new Aff2(FINALIZER, step3(error2)), attempts, interrupt);
                }
                status = RETURN;
                step3 = null;
                fail = null;
                run3(++runTick);
              }
              break;
            default:
              if (interrupt === null) {
                interrupt = util.left(error2);
              }
              if (bracketCount === 0) {
                status = RETURN;
                step3 = null;
                fail = null;
              }
          }
          return canceler;
        };
      }
      function join2(cb) {
        return function() {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run3(runTick);
          }
          return canceler;
        };
      }
      return {
        kill,
        join: join2,
        onComplete,
        isSuspended: function() {
          return status === SUSPENDED;
        },
        run: function() {
          if (status === SUSPENDED) {
            if (!Scheduler2.isDraining()) {
              Scheduler2.enqueue(function() {
                run3(runTick);
              });
            } else {
              run3(runTick);
            }
          }
        }
      };
    }
    function runPar(util, supervisor, par, cb) {
      var fiberId = 0;
      var fibers = {};
      var killId = 0;
      var kills = {};
      var early = new Error("[ParAff] Early exit");
      var interrupt = null;
      var root2 = EMPTY;
      function kill(error2, par2, cb2) {
        var step3 = par2;
        var head3 = null;
        var tail = null;
        var count2 = 0;
        var kills2 = {};
        var tmp, kid;
        loop:
          while (true) {
            tmp = null;
            switch (step3.tag) {
              case FORKED:
                if (step3._3 === EMPTY) {
                  tmp = fibers[step3._1];
                  kills2[count2++] = tmp.kill(error2, function(result) {
                    return function() {
                      count2--;
                      if (count2 === 0) {
                        cb2(result)();
                      }
                    };
                  });
                }
                if (head3 === null) {
                  break loop;
                }
                step3 = head3._2;
                if (tail === null) {
                  head3 = null;
                } else {
                  head3 = tail._1;
                  tail = tail._2;
                }
                break;
              case MAP:
                step3 = step3._2;
                break;
              case APPLY:
              case ALT:
                if (head3) {
                  tail = new Aff2(CONS, head3, tail);
                }
                head3 = step3;
                step3 = step3._1;
                break;
            }
          }
        if (count2 === 0) {
          cb2(util.right(void 0))();
        } else {
          kid = 0;
          tmp = count2;
          for (; kid < tmp; kid++) {
            kills2[kid] = kills2[kid]();
          }
        }
        return kills2;
      }
      function join2(result, head3, tail) {
        var fail, step3, lhs, rhs, tmp, kid;
        if (util.isLeft(result)) {
          fail = result;
          step3 = null;
        } else {
          step3 = result;
          fail = null;
        }
        loop:
          while (true) {
            lhs = null;
            rhs = null;
            tmp = null;
            kid = null;
            if (interrupt !== null) {
              return;
            }
            if (head3 === null) {
              cb(fail || step3)();
              return;
            }
            if (head3._3 !== EMPTY) {
              return;
            }
            switch (head3.tag) {
              case MAP:
                if (fail === null) {
                  head3._3 = util.right(head3._1(util.fromRight(step3)));
                  step3 = head3._3;
                } else {
                  head3._3 = fail;
                }
                break;
              case APPLY:
                lhs = head3._1._3;
                rhs = head3._2._3;
                if (fail) {
                  head3._3 = fail;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, fail === lhs ? head3._2 : head3._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail === null) {
                        join2(fail, null, null);
                      } else {
                        join2(fail, tail._1, tail._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                } else if (lhs === EMPTY || rhs === EMPTY) {
                  return;
                } else {
                  step3 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                  head3._3 = step3;
                }
                break;
              case ALT:
                lhs = head3._1._3;
                rhs = head3._2._3;
                if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                  return;
                }
                if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                  fail = step3 === lhs ? rhs : lhs;
                  step3 = null;
                  head3._3 = fail;
                } else {
                  head3._3 = step3;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, step3 === lhs ? head3._2 : head3._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail === null) {
                        join2(step3, null, null);
                      } else {
                        join2(step3, tail._1, tail._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                }
                break;
            }
            if (tail === null) {
              head3 = null;
            } else {
              head3 = tail._1;
              tail = tail._2;
            }
          }
      }
      function resolve(fiber) {
        return function(result) {
          return function() {
            delete fibers[fiber._1];
            fiber._3 = result;
            join2(result, fiber._2._1, fiber._2._2);
          };
        };
      }
      function run3() {
        var status = CONTINUE;
        var step3 = par;
        var head3 = null;
        var tail = null;
        var tmp, fid;
        loop:
          while (true) {
            tmp = null;
            fid = null;
            switch (status) {
              case CONTINUE:
                switch (step3.tag) {
                  case MAP:
                    if (head3) {
                      tail = new Aff2(CONS, head3, tail);
                    }
                    head3 = new Aff2(MAP, step3._1, EMPTY, EMPTY);
                    step3 = step3._2;
                    break;
                  case APPLY:
                    if (head3) {
                      tail = new Aff2(CONS, head3, tail);
                    }
                    head3 = new Aff2(APPLY, EMPTY, step3._2, EMPTY);
                    step3 = step3._1;
                    break;
                  case ALT:
                    if (head3) {
                      tail = new Aff2(CONS, head3, tail);
                    }
                    head3 = new Aff2(ALT, EMPTY, step3._2, EMPTY);
                    step3 = step3._1;
                    break;
                  default:
                    fid = fiberId++;
                    status = RETURN;
                    tmp = step3;
                    step3 = new Aff2(FORKED, fid, new Aff2(CONS, head3, tail), EMPTY);
                    tmp = Fiber(util, supervisor, tmp);
                    tmp.onComplete({
                      rethrow: false,
                      handler: resolve(step3)
                    })();
                    fibers[fid] = tmp;
                    if (supervisor) {
                      supervisor.register(tmp);
                    }
                }
                break;
              case RETURN:
                if (head3 === null) {
                  break loop;
                }
                if (head3._1 === EMPTY) {
                  head3._1 = step3;
                  status = CONTINUE;
                  step3 = head3._2;
                  head3._2 = EMPTY;
                } else {
                  head3._2 = step3;
                  step3 = head3;
                  if (tail === null) {
                    head3 = null;
                  } else {
                    head3 = tail._1;
                    tail = tail._2;
                  }
                }
            }
          }
        root2 = step3;
        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }
      function cancel(error2, cb2) {
        interrupt = util.left(error2);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }
        kills = null;
        var newKills = kill(error2, root2, cb2);
        return function(killError) {
          return new Aff2(ASYNC, function(killCb) {
            return function() {
              for (var kid2 in newKills) {
                if (newKills.hasOwnProperty(kid2)) {
                  newKills[kid2]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }
      run3();
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            return cancel(killError, killCb);
          };
        });
      };
    }
    function sequential2(util, supervisor, par) {
      return new Aff2(ASYNC, function(cb) {
        return function() {
          return runPar(util, supervisor, par, cb);
        };
      });
    }
    Aff2.EMPTY = EMPTY;
    Aff2.Pure = AffCtr(PURE);
    Aff2.Throw = AffCtr(THROW);
    Aff2.Catch = AffCtr(CATCH);
    Aff2.Sync = AffCtr(SYNC);
    Aff2.Async = AffCtr(ASYNC);
    Aff2.Bind = AffCtr(BIND);
    Aff2.Bracket = AffCtr(BRACKET);
    Aff2.Fork = AffCtr(FORK);
    Aff2.Seq = AffCtr(SEQ);
    Aff2.ParMap = AffCtr(MAP);
    Aff2.ParApply = AffCtr(APPLY);
    Aff2.ParAlt = AffCtr(ALT);
    Aff2.Fiber = Fiber;
    Aff2.Supervisor = Supervisor;
    Aff2.Scheduler = Scheduler2;
    Aff2.nonCanceler = nonCanceler;
    return Aff2;
  }();
  var _pure = Aff.Pure;
  var _throwError = Aff.Throw;
  function _catchError(aff) {
    return function(k2) {
      return Aff.Catch(aff, k2);
    };
  }
  function _map(f) {
    return function(aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function(value12) {
          return Aff.Pure(f(value12));
        });
      }
    };
  }
  function _bind(aff) {
    return function(k2) {
      return Aff.Bind(aff, k2);
    };
  }
  var _liftEffect = Aff.Sync;
  var makeAff = Aff.Async;
  function _makeFiber(util, aff) {
    return function() {
      return Aff.Fiber(util, null, aff);
    };
  }
  var _delay = function() {
    function setDelay(n, k2) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k2);
      } else {
        return setTimeout(k2, n);
      }
    }
    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }
    return function(right2, ms) {
      return Aff.Async(function(cb) {
        return function() {
          var timer2 = setDelay(ms, cb(right2()));
          return function() {
            return Aff.Sync(function() {
              return right2(clearDelay(ms, timer2));
            });
          };
        };
      });
    };
  }();
  var _sequential = Aff.Seq;

  // output/Type.Equality/index.js
  var refl = {
    proof: function(a3) {
      return a3;
    },
    Coercible0: function() {
      return void 0;
    }
  };

  // output/Effect.Aff/index.js
  var $runtime_lazy4 = function(name15, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var pure4 = /* @__PURE__ */ pure(applicativeEffect);
  var $$void2 = /* @__PURE__ */ $$void(functorEffect);
  var map11 = /* @__PURE__ */ map(functorEffect);
  var Canceler = function(x2) {
    return x2;
  };
  var functorAff = {
    map: _map
  };
  var ffiUtil = /* @__PURE__ */ function() {
    var unsafeFromRight = function(v) {
      if (v instanceof Right) {
        return v.value0;
      }
      ;
      if (v instanceof Left) {
        return unsafeCrashWith("unsafeFromRight: Left");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 412, column 21 - line 414, column 54): " + [v.constructor.name]);
    };
    var unsafeFromLeft = function(v) {
      if (v instanceof Left) {
        return v.value0;
      }
      ;
      if (v instanceof Right) {
        return unsafeCrashWith("unsafeFromLeft: Right");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 407, column 20 - line 409, column 55): " + [v.constructor.name]);
    };
    var isLeft = function(v) {
      if (v instanceof Left) {
        return true;
      }
      ;
      if (v instanceof Right) {
        return false;
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 402, column 12 - line 404, column 21): " + [v.constructor.name]);
    };
    return {
      isLeft,
      fromLeft: unsafeFromLeft,
      fromRight: unsafeFromRight,
      left: Left.create,
      right: Right.create
    };
  }();
  var makeFiber = function(aff) {
    return _makeFiber(ffiUtil, aff);
  };
  var launchAff = function(aff) {
    return function __do4() {
      var fiber = makeFiber(aff)();
      fiber.run();
      return fiber;
    };
  };
  var launchAff_ = function($74) {
    return $$void2(launchAff($74));
  };
  var delay = function(v) {
    return _delay(Right.create, v);
  };
  var monadAff = {
    Applicative0: function() {
      return applicativeAff;
    },
    Bind1: function() {
      return bindAff;
    }
  };
  var bindAff = {
    bind: _bind,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var applicativeAff = {
    pure: _pure,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var $lazy_applyAff = /* @__PURE__ */ $runtime_lazy4("applyAff", "Effect.Aff", function() {
    return {
      apply: ap(monadAff),
      Functor0: function() {
        return functorAff;
      }
    };
  });
  var bind1 = /* @__PURE__ */ bind(bindAff);
  var monadEffectAff = {
    liftEffect: _liftEffect,
    Monad0: function() {
      return monadAff;
    }
  };
  var liftEffect2 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var effectCanceler = function($75) {
    return Canceler($$const(liftEffect2($75)));
  };
  var killFiber = function(e) {
    return function(v) {
      return bind1(liftEffect2(v.isSuspended))(function(suspended) {
        if (suspended) {
          return liftEffect2($$void2(v.kill(e, $$const(pure4(unit)))));
        }
        ;
        return makeAff(function(k2) {
          return map11(effectCanceler)(v.kill(e, k2));
        });
      });
    };
  };
  var monadThrowAff = {
    throwError: _throwError,
    Monad0: function() {
      return monadAff;
    }
  };
  var monadErrorAff = {
    catchError: _catchError,
    MonadThrow0: function() {
      return monadThrowAff;
    }
  };

  // output/React.Basic.Hooks.Aff/index.js
  var coerceHook2 = /* @__PURE__ */ coerceHook();
  var bind3 = /* @__PURE__ */ bind2(ixBindRender);
  var discard3 = /* @__PURE__ */ discard2(ixBindRender);
  var bind12 = /* @__PURE__ */ bind(bindAff);
  var liftEffect3 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var $$try2 = /* @__PURE__ */ $$try(monadErrorAff);
  var pure1 = /* @__PURE__ */ pure(applicativeEffect);
  var throwError2 = /* @__PURE__ */ throwError(monadThrowEffect);
  var useAff = function(dictEq) {
    var useEffect1 = useEffect(dictEq);
    return function(deps) {
      return function(aff) {
        return coerceHook2(bind3(useState(Nothing.value))(function(v) {
          return discard3(useEffect1(deps)(function __do4() {
            v.value1($$const(Nothing.value))();
            var fiber = launchAff(bind12($$try2(aff))(function(r2) {
              return liftEffect3(v.value1(function(v1) {
                return new Just(r2);
              }));
            }))();
            return launchAff_(killFiber(error("Stale request cancelled"))(fiber));
          }))(function() {
            return unsafeRenderEffect(function() {
              if (v.value0 instanceof Just && v.value0.value0 instanceof Left) {
                return throwError2(v.value0.value0.value0);
              }
              ;
              if (v.value0 instanceof Just && v.value0.value0 instanceof Right) {
                return pure1(new Just(v.value0.value0.value0));
              }
              ;
              if (v.value0 instanceof Nothing) {
                return pure1(Nothing.value);
              }
              ;
              throw new Error("Failed pattern match at React.Basic.Hooks.Aff (line 53, column 24 - line 56, column 30): " + [v.value0.constructor.name]);
            }());
          });
        }));
      };
    };
  };

  // output/Web.DOM.Element/foreign.js
  var getProp = function(name15) {
    return function(doctype) {
      return doctype[name15];
    };
  };
  var _namespaceURI = getProp("namespaceURI");
  var _prefix = getProp("prefix");
  var localName = getProp("localName");
  var tagName = getProp("tagName");
  function getBoundingClientRect(el) {
    return function() {
      var rect = el.getBoundingClientRect();
      return {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.width,
        height: rect.height,
        x: rect.x,
        y: rect.y
      };
    };
  }

  // output/Web.DOM.ParentNode/foreign.js
  var getEffProp = function(name15) {
    return function(node) {
      return function() {
        return node[name15];
      };
    };
  };
  var children2 = getEffProp("children");
  var _firstElementChild = getEffProp("firstElementChild");
  var _lastElementChild = getEffProp("lastElementChild");
  var childElementCount = getEffProp("childElementCount");

  // output/Web.Internal.FFI/foreign.js
  function _unsafeReadProtoTagged(nothing, just, name15, value12) {
    if (typeof window !== "undefined") {
      var ty = window[name15];
      if (ty != null && value12 instanceof ty) {
        return just(value12);
      }
    }
    var obj = value12;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name15) {
        return just(value12);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  }

  // output/Web.Internal.FFI/index.js
  var unsafeReadProtoTagged = function(name15) {
    return function(value12) {
      return _unsafeReadProtoTagged(Nothing.value, Just.create, name15, value12);
    };
  };

  // output/Web.DOM.Element/index.js
  var fromNode = /* @__PURE__ */ unsafeReadProtoTagged("Element");

  // output/Foreign.Hooks/index.js
  var bind4 = /* @__PURE__ */ bind2(ixBindRender);
  var discard4 = /* @__PURE__ */ discard2(ixBindRender);
  var discard1 = /* @__PURE__ */ discard(discardUnit);
  var for_2 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var bind22 = /* @__PURE__ */ bind(bindMaybe);
  var mempty2 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidUnit));
  var useAff2 = /* @__PURE__ */ useAff(/* @__PURE__ */ eqMaybe(/* @__PURE__ */ eqRec()(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(eqRowNil)()({
    reflectSymbol: function() {
      return "width";
    }
  })(eqNumber))()({
    reflectSymbol: function() {
      return "height";
    }
  })(eqNumber))));
  var discard32 = /* @__PURE__ */ discard1(bindAff);
  var liftEffect4 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var pure12 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useResizeObserver2 = function(ref) {
    return function(callback) {
      return unsafeHook(function() {
        return _useResizeObserver({
          ref,
          callback: mkEffectFn1(callback)
        });
      });
    };
  };
  var useContentBox = function(ref) {
    return bind4(useState$prime(Nothing.value))(function(v) {
      return bind4(useState$prime(Nothing.value))(function(v1) {
        return discard4(useLayoutEffectOnce(function __do4() {
          var maybeElement = readRefMaybe(ref)();
          for_2(bind22(maybeElement)(fromNode))(function(element2) {
            return function __do5() {
              var rect = getBoundingClientRect(element2)();
              return v.value1(new Just({
                width: rect.width,
                height: rect.height
              }))();
            };
          })();
          return mempty2;
        }))(function() {
          return discard4(useResizeObserver2(ref)(function(box$prime) {
            return v.value1(new Just(box$prime));
          }))(function() {
            return discard4(useAff2(v.value0)(discard32(delay(200))(function() {
              return liftEffect4(v1.value1(v.value0));
            })))(function() {
              return pure12(v1.value0);
            });
          });
        });
      });
    });
  };

  // output/ResizeSection/index.js
  var bind5 = /* @__PURE__ */ bind2(ixBindRender);
  var pure5 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var section2 = /* @__PURE__ */ section();
  var foldMap3 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidArray);
  var make2 = /* @__PURE__ */ component("ResizeSection")(function(handleResize) {
    return bind5(useRef(nullImpl))(function(ref) {
      return bind5(useContentBox(ref))(function(maybeBounds) {
        return pure5(section2({
          ref,
          children: foldMap3(handleResize)(maybeBounds)
        }));
      });
    });
  });

  // output/Slider/foreign.js
  var import_react15 = __toESM(require_react(), 1);

  // node_modules/@react-stately/utils/dist/module.js
  var import_react6 = __toESM(require_react());
  function $458b0a5536c1a7cf$export$40bfa8c7b0832715(value1, defaultValue4, onChange) {
    let [stateValue, setStateValue] = (0, import_react6.useState)(value1 || defaultValue4);
    let ref = (0, import_react6.useRef)(value1 !== void 0);
    let wasControlled = ref.current;
    let isControlled = value1 !== void 0;
    let stateRef = (0, import_react6.useRef)(stateValue);
    if (wasControlled !== isControlled)
      console.warn(`WARN: A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
    ref.current = isControlled;
    let setValue12 = (0, import_react6.useCallback)((value22, ...args) => {
      let onChangeCaller = (value12, ...onChangeArgs) => {
        if (onChange) {
          if (!Object.is(stateRef.current, value12))
            onChange(value12, ...onChangeArgs);
        }
        if (!isControlled)
          stateRef.current = value12;
      };
      if (typeof value22 === "function") {
        console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320");
        let updateFunction = (oldValue, ...functionArgs) => {
          let interceptedValue = value22(isControlled ? stateRef.current : oldValue, ...functionArgs);
          onChangeCaller(interceptedValue, ...args);
          if (!isControlled)
            return interceptedValue;
          return oldValue;
        };
        setStateValue(updateFunction);
      } else {
        if (!isControlled)
          setStateValue(value22);
        onChangeCaller(value22, ...args);
      }
    }, [
      isControlled,
      onChange
    ]);
    if (isControlled)
      stateRef.current = value1;
    else
      value1 = stateValue;
    return [
      value1,
      setValue12
    ];
  }
  function $9446cca9a3875146$export$7d15b64cf5a3a4c4(value12, min8 = -Infinity, max8 = Infinity) {
    let newValue = Math.min(Math.max(value12, min8), max8);
    return newValue;
  }
  function $9446cca9a3875146$export$cb6e0bb50bc19463(value12, min8, max8, step3) {
    let remainder2 = (value12 - (isNaN(min8) ? 0 : min8)) % step3;
    let snappedValue = Math.abs(remainder2) * 2 >= step3 ? value12 + Math.sign(remainder2) * (step3 - Math.abs(remainder2)) : value12 - remainder2;
    if (!isNaN(min8)) {
      if (snappedValue < min8)
        snappedValue = min8;
      else if (!isNaN(max8) && snappedValue > max8)
        snappedValue = min8 + Math.floor((max8 - min8) / step3) * step3;
    } else if (!isNaN(max8) && snappedValue > max8)
      snappedValue = Math.floor(max8 / step3) * step3;
    let string2 = step3.toString();
    let index5 = string2.indexOf(".");
    let precision = index5 >= 0 ? string2.length - index5 : 0;
    if (precision > 0) {
      let pow4 = Math.pow(10, precision);
      snappedValue = Math.round(snappedValue * pow4) / pow4;
    }
    return snappedValue;
  }

  // node_modules/@internationalized/number/dist/module.js
  var $488c6ddbf4ef74c2$var$formatterCache = /* @__PURE__ */ new Map();
  var $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
  try {
    $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat("de-DE", {
      signDisplay: "exceptZero"
    }).resolvedOptions().signDisplay === "exceptZero";
  } catch (e) {
  }
  var $488c6ddbf4ef74c2$var$supportsUnit = false;
  try {
    $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat("de-DE", {
      style: "unit",
      unit: "degree"
    }).resolvedOptions().style === "unit";
  } catch (e1) {
  }
  var $488c6ddbf4ef74c2$var$UNITS = {
    degree: {
      narrow: {
        default: "\xB0",
        "ja-JP": " \u5EA6",
        "zh-TW": "\u5EA6",
        "sl-SI": " \xB0"
      }
    }
  };
  var $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = class {
    format(value12) {
      let res = "";
      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
        res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value12);
      else
        res = this.numberFormatter.format(value12);
      if (this.options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
        var ref;
        let { unit: unit4, unitDisplay = "short", locale: locale3 } = this.resolvedOptions();
        let values3 = (ref = $488c6ddbf4ef74c2$var$UNITS[unit4]) === null || ref === void 0 ? void 0 : ref[unitDisplay];
        res += values3[locale3] || values3.default;
      }
      return res;
    }
    formatToParts(value12) {
      return this.numberFormatter.formatToParts(value12);
    }
    formatRange(start3, end) {
      if (typeof this.numberFormatter.formatRange === "function")
        return this.numberFormatter.formatRange(start3, end);
      if (end < start3)
        throw new RangeError("End date must be >= start date");
      return `${this.format(start3)} \u2013 ${this.format(end)}`;
    }
    formatRangeToParts(start3, end) {
      if (typeof this.numberFormatter.formatRangeToParts === "function")
        return this.numberFormatter.formatRangeToParts(start3, end);
      if (end < start3)
        throw new RangeError("End date must be >= start date");
      let startParts = this.numberFormatter.formatToParts(start3);
      let endParts = this.numberFormatter.formatToParts(end);
      return [
        ...startParts.map(
          (p2) => ({
            ...p2,
            source: "startRange"
          })
        ),
        {
          type: "literal",
          value: " \u2013 ",
          source: "shared"
        },
        ...endParts.map(
          (p2) => ({
            ...p2,
            source: "endRange"
          })
        )
      ];
    }
    resolvedOptions() {
      let options2 = this.numberFormatter.resolvedOptions();
      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
        options2 = {
          ...options2,
          signDisplay: this.options.signDisplay
        };
      if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === "unit")
        options2 = {
          ...options2,
          style: "unit",
          unit: this.options.unit,
          unitDisplay: this.options.unitDisplay
        };
      return options2;
    }
    constructor(locale3, options2 = {}) {
      this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale3, options2);
      this.options = options2;
    }
  };
  function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale3, options2 = {}) {
    let { numberingSystem } = options2;
    if (numberingSystem && locale3.indexOf("-u-nu-") === -1)
      locale3 = `${locale3}-u-nu-${numberingSystem}`;
    if (options2.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
      var ref;
      let { unit: unit4, unitDisplay = "short" } = options2;
      if (!unit4)
        throw new Error('unit option must be provided with style: "unit"');
      if (!((ref = $488c6ddbf4ef74c2$var$UNITS[unit4]) === null || ref === void 0 ? void 0 : ref[unitDisplay]))
        throw new Error(`Unsupported unit ${unit4} with unitDisplay = ${unitDisplay}`);
      options2 = {
        ...options2,
        style: "decimal"
      };
    }
    let cacheKey = locale3 + (options2 ? Object.entries(options2).sort(
      (a3, b2) => a3[0] < b2[0] ? -1 : 1
    ).join() : "");
    if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey))
      return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
    let numberFormatter = new Intl.NumberFormat(locale3, options2);
    $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
    return numberFormatter;
  }
  function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat2, signDisplay, num) {
    if (signDisplay === "auto")
      return numberFormat2.format(num);
    else if (signDisplay === "never")
      return numberFormat2.format(Math.abs(num));
    else {
      let needsPositiveSign = false;
      if (signDisplay === "always")
        needsPositiveSign = num > 0 || Object.is(num, 0);
      else if (signDisplay === "exceptZero") {
        if (Object.is(num, -0) || Object.is(num, 0))
          num = Math.abs(num);
        else
          needsPositiveSign = num > 0;
      }
      if (needsPositiveSign) {
        let negative2 = numberFormat2.format(-num);
        let noSign = numberFormat2.format(num);
        let minus = negative2.replace(noSign, "").replace(/\u200e|\u061C/, "");
        if ([
          ...minus
        ].length !== 1)
          console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case");
        let positive2 = negative2.replace(noSign, "!!!").replace(minus, "+").replace("!!!", noSign);
        return positive2;
      } else
        return numberFormat2.format(num);
    }
  }
  var $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp("^.*\\(.*\\).*$");

  // node_modules/@react-aria/utils/dist/module.js
  var import_react8 = __toESM(require_react());

  // node_modules/@react-aria/ssr/dist/module.js
  var import_react7 = __toESM(require_react());
  var $704cf1d3b684cc5c$var$defaultContext = {
    prefix: String(Math.round(Math.random() * 1e10)),
    current: 0
  };
  var $704cf1d3b684cc5c$var$SSRContext = /* @__PURE__ */ import_react7.default.createContext($704cf1d3b684cc5c$var$defaultContext);
  var $704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
  function $704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {
    let ctx = (0, import_react7.useContext)($704cf1d3b684cc5c$var$SSRContext);
    if (ctx === $704cf1d3b684cc5c$var$defaultContext && !$704cf1d3b684cc5c$var$canUseDOM)
      console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
    return (0, import_react7.useMemo)(
      () => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`,
      [
        defaultId
      ]
    );
  }
  function $704cf1d3b684cc5c$export$535bd6ca7f90a273() {
    let cur = (0, import_react7.useContext)($704cf1d3b684cc5c$var$SSRContext);
    let isInSSRContext = cur !== $704cf1d3b684cc5c$var$defaultContext;
    let [isSSR, setIsSSR] = (0, import_react7.useState)(isInSSRContext);
    if (typeof window !== "undefined" && isInSSRContext)
      (0, import_react7.useLayoutEffect)(() => {
        setIsSSR(false);
      }, []);
    return isSSR;
  }

  // node_modules/clsx/dist/clsx.m.js
  function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e)
      n += e;
    else if ("object" == typeof e)
      if (Array.isArray(e))
        for (t = 0; t < e.length; t++)
          e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
      else
        for (t in e)
          e[t] && (n && (n += " "), n += t);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = ""; f < arguments.length; )
      (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }
  var clsx_m_default = clsx;

  // node_modules/@react-aria/utils/dist/module.js
  var $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? import_react8.default.useLayoutEffect : () => {
  };
  var $bdb11010cef70236$var$idsUpdaterMap = /* @__PURE__ */ new Map();
  function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
    let [value12, setValue12] = (0, import_react8.useState)(defaultId);
    let nextId = (0, import_react8.useRef)(null);
    let res = $704cf1d3b684cc5c$export$619500959fc48b26(value12);
    let updateValue = (0, import_react8.useCallback)((val) => {
      nextId.current = val;
    }, []);
    $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      let r2 = res;
      return () => {
        $bdb11010cef70236$var$idsUpdaterMap.delete(r2);
      };
    }, [
      res
    ]);
    (0, import_react8.useEffect)(() => {
      let newId2 = nextId.current;
      if (newId2) {
        nextId.current = null;
        setValue12(newId2);
      }
    });
    return res;
  }
  function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
    if (idA === idB)
      return idA;
    let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
    if (setIdA) {
      setIdA(idB);
      return idB;
    }
    let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
    if (setIdB) {
      setIdB(idA);
      return idA;
    }
    return idB;
  }
  function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks2) {
    return (...args) => {
      for (let callback of callbacks2)
        if (typeof callback === "function")
          callback(...args);
    };
  }
  function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
    let result = {
      ...args[0]
    };
    for (let i2 = 1; i2 < args.length; i2++) {
      let props = args[i2];
      for (let key in props) {
        let a3 = result[key];
        let b2 = props[key];
        if (typeof a3 === "function" && typeof b2 === "function" && key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= 65 && key.charCodeAt(2) <= 90)
          result[key] = $ff5963eb1fccf552$export$e08e3b67e392101e(a3, b2);
        else if ((key === "className" || key === "UNSAFE_className") && typeof a3 === "string" && typeof b2 === "string")
          result[key] = clsx_m_default(a3, b2);
        else if (key === "id" && a3 && b2)
          result.id = $bdb11010cef70236$export$cd8c9cb68f842629(a3, b2);
        else
          result[key] = b2 !== void 0 ? b2 : a3;
      }
    }
    return result;
  }
  function $7215afc6de606d6b$export$de79e2c695e052f3(element2) {
    if ($7215afc6de606d6b$var$supportsPreventScroll())
      element2.focus({
        preventScroll: true
      });
    else {
      let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element2);
      element2.focus();
      $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
    }
  }
  var $7215afc6de606d6b$var$supportsPreventScrollCached = null;
  function $7215afc6de606d6b$var$supportsPreventScroll() {
    if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
      $7215afc6de606d6b$var$supportsPreventScrollCached = false;
      try {
        var focusElem = document.createElement("div");
        focusElem.focus({
          get preventScroll() {
            $7215afc6de606d6b$var$supportsPreventScrollCached = true;
            return true;
          }
        });
      } catch (e) {
      }
    }
    return $7215afc6de606d6b$var$supportsPreventScrollCached;
  }
  function $7215afc6de606d6b$var$getScrollableElements(element2) {
    var parent2 = element2.parentNode;
    var scrollableElements = [];
    var rootScrollingElement = document.scrollingElement || document.documentElement;
    while (parent2 instanceof HTMLElement && parent2 !== rootScrollingElement) {
      if (parent2.offsetHeight < parent2.scrollHeight || parent2.offsetWidth < parent2.scrollWidth)
        scrollableElements.push({
          element: parent2,
          scrollTop: parent2.scrollTop,
          scrollLeft: parent2.scrollLeft
        });
      parent2 = parent2.parentNode;
    }
    if (rootScrollingElement instanceof HTMLElement)
      scrollableElements.push({
        element: rootScrollingElement,
        scrollTop: rootScrollingElement.scrollTop,
        scrollLeft: rootScrollingElement.scrollLeft
      });
    return scrollableElements;
  }
  function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
    for (let { element: element2, scrollTop: scrollTop2, scrollLeft: scrollLeft2 } of scrollableElements) {
      element2.scrollTop = scrollTop2;
      element2.scrollLeft = scrollLeft2;
    }
  }
  var $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map();
  var $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
  function $bbed8b41f857bcc0$var$setupGlobalEvents() {
    if (typeof window === "undefined")
      return;
    let onTransitionStart = (e) => {
      let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
      if (!transitions) {
        transitions = /* @__PURE__ */ new Set();
        $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
        e.target.addEventListener("transitioncancel", onTransitionEnd);
      }
      transitions.add(e.propertyName);
    };
    let onTransitionEnd = (e) => {
      let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
      if (!properties)
        return;
      properties.delete(e.propertyName);
      if (properties.size === 0) {
        e.target.removeEventListener("transitioncancel", onTransitionEnd);
        $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
      }
      if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
        for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)
          cb();
        $bbed8b41f857bcc0$var$transitionCallbacks.clear();
      }
    };
    document.body.addEventListener("transitionrun", onTransitionStart);
    document.body.addEventListener("transitionend", onTransitionEnd);
  }
  if (typeof document !== "undefined") {
    if (document.readyState !== "loading")
      $bbed8b41f857bcc0$var$setupGlobalEvents();
    else
      document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
  }
  function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
    requestAnimationFrame(() => {
      if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0)
        fn();
      else
        $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
    });
  }
  function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
    let globalListeners = (0, import_react8.useRef)(/* @__PURE__ */ new Map());
    let addGlobalListener = (0, import_react8.useCallback)((eventTarget, type2, listener, options2) => {
      let fn = (options2 === null || options2 === void 0 ? void 0 : options2.once) ? (...args) => {
        globalListeners.current.delete(listener);
        listener(...args);
      } : listener;
      globalListeners.current.set(listener, {
        type: type2,
        eventTarget,
        fn,
        options: options2
      });
      eventTarget.addEventListener(type2, listener, options2);
    }, []);
    let removeGlobalListener = (0, import_react8.useCallback)((eventTarget, type2, listener, options2) => {
      var ref;
      let fn = ((ref = globalListeners.current.get(listener)) === null || ref === void 0 ? void 0 : ref.fn) || listener;
      eventTarget.removeEventListener(type2, fn, options2);
      globalListeners.current.delete(listener);
    }, []);
    let removeAllGlobalListeners = (0, import_react8.useCallback)(() => {
      globalListeners.current.forEach((value12, key) => {
        removeGlobalListener(value12.eventTarget, value12.type, key, value12.options);
      });
    }, [
      removeGlobalListener
    ]);
    (0, import_react8.useEffect)(() => {
      return removeAllGlobalListeners;
    }, [
      removeAllGlobalListeners
    ]);
    return {
      addGlobalListener,
      removeGlobalListener,
      removeAllGlobalListeners
    };
  }
  function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
    let { id: id3, "aria-label": label5, "aria-labelledby": labelledBy } = props;
    id3 = $bdb11010cef70236$export$f680877a34711e37(id3);
    if (labelledBy && label5) {
      let ids = /* @__PURE__ */ new Set([
        ...labelledBy.trim().split(/\s+/),
        id3
      ]);
      labelledBy = [
        ...ids
      ].join(" ");
    } else if (labelledBy)
      labelledBy = labelledBy.trim().split(/\s+/).join(" ");
    if (!label5 && !labelledBy && defaultLabel)
      label5 = defaultLabel;
    return {
      id: id3,
      "aria-label": label5,
      "aria-labelledby": labelledBy
    };
  }
  function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      if (context && context.ref && ref) {
        context.ref.current = ref.current;
        return () => {
          context.ref.current = null;
        };
      }
    }, [
      context,
      ref
    ]);
  }
  var $5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
  function $c87311424ea30a05$var$testUserAgent(re3) {
    var ref;
    if (typeof window === "undefined" || window.navigator == null)
      return false;
    return ((ref = window.navigator["userAgentData"]) === null || ref === void 0 ? void 0 : ref.brands.some(
      (brand) => re3.test(brand.brand)
    )) || re3.test(window.navigator.userAgent);
  }
  function $c87311424ea30a05$var$testPlatform(re3) {
    var ref;
    return typeof window !== "undefined" && window.navigator != null ? re3.test(((ref = window.navigator["userAgentData"]) === null || ref === void 0 ? void 0 : ref.platform) || window.navigator.platform) : false;
  }
  function $c87311424ea30a05$export$9ac100e40613ea10() {
    return $c87311424ea30a05$var$testPlatform(/^Mac/i);
  }
  function $c87311424ea30a05$export$186c6964ca17d99() {
    return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
  }
  function $c87311424ea30a05$export$7bef049ce92e4224() {
    return $c87311424ea30a05$var$testPlatform(/^iPad/i) || $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
  }
  function $c87311424ea30a05$export$fedb369cb70207f1() {
    return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
  }
  function $c87311424ea30a05$export$a11b0059900ceec8() {
    return $c87311424ea30a05$var$testUserAgent(/Android/i);
  }
  function $6a7db85432448f7f$export$60278871457622de(event) {
    if (event.mozInputSource === 0 && event.isTrusted)
      return true;
    if ($c87311424ea30a05$export$a11b0059900ceec8() && event.pointerType)
      return event.type === "click" && event.buttons === 1;
    return event.detail === 0 && !event.pointerType;
  }

  // node_modules/@react-stately/slider/dist/module.js
  var import_react9 = __toESM(require_react());
  var $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE = 0;
  var $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE = 100;
  var $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE = 1;
  function $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props) {
    const { isDisabled = false, minValue = $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE, maxValue = $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE, numberFormatter: formatter, step: step3 = $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE, orientation = "horizontal" } = props;
    let pageSize = (0, import_react9.useMemo)(() => {
      let calcPageSize = (maxValue - minValue) / 10;
      calcPageSize = $9446cca9a3875146$export$cb6e0bb50bc19463(calcPageSize, 0, calcPageSize + step3, step3);
      return Math.max(calcPageSize, step3);
    }, [
      step3,
      maxValue,
      minValue
    ]);
    let value1 = (0, import_react9.useMemo)(
      () => $28f99e3e86e6ec45$var$convertValue(props.value),
      [
        props.value
      ]
    );
    var ref;
    let defaultValue4 = (0, import_react9.useMemo)(
      () => (ref = $28f99e3e86e6ec45$var$convertValue(props.defaultValue)) !== null && ref !== void 0 ? ref : [
        minValue
      ],
      [
        props.defaultValue,
        minValue
      ]
    );
    let onChange = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChange);
    let onChangeEnd = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChangeEnd);
    const [values3, setValues] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(value1, defaultValue4, onChange);
    const [isDraggings, setDraggings] = (0, import_react9.useState)(new Array(values3.length).fill(false));
    const isEditablesRef = (0, import_react9.useRef)(new Array(values3.length).fill(true));
    const [focusedIndex, setFocusedIndex] = (0, import_react9.useState)(void 0);
    const valuesRef = (0, import_react9.useRef)(null);
    valuesRef.current = values3;
    const isDraggingsRef = (0, import_react9.useRef)(null);
    isDraggingsRef.current = isDraggings;
    function getValuePercent(value12) {
      return (value12 - minValue) / (maxValue - minValue);
    }
    function getThumbMinValue(index5) {
      return index5 === 0 ? minValue : values3[index5 - 1];
    }
    function getThumbMaxValue(index5) {
      return index5 === values3.length - 1 ? maxValue : values3[index5 + 1];
    }
    function isThumbEditable(index5) {
      return isEditablesRef.current[index5];
    }
    function setThumbEditable(index5, editable) {
      isEditablesRef.current[index5] = editable;
    }
    function updateValue(index5, value12) {
      if (isDisabled || !isThumbEditable(index5))
        return;
      const thisMin = getThumbMinValue(index5);
      const thisMax = getThumbMaxValue(index5);
      value12 = $9446cca9a3875146$export$cb6e0bb50bc19463(value12, thisMin, thisMax, step3);
      valuesRef.current = $28f99e3e86e6ec45$var$replaceIndex(valuesRef.current, index5, value12);
      setValues(valuesRef.current);
    }
    function updateDragging(index5, dragging) {
      if (isDisabled || !isThumbEditable(index5))
        return;
      const wasDragging = isDraggingsRef.current[index5];
      isDraggingsRef.current = $28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current, index5, dragging);
      setDraggings(isDraggingsRef.current);
      if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean))
        onChangeEnd(valuesRef.current);
    }
    function getFormattedValue(value12) {
      return formatter.format(value12);
    }
    function setThumbPercent(index5, percent) {
      updateValue(index5, getPercentValue(percent));
    }
    function getRoundedValue(value12) {
      return Math.round((value12 - minValue) / step3) * step3 + minValue;
    }
    function getPercentValue(percent) {
      const val = percent * (maxValue - minValue) + minValue;
      return $9446cca9a3875146$export$7d15b64cf5a3a4c4(getRoundedValue(val), minValue, maxValue);
    }
    function incrementThumb(index5, stepSize = 1) {
      let s3 = Math.max(stepSize, step3);
      updateValue(index5, $9446cca9a3875146$export$cb6e0bb50bc19463(values3[index5] + s3, minValue, maxValue, step3));
    }
    function decrementThumb(index5, stepSize = 1) {
      let s3 = Math.max(stepSize, step3);
      updateValue(index5, $9446cca9a3875146$export$cb6e0bb50bc19463(values3[index5] - s3, minValue, maxValue, step3));
    }
    return {
      values: values3,
      getThumbValue: (index5) => values3[index5],
      setThumbValue: updateValue,
      setThumbPercent,
      isThumbDragging: (index5) => isDraggings[index5],
      setThumbDragging: updateDragging,
      focusedThumb: focusedIndex,
      setFocusedThumb: setFocusedIndex,
      getThumbPercent: (index5) => getValuePercent(values3[index5]),
      getValuePercent,
      getThumbValueLabel: (index5) => getFormattedValue(values3[index5]),
      getFormattedValue,
      getThumbMinValue,
      getThumbMaxValue,
      getPercentValue,
      isThumbEditable,
      setThumbEditable,
      incrementThumb,
      decrementThumb,
      step: step3,
      pageSize,
      orientation,
      isDisabled
    };
  }
  function $28f99e3e86e6ec45$var$replaceIndex(array3, index5, value12) {
    if (array3[index5] === value12)
      return array3;
    return [
      ...array3.slice(0, index5),
      value12,
      ...array3.slice(index5 + 1)
    ];
  }
  function $28f99e3e86e6ec45$var$convertValue(value12) {
    if (value12 == null)
      return void 0;
    return Array.isArray(value12) ? value12 : [
      value12
    ];
  }
  function $28f99e3e86e6ec45$var$createOnChange(value12, defaultValue4, onChange) {
    return (newValue) => {
      if (typeof value12 === "number" || typeof defaultValue4 === "number")
        onChange === null || onChange === void 0 ? void 0 : onChange(newValue[0]);
      else
        onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
    };
  }

  // node_modules/@react-aria/focus/dist/module.js
  var import_react11 = __toESM(require_react());

  // node_modules/@react-aria/interactions/dist/module.js
  var import_react10 = __toESM(require_react());
  var $14c0b72509d70225$var$state = "default";
  var $14c0b72509d70225$var$savedUserSelect = "";
  var $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
  function $14c0b72509d70225$export$16a4697467175487(target5) {
    if ($c87311424ea30a05$export$fedb369cb70207f1()) {
      if ($14c0b72509d70225$var$state === "default") {
        $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
        document.documentElement.style.webkitUserSelect = "none";
      }
      $14c0b72509d70225$var$state = "disabled";
    } else if (target5 instanceof HTMLElement || target5 instanceof SVGElement) {
      $14c0b72509d70225$var$modifiedElementMap.set(target5, target5.style.userSelect);
      target5.style.userSelect = "none";
    }
  }
  function $14c0b72509d70225$export$b0d6fa1ab32e3295(target5) {
    if ($c87311424ea30a05$export$fedb369cb70207f1()) {
      if ($14c0b72509d70225$var$state !== "disabled")
        return;
      $14c0b72509d70225$var$state = "restoring";
      setTimeout(() => {
        $bbed8b41f857bcc0$export$24490316f764c430(() => {
          if ($14c0b72509d70225$var$state === "restoring") {
            if (document.documentElement.style.webkitUserSelect === "none")
              document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
            $14c0b72509d70225$var$savedUserSelect = "";
            $14c0b72509d70225$var$state = "default";
          }
        });
      }, 300);
    } else if (target5 instanceof HTMLElement || target5 instanceof SVGElement) {
      if (target5 && $14c0b72509d70225$var$modifiedElementMap.has(target5)) {
        let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target5);
        if (target5.style.userSelect === "none")
          target5.style.userSelect = targetOldUserSelect;
        if (target5.getAttribute("style") === "")
          target5.removeAttribute("style");
        $14c0b72509d70225$var$modifiedElementMap.delete(target5);
      }
    }
  }
  var $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = import_react10.default.createContext(null);
  $ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
  var $8a9cb279dc87e130$export$905e7fc544a71f36 = class {
    isDefaultPrevented() {
      return this.nativeEvent.defaultPrevented;
    }
    preventDefault() {
      this.defaultPrevented = true;
      this.nativeEvent.preventDefault();
    }
    stopPropagation() {
      this.nativeEvent.stopPropagation();
      this.isPropagationStopped = () => true;
    }
    isPropagationStopped() {
      return false;
    }
    persist() {
    }
    constructor(type2, nativeEvent) {
      this.nativeEvent = nativeEvent;
      this.target = nativeEvent.target;
      this.currentTarget = nativeEvent.currentTarget;
      this.relatedTarget = nativeEvent.relatedTarget;
      this.bubbles = nativeEvent.bubbles;
      this.cancelable = nativeEvent.cancelable;
      this.defaultPrevented = nativeEvent.defaultPrevented;
      this.eventPhase = nativeEvent.eventPhase;
      this.isTrusted = nativeEvent.isTrusted;
      this.timeStamp = nativeEvent.timeStamp;
      this.type = type2;
    }
  };
  function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
    let stateRef = (0, import_react10.useRef)({
      isFocused: false,
      onBlur,
      observer: null
    });
    stateRef.current.onBlur = onBlur;
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      const state3 = stateRef.current;
      return () => {
        if (state3.observer) {
          state3.observer.disconnect();
          state3.observer = null;
        }
      };
    }, []);
    return (0, import_react10.useCallback)((e1) => {
      if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {
        stateRef.current.isFocused = true;
        let target5 = e1.target;
        let onBlurHandler = (e) => {
          var _current, ref;
          stateRef.current.isFocused = false;
          if (target5.disabled)
            (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36("blur", e));
          if (stateRef.current.observer) {
            stateRef.current.observer.disconnect();
            stateRef.current.observer = null;
          }
        };
        target5.addEventListener("focusout", onBlurHandler, {
          once: true
        });
        stateRef.current.observer = new MutationObserver(() => {
          if (stateRef.current.isFocused && target5.disabled) {
            stateRef.current.observer.disconnect();
            target5.dispatchEvent(new FocusEvent("blur"));
            target5.dispatchEvent(new FocusEvent("focusout", {
              bubbles: true
            }));
          }
        });
        stateRef.current.observer.observe(target5, {
          attributes: true,
          attributeFilter: [
            "disabled"
          ]
        });
      }
    }, []);
  }
  function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
    let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
    const onBlur = (0, import_react10.useCallback)((e) => {
      if (e.target === e.currentTarget) {
        if (onBlurProp)
          onBlurProp(e);
        if (onFocusChange)
          onFocusChange(false);
        return true;
      }
    }, [
      onBlurProp,
      onFocusChange
    ]);
    const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
    const onFocus = (0, import_react10.useCallback)((e) => {
      if (e.target === e.currentTarget) {
        if (onFocusProp)
          onFocusProp(e);
        if (onFocusChange)
          onFocusChange(true);
        onSyntheticFocus(e);
      }
    }, [
      onFocusChange,
      onFocusProp,
      onSyntheticFocus
    ]);
    return {
      focusProps: {
        onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
        onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null
      }
    };
  }
  var $507fabe10e71c6fb$var$currentModality = null;
  var $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
  var $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
  var $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  var $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
  var $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
    Tab: true,
    Escape: true
  };
  function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
    for (let handler2 of $507fabe10e71c6fb$var$changeHandlers)
      handler2(modality, e);
  }
  function $507fabe10e71c6fb$var$isValidKey(e) {
    return !(e.metaKey || !$c87311424ea30a05$export$9ac100e40613ea10() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
  }
  function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    if ($507fabe10e71c6fb$var$isValidKey(e)) {
      $507fabe10e71c6fb$var$currentModality = "keyboard";
      $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
    }
  }
  function $507fabe10e71c6fb$var$handlePointerEvent(e) {
    $507fabe10e71c6fb$var$currentModality = "pointer";
    if (e.type === "mousedown" || e.type === "pointerdown") {
      $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
      $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
    }
  }
  function $507fabe10e71c6fb$var$handleClickEvent(e) {
    if ($6a7db85432448f7f$export$60278871457622de(e)) {
      $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
      $507fabe10e71c6fb$var$currentModality = "virtual";
    }
  }
  function $507fabe10e71c6fb$var$handleFocusEvent(e) {
    if (e.target === window || e.target === document)
      return;
    if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
      $507fabe10e71c6fb$var$currentModality = "virtual";
      $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
    }
    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
  }
  function $507fabe10e71c6fb$var$handleWindowBlur() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
  }
  function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {
    if (typeof window === "undefined" || $507fabe10e71c6fb$var$hasSetupGlobalListeners)
      return;
    let focus2 = HTMLElement.prototype.focus;
    HTMLElement.prototype.focus = function() {
      $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
      focus2.apply(this, arguments);
    };
    document.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    document.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    document.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
    window.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
    window.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
    if (typeof PointerEvent !== "undefined") {
      document.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
      document.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
      document.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
    } else {
      document.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
      document.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
      document.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
    }
    $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
  }
  if (typeof document !== "undefined") {
    if (document.readyState !== "loading")
      $507fabe10e71c6fb$var$setupGlobalFocusEvents();
    else
      document.addEventListener("DOMContentLoaded", $507fabe10e71c6fb$var$setupGlobalFocusEvents);
  }
  function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
    return $507fabe10e71c6fb$var$currentModality !== "pointer";
  }
  function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
    return $507fabe10e71c6fb$var$currentModality;
  }
  function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
    $507fabe10e71c6fb$var$currentModality = modality;
    $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
  }
  function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
    return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
  }
  function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
    $507fabe10e71c6fb$var$setupGlobalFocusEvents();
    (0, import_react10.useEffect)(() => {
      let handler2 = (modality, e) => {
        if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e))
          return;
        fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
      };
      $507fabe10e71c6fb$var$changeHandlers.add(handler2);
      return () => {
        $507fabe10e71c6fb$var$changeHandlers.delete(handler2);
      };
    }, deps);
  }
  function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
    let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
    let state3 = (0, import_react10.useRef)({
      isFocusWithin: false
    });
    let onBlur = (0, import_react10.useCallback)((e) => {
      if (state3.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
        state3.current.isFocusWithin = false;
        if (onBlurWithin)
          onBlurWithin(e);
        if (onFocusWithinChange)
          onFocusWithinChange(false);
      }
    }, [
      onBlurWithin,
      onFocusWithinChange,
      state3
    ]);
    let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
    let onFocus = (0, import_react10.useCallback)((e) => {
      if (!state3.current.isFocusWithin) {
        if (onFocusWithin)
          onFocusWithin(e);
        if (onFocusWithinChange)
          onFocusWithinChange(true);
        state3.current.isFocusWithin = true;
        onSyntheticFocus(e);
      }
    }, [
      onFocusWithin,
      onFocusWithinChange,
      onSyntheticFocus
    ]);
    if (isDisabled)
      return {
        focusWithinProps: {
          onFocus: null,
          onBlur: null
        }
      };
    return {
      focusWithinProps: {
        onFocus,
        onBlur
      }
    };
  }
  function $93925083ecbb358c$export$48d1ea6320830260(handler2) {
    if (!handler2)
      return;
    let shouldStopPropagation = true;
    return (e) => {
      let event = {
        ...e,
        preventDefault() {
          e.preventDefault();
        },
        isDefaultPrevented() {
          return e.isDefaultPrevented();
        },
        stopPropagation() {
          console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
        },
        continuePropagation() {
          shouldStopPropagation = false;
        }
      };
      handler2(event);
      if (shouldStopPropagation)
        e.stopPropagation();
    };
  }
  function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
    return {
      keyboardProps: props.isDisabled ? {} : {
        onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),
        onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)
      }
    };
  }
  function $e8a7022cf87cba2a$export$36da96379f79f245(props) {
    let { onMoveStart, onMove, onMoveEnd } = props;
    let state3 = (0, import_react10.useRef)({
      didMove: false,
      lastPosition: null,
      id: null
    });
    let { addGlobalListener, removeGlobalListener } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
    let moveProps1 = (0, import_react10.useMemo)(() => {
      let moveProps = {};
      let start3 = () => {
        $14c0b72509d70225$export$16a4697467175487();
        state3.current.didMove = false;
      };
      let move = (originalEvent, pointerType, deltaX, deltaY) => {
        if (deltaX === 0 && deltaY === 0)
          return;
        if (!state3.current.didMove) {
          state3.current.didMove = true;
          onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
            type: "movestart",
            pointerType,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
        }
        onMove({
          type: "move",
          pointerType,
          deltaX,
          deltaY,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      };
      let end = (originalEvent, pointerType) => {
        $14c0b72509d70225$export$b0d6fa1ab32e3295();
        if (state3.current.didMove)
          onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
            type: "moveend",
            pointerType,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
      };
      if (typeof PointerEvent === "undefined") {
        let onMouseMove = (e) => {
          if (e.button === 0) {
            move(e, "mouse", e.pageX - state3.current.lastPosition.pageX, e.pageY - state3.current.lastPosition.pageY);
            state3.current.lastPosition = {
              pageX: e.pageX,
              pageY: e.pageY
            };
          }
        };
        let onMouseUp = (e) => {
          if (e.button === 0) {
            end(e, "mouse");
            removeGlobalListener(window, "mousemove", onMouseMove, false);
            removeGlobalListener(window, "mouseup", onMouseUp, false);
          }
        };
        moveProps.onMouseDown = (e) => {
          if (e.button === 0) {
            start3();
            e.stopPropagation();
            e.preventDefault();
            state3.current.lastPosition = {
              pageX: e.pageX,
              pageY: e.pageY
            };
            addGlobalListener(window, "mousemove", onMouseMove, false);
            addGlobalListener(window, "mouseup", onMouseUp, false);
          }
        };
        let onTouchMove = (e) => {
          let touch = [
            ...e.changedTouches
          ].findIndex(
            ({ identifier }) => identifier === state3.current.id
          );
          if (touch >= 0) {
            let { pageX, pageY } = e.changedTouches[touch];
            move(e, "touch", pageX - state3.current.lastPosition.pageX, pageY - state3.current.lastPosition.pageY);
            state3.current.lastPosition = {
              pageX,
              pageY
            };
          }
        };
        let onTouchEnd = (e) => {
          let touch = [
            ...e.changedTouches
          ].findIndex(
            ({ identifier }) => identifier === state3.current.id
          );
          if (touch >= 0) {
            end(e, "touch");
            state3.current.id = null;
            removeGlobalListener(window, "touchmove", onTouchMove);
            removeGlobalListener(window, "touchend", onTouchEnd);
            removeGlobalListener(window, "touchcancel", onTouchEnd);
          }
        };
        moveProps.onTouchStart = (e) => {
          if (e.changedTouches.length === 0 || state3.current.id != null)
            return;
          let { pageX, pageY, identifier } = e.changedTouches[0];
          start3();
          e.stopPropagation();
          e.preventDefault();
          state3.current.lastPosition = {
            pageX,
            pageY
          };
          state3.current.id = identifier;
          addGlobalListener(window, "touchmove", onTouchMove, false);
          addGlobalListener(window, "touchend", onTouchEnd, false);
          addGlobalListener(window, "touchcancel", onTouchEnd, false);
        };
      } else {
        let onPointerMove = (e) => {
          if (e.pointerId === state3.current.id) {
            let pointerType = e.pointerType || "mouse";
            move(e, pointerType, e.pageX - state3.current.lastPosition.pageX, e.pageY - state3.current.lastPosition.pageY);
            state3.current.lastPosition = {
              pageX: e.pageX,
              pageY: e.pageY
            };
          }
        };
        let onPointerUp = (e) => {
          if (e.pointerId === state3.current.id) {
            let pointerType = e.pointerType || "mouse";
            end(e, pointerType);
            state3.current.id = null;
            removeGlobalListener(window, "pointermove", onPointerMove, false);
            removeGlobalListener(window, "pointerup", onPointerUp, false);
            removeGlobalListener(window, "pointercancel", onPointerUp, false);
          }
        };
        moveProps.onPointerDown = (e) => {
          if (e.button === 0 && state3.current.id == null) {
            start3();
            e.stopPropagation();
            e.preventDefault();
            state3.current.lastPosition = {
              pageX: e.pageX,
              pageY: e.pageY
            };
            state3.current.id = e.pointerId;
            addGlobalListener(window, "pointermove", onPointerMove, false);
            addGlobalListener(window, "pointerup", onPointerUp, false);
            addGlobalListener(window, "pointercancel", onPointerUp, false);
          }
        };
      }
      let triggerKeyboardMove = (e, deltaX, deltaY) => {
        start3();
        move(e, "keyboard", deltaX, deltaY);
        end(e, "keyboard");
      };
      moveProps.onKeyDown = (e) => {
        switch (e.key) {
          case "Left":
          case "ArrowLeft":
            e.preventDefault();
            e.stopPropagation();
            triggerKeyboardMove(e, -1, 0);
            break;
          case "Right":
          case "ArrowRight":
            e.preventDefault();
            e.stopPropagation();
            triggerKeyboardMove(e, 1, 0);
            break;
          case "Up":
          case "ArrowUp":
            e.preventDefault();
            e.stopPropagation();
            triggerKeyboardMove(e, 0, -1);
            break;
          case "Down":
          case "ArrowDown":
            e.preventDefault();
            e.stopPropagation();
            triggerKeyboardMove(e, 0, 1);
            break;
        }
      };
      return moveProps;
    }, [
      state3,
      onMoveStart,
      onMove,
      onMoveEnd,
      addGlobalListener,
      removeGlobalListener
    ]);
    return {
      moveProps: moveProps1
    };
  }

  // node_modules/@react-aria/focus/dist/module.js
  function $6a99195332edec8b$export$80f3e147d781571c(element2) {
    if ($507fabe10e71c6fb$export$630ff653c5ada6a9() === "virtual") {
      let lastFocusedElement = document.activeElement;
      $bbed8b41f857bcc0$export$24490316f764c430(() => {
        if (document.activeElement === lastFocusedElement && document.contains(element2))
          $7215afc6de606d6b$export$de79e2c695e052f3(element2);
      });
    } else
      $7215afc6de606d6b$export$de79e2c695e052f3(element2);
  }
  var $9bf71ea28793e738$var$focusableElements = [
    "input:not([disabled]):not([type=hidden])",
    "select:not([disabled])",
    "textarea:not([disabled])",
    "button:not([disabled])",
    "a[href]",
    "area[href]",
    "summary",
    "iframe",
    "object",
    "embed",
    "audio[controls]",
    "video[controls]",
    "[contenteditable]"
  ];
  var $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
  $9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
  var $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
  function $9bf71ea28793e738$var$isElementInScope(element2, scope2) {
    return scope2.some(
      (node) => node.contains(element2)
    );
  }
  var $9bf71ea28793e738$var$Tree = class {
    get size() {
      return this.fastMap.size;
    }
    getTreeNode(data) {
      return this.fastMap.get(data);
    }
    addTreeNode(scopeRef, parent2, nodeToRestore) {
      let parentNode = this.fastMap.get(parent2 !== null && parent2 !== void 0 ? parent2 : null);
      let node = new $9bf71ea28793e738$var$TreeNode({
        scopeRef
      });
      parentNode.addChild(node);
      node.parent = parentNode;
      this.fastMap.set(scopeRef, node);
      if (nodeToRestore)
        node.nodeToRestore = nodeToRestore;
    }
    removeTreeNode(scopeRef) {
      if (scopeRef === null)
        return;
      let node = this.fastMap.get(scopeRef);
      let parentNode = node.parent;
      for (let current of this.traverse())
        if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current))
          current.nodeToRestore = node.nodeToRestore;
      let children3 = node.children;
      parentNode.removeChild(node);
      if (children3.length > 0)
        children3.forEach(
          (child) => parentNode.addChild(child)
        );
      this.fastMap.delete(node.scopeRef);
    }
    *traverse(node = this.root) {
      if (node.scopeRef != null)
        yield node;
      if (node.children.length > 0)
        for (let child of node.children)
          yield* this.traverse(child);
    }
    clone() {
      let newTree = new $9bf71ea28793e738$var$Tree();
      for (let node of this.traverse())
        newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);
      return newTree;
    }
    constructor() {
      this.fastMap = /* @__PURE__ */ new Map();
      this.root = new $9bf71ea28793e738$var$TreeNode({
        scopeRef: null
      });
      this.fastMap.set(null, this.root);
    }
  };
  var $9bf71ea28793e738$var$TreeNode = class {
    addChild(node) {
      this.children.push(node);
      node.parent = this;
    }
    removeChild(node) {
      this.children.splice(this.children.indexOf(node), 1);
      node.parent = void 0;
    }
    constructor(props) {
      this.children = [];
      this.contain = false;
      this.scopeRef = props.scopeRef;
    }
  };
  var $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();
  function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
    let { autoFocus = false, isTextInput, within } = props;
    let state3 = (0, import_react11.useRef)({
      isFocused: false,
      isFocusVisible: autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27()
    });
    let [isFocused1, setFocused] = (0, import_react11.useState)(false);
    let [isFocusVisibleState, setFocusVisible] = (0, import_react11.useState)(
      () => state3.current.isFocused && state3.current.isFocusVisible
    );
    let updateState = (0, import_react11.useCallback)(
      () => setFocusVisible(state3.current.isFocused && state3.current.isFocusVisible),
      []
    );
    let onFocusChange = (0, import_react11.useCallback)((isFocused) => {
      state3.current.isFocused = isFocused;
      setFocused(isFocused);
      updateState();
    }, [
      updateState
    ]);
    $507fabe10e71c6fb$export$ec71b4b83ac08ec3((isFocusVisible) => {
      state3.current.isFocusVisible = isFocusVisible;
      updateState();
    }, [], {
      isTextInput
    });
    let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
      isDisabled: within,
      onFocusChange
    });
    let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
      isDisabled: !within,
      onFocusWithinChange: onFocusChange
    });
    return {
      isFocused: isFocused1,
      isFocusVisible: state3.current.isFocused && isFocusVisibleState,
      focusProps: within ? focusWithinProps : focusProps
    };
  }
  var $e6afbd83fe6ebbd2$var$FocusableContext = /* @__PURE__ */ import_react11.default.createContext(null);
  function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
    let context = (0, import_react11.useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};
    $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref);
    let { ref: _, ...otherProps } = context;
    return otherProps;
  }
  function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
    let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props);
    let { keyboardProps } = $46d819fcbaf35654$export$8f71654801c2f7cd(props);
    let interactions = $3ef42575df84b30b$export$9d1611c77c2fe928(focusProps, keyboardProps);
    let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
    let interactionProps = props.isDisabled ? {} : domProps;
    let autoFocusRef = (0, import_react11.useRef)(props.autoFocus);
    (0, import_react11.useEffect)(() => {
      if (autoFocusRef.current && domRef.current)
        $6a99195332edec8b$export$80f3e147d781571c(domRef.current);
      autoFocusRef.current = false;
    }, [
      domRef
    ]);
    return {
      focusableProps: $3ef42575df84b30b$export$9d1611c77c2fe928({
        ...interactions,
        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : void 0
      }, interactionProps)
    };
  }

  // node_modules/@react-aria/i18n/dist/real-module.js
  var import_react12 = __toESM(require_react());
  var $148a7a147e38ea7f$var$RTL_SCRIPTS = /* @__PURE__ */ new Set([
    "Arab",
    "Syrc",
    "Samr",
    "Mand",
    "Thaa",
    "Mend",
    "Nkoo",
    "Adlm",
    "Rohg",
    "Hebr"
  ]);
  var $148a7a147e38ea7f$var$RTL_LANGS = /* @__PURE__ */ new Set([
    "ae",
    "ar",
    "arc",
    "bcc",
    "bqi",
    "ckb",
    "dv",
    "fa",
    "glk",
    "he",
    "ku",
    "mzn",
    "nqo",
    "pnb",
    "ps",
    "sd",
    "ug",
    "ur",
    "yi"
  ]);
  function $148a7a147e38ea7f$export$702d680b21cbd764(locale3) {
    if (Intl.Locale) {
      let script2 = new Intl.Locale(locale3).maximize().script;
      return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script2);
    }
    let lang2 = locale3.split("-")[0];
    return $148a7a147e38ea7f$var$RTL_LANGS.has(lang2);
  }
  function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
    let locale3 = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
    try {
      Intl.DateTimeFormat.supportedLocalesOf([
        locale3
      ]);
    } catch (_err) {
      locale3 = "en-US";
    }
    return {
      locale: locale3,
      direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale3) ? "rtl" : "ltr"
    };
  }
  var $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
  var $1e5a04cdaf7d1af8$var$listeners = /* @__PURE__ */ new Set();
  function $1e5a04cdaf7d1af8$var$updateLocale() {
    $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
    for (let listener of $1e5a04cdaf7d1af8$var$listeners)
      listener($1e5a04cdaf7d1af8$var$currentLocale);
  }
  function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
    let isSSR = $704cf1d3b684cc5c$export$535bd6ca7f90a273();
    let [defaultLocale3, setDefaultLocale] = (0, import_react12.useState)($1e5a04cdaf7d1af8$var$currentLocale);
    (0, import_react12.useEffect)(() => {
      if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
        window.addEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
      $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
      return () => {
        $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
        if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
          window.removeEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
      };
    }, []);
    if (isSSR)
      return {
        locale: "en-US",
        direction: "ltr"
      };
    return defaultLocale3;
  }
  var $18f2051aff69b9bf$var$I18nContext = /* @__PURE__ */ import_react12.default.createContext(null);
  function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
    let defaultLocale3 = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
    let context = (0, import_react12.useContext)($18f2051aff69b9bf$var$I18nContext);
    return context || defaultLocale3;
  }
  function $a916eb452884faea$export$b7a616150fdb9f44(options2 = {}) {
    let { locale: locale3 } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    return (0, import_react12.useMemo)(
      () => new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale3, options2),
      [
        locale3,
        options2
      ]
    );
  }

  // node_modules/@react-aria/label/dist/module.js
  function $d191a55c9702f145$export$8467354a121f1b9f(props) {
    let { id: id3, label: label5, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, labelElementType = "label" } = props;
    id3 = $bdb11010cef70236$export$f680877a34711e37(id3);
    let labelId = $bdb11010cef70236$export$f680877a34711e37();
    let labelProps = {};
    if (label5) {
      ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;
      labelProps = {
        id: labelId,
        htmlFor: labelElementType === "label" ? id3 : void 0
      };
    } else if (!ariaLabelledby && !ariaLabel)
      console.warn("If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility");
    let fieldProps = $313b98861ee5dd6c$export$d6875122194c7b44({
      id: id3,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby
    });
    return {
      labelProps,
      fieldProps
    };
  }

  // node_modules/@react-aria/visually-hidden/dist/module.js
  var import_react13 = __toESM(require_react());
  var $5c3e21d68f1c4674$var$styles = {
    border: 0,
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: 1,
    margin: "0 -1px -1px 0",
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    width: 1,
    whiteSpace: "nowrap"
  };
  function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
    let { style: style2, isFocusable } = props;
    let [isFocused, setFocused] = (0, import_react13.useState)(false);
    let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
      isDisabled: !isFocusable,
      onFocusWithinChange: (val) => setFocused(val)
    });
    let combinedStyles = (0, import_react13.useMemo)(() => {
      if (isFocused)
        return style2;
      else if (style2)
        return {
          ...$5c3e21d68f1c4674$var$styles,
          ...style2
        };
      else
        return $5c3e21d68f1c4674$var$styles;
    }, [
      isFocused
    ]);
    return {
      visuallyHiddenProps: {
        ...focusWithinProps,
        style: combinedStyles
      }
    };
  }
  function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
    let { children: children3, elementType: Element2 = "div", isFocusable, style: style2, ...otherProps } = props;
    let { visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
    return /* @__PURE__ */ import_react13.default.createElement(Element2, $3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, visuallyHiddenProps), children3);
  }

  // node_modules/@react-aria/slider/dist/module.js
  var import_react14 = __toESM(require_react());
  var $aa519ee6cf463259$export$7a8d2b02c9371cbf = /* @__PURE__ */ new WeakMap();
  function $aa519ee6cf463259$export$68e648cbec363a18(state3, index5) {
    let id3 = $aa519ee6cf463259$export$7a8d2b02c9371cbf.get(state3);
    if (!id3)
      throw new Error("Unknown slider state");
    return `${id3}-${index5}`;
  }
  function $bcca50147b47f54d$export$56b2c08e277f365(props, state3, trackRef) {
    let { labelProps, fieldProps } = $d191a55c9702f145$export$8467354a121f1b9f(props);
    let isVertical = props.orientation === "vertical";
    var _id;
    $aa519ee6cf463259$export$7a8d2b02c9371cbf.set(state3, (_id = labelProps.id) !== null && _id !== void 0 ? _id : fieldProps.id);
    let { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    let { addGlobalListener, removeGlobalListener } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
    const realTimeTrackDraggingIndex = (0, import_react14.useRef)(null);
    const stateRef = (0, import_react14.useRef)(null);
    stateRef.current = state3;
    const reverseX = direction === "rtl";
    const currentPosition = (0, import_react14.useRef)(null);
    const { moveProps } = $e8a7022cf87cba2a$export$36da96379f79f245({
      onMoveStart() {
        currentPosition.current = null;
      },
      onMove({ deltaX, deltaY }) {
        let { height: height8, width: width8 } = trackRef.current.getBoundingClientRect();
        let size5 = isVertical ? height8 : width8;
        if (currentPosition.current == null)
          currentPosition.current = stateRef.current.getThumbPercent(realTimeTrackDraggingIndex.current) * size5;
        let delta = isVertical ? deltaY : deltaX;
        if (isVertical || reverseX)
          delta = -delta;
        currentPosition.current += delta;
        if (realTimeTrackDraggingIndex.current != null && trackRef.current) {
          const percent = $9446cca9a3875146$export$7d15b64cf5a3a4c4(currentPosition.current / size5, 0, 1);
          stateRef.current.setThumbPercent(realTimeTrackDraggingIndex.current, percent);
        }
      },
      onMoveEnd() {
        if (realTimeTrackDraggingIndex.current != null) {
          stateRef.current.setThumbDragging(realTimeTrackDraggingIndex.current, false);
          realTimeTrackDraggingIndex.current = null;
        }
      }
    });
    let currentPointer = (0, import_react14.useRef)(void 0);
    let onDownTrack = (e, id3, clientX, clientY) => {
      if (trackRef.current && !props.isDisabled && state3.values.every(
        (_, i2) => !state3.isThumbDragging(i2)
      )) {
        let { height: height8, width: width8, top: top4, left: left2 } = trackRef.current.getBoundingClientRect();
        let size5 = isVertical ? height8 : width8;
        const trackPosition = isVertical ? top4 : left2;
        const clickPosition = isVertical ? clientY : clientX;
        const offset2 = clickPosition - trackPosition;
        let percent = offset2 / size5;
        if (direction === "rtl" || isVertical)
          percent = 1 - percent;
        let value12 = state3.getPercentValue(percent);
        let closestThumb;
        let split3 = state3.values.findIndex(
          (v) => value12 - v < 0
        );
        if (split3 === 0)
          closestThumb = split3;
        else if (split3 === -1)
          closestThumb = state3.values.length - 1;
        else {
          let lastLeft = state3.values[split3 - 1];
          let firstRight = state3.values[split3];
          if (Math.abs(lastLeft - value12) < Math.abs(firstRight - value12))
            closestThumb = split3 - 1;
          else
            closestThumb = split3;
        }
        if (closestThumb >= 0 && state3.isThumbEditable(closestThumb)) {
          e.preventDefault();
          realTimeTrackDraggingIndex.current = closestThumb;
          state3.setFocusedThumb(closestThumb);
          currentPointer.current = id3;
          state3.setThumbDragging(realTimeTrackDraggingIndex.current, true);
          state3.setThumbValue(closestThumb, value12);
          addGlobalListener(window, "mouseup", onUpTrack, false);
          addGlobalListener(window, "touchend", onUpTrack, false);
          addGlobalListener(window, "pointerup", onUpTrack, false);
        } else
          realTimeTrackDraggingIndex.current = null;
      }
    };
    let onUpTrack = (e) => {
      var ref;
      var _pointerId;
      let id3 = (_pointerId = e.pointerId) !== null && _pointerId !== void 0 ? _pointerId : (ref = e.changedTouches) === null || ref === void 0 ? void 0 : ref[0].identifier;
      if (id3 === currentPointer.current) {
        if (realTimeTrackDraggingIndex.current != null) {
          state3.setThumbDragging(realTimeTrackDraggingIndex.current, false);
          realTimeTrackDraggingIndex.current = null;
        }
        removeGlobalListener(window, "mouseup", onUpTrack, false);
        removeGlobalListener(window, "touchend", onUpTrack, false);
        removeGlobalListener(window, "pointerup", onUpTrack, false);
      }
    };
    if ("htmlFor" in labelProps && labelProps.htmlFor) {
      delete labelProps.htmlFor;
      labelProps.onClick = () => {
        var ref;
        (ref = document.getElementById($aa519ee6cf463259$export$68e648cbec363a18(state3, 0))) === null || ref === void 0 ? void 0 : ref.focus();
        $507fabe10e71c6fb$export$8397ddfc504fdb9a("keyboard");
      };
    }
    return {
      labelProps,
      groupProps: {
        role: "group",
        ...fieldProps
      },
      trackProps: $3ef42575df84b30b$export$9d1611c77c2fe928({
        onMouseDown(e) {
          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)
            return;
          onDownTrack(e, void 0, e.clientX, e.clientY);
        },
        onPointerDown(e) {
          if (e.pointerType === "mouse" && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey))
            return;
          onDownTrack(e, e.pointerId, e.clientX, e.clientY);
        },
        onTouchStart(e) {
          onDownTrack(e, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);
        },
        style: {
          position: "relative",
          touchAction: "none"
        }
      }, moveProps),
      outputProps: {
        htmlFor: state3.values.map(
          (_, index5) => $aa519ee6cf463259$export$68e648cbec363a18(state3, index5)
        ).join(" "),
        "aria-live": "off"
      }
    };
  }
  function $47b897dc8cdb026b$export$8d15029008292ae(opts, state3) {
    let { index: index5, isRequired, validationState, trackRef, inputRef, orientation = state3.orientation } = opts;
    let isDisabled = opts.isDisabled || state3.isDisabled;
    let isVertical = orientation === "vertical";
    let { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    let { addGlobalListener, removeGlobalListener } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
    let labelId = $aa519ee6cf463259$export$7a8d2b02c9371cbf.get(state3);
    var ref1;
    const { labelProps, fieldProps } = $d191a55c9702f145$export$8467354a121f1b9f({
      ...opts,
      id: $aa519ee6cf463259$export$68e648cbec363a18(state3, index5),
      "aria-labelledby": `${labelId} ${(ref1 = opts["aria-labelledby"]) !== null && ref1 !== void 0 ? ref1 : ""}`.trim()
    });
    const value12 = state3.values[index5];
    const focusInput = (0, import_react14.useCallback)(() => {
      if (inputRef.current)
        $7215afc6de606d6b$export$de79e2c695e052f3(inputRef.current);
    }, [
      inputRef
    ]);
    const isFocused = state3.focusedThumb === index5;
    (0, import_react14.useEffect)(() => {
      if (isFocused)
        focusInput();
    }, [
      isFocused,
      focusInput
    ]);
    const stateRef = (0, import_react14.useRef)(null);
    stateRef.current = state3;
    let reverseX = direction === "rtl";
    let currentPosition = (0, import_react14.useRef)(null);
    let { keyboardProps } = $46d819fcbaf35654$export$8f71654801c2f7cd({
      onKeyDown(e) {
        let { getThumbMaxValue, getThumbMinValue, decrementThumb, incrementThumb, setThumbValue, setThumbDragging, pageSize } = stateRef.current;
        if (!/^(PageUp|PageDown|Home|End)$/.test(e.key)) {
          e.continuePropagation();
          return;
        }
        e.preventDefault();
        setThumbDragging(index5, true);
        switch (e.key) {
          case "PageUp":
            incrementThumb(index5, pageSize);
            break;
          case "PageDown":
            decrementThumb(index5, pageSize);
            break;
          case "Home":
            setThumbValue(index5, getThumbMinValue(index5));
            break;
          case "End":
            setThumbValue(index5, getThumbMaxValue(index5));
            break;
        }
        setThumbDragging(index5, false);
      }
    });
    let { moveProps } = $e8a7022cf87cba2a$export$36da96379f79f245({
      onMoveStart() {
        currentPosition.current = null;
        stateRef.current.setThumbDragging(index5, true);
      },
      onMove({ deltaX, deltaY, pointerType, shiftKey }) {
        const { getThumbPercent, setThumbPercent, decrementThumb, incrementThumb, step: step3, pageSize } = stateRef.current;
        let { width: width8, height: height8 } = trackRef.current.getBoundingClientRect();
        let size5 = isVertical ? height8 : width8;
        if (currentPosition.current == null)
          currentPosition.current = getThumbPercent(index5) * size5;
        if (pointerType === "keyboard") {
          if (deltaX > 0 && reverseX || deltaX < 0 && !reverseX || deltaY > 0)
            decrementThumb(index5, shiftKey ? pageSize : step3);
          else
            incrementThumb(index5, shiftKey ? pageSize : step3);
        } else {
          let delta = isVertical ? deltaY : deltaX;
          if (isVertical || reverseX)
            delta = -delta;
          currentPosition.current += delta;
          setThumbPercent(index5, $9446cca9a3875146$export$7d15b64cf5a3a4c4(currentPosition.current / size5, 0, 1));
        }
      },
      onMoveEnd() {
        stateRef.current.setThumbDragging(index5, false);
      }
    });
    state3.setThumbEditable(index5, !isDisabled);
    const { focusableProps } = $e6afbd83fe6ebbd2$export$4c014de7c8940b4c($3ef42575df84b30b$export$9d1611c77c2fe928(opts, {
      onFocus: () => state3.setFocusedThumb(index5),
      onBlur: () => state3.setFocusedThumb(void 0)
    }), inputRef);
    let currentPointer = (0, import_react14.useRef)(void 0);
    let onDown = (id3) => {
      focusInput();
      currentPointer.current = id3;
      state3.setThumbDragging(index5, true);
      addGlobalListener(window, "mouseup", onUp, false);
      addGlobalListener(window, "touchend", onUp, false);
      addGlobalListener(window, "pointerup", onUp, false);
    };
    let onUp = (e) => {
      var ref;
      var _pointerId;
      let id3 = (_pointerId = e.pointerId) !== null && _pointerId !== void 0 ? _pointerId : (ref = e.changedTouches) === null || ref === void 0 ? void 0 : ref[0].identifier;
      if (id3 === currentPointer.current) {
        focusInput();
        state3.setThumbDragging(index5, false);
        removeGlobalListener(window, "mouseup", onUp, false);
        removeGlobalListener(window, "touchend", onUp, false);
        removeGlobalListener(window, "pointerup", onUp, false);
      }
    };
    let thumbPosition = state3.getThumbPercent(index5);
    if (isVertical || direction === "rtl")
      thumbPosition = 1 - thumbPosition;
    let interactions = !isDisabled ? $3ef42575df84b30b$export$9d1611c77c2fe928(keyboardProps, moveProps, {
      onMouseDown: (e) => {
        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)
          return;
        onDown();
      },
      onPointerDown: (e) => {
        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)
          return;
        onDown(e.pointerId);
      },
      onTouchStart: (e) => {
        onDown(e.changedTouches[0].identifier);
      }
    }) : {};
    return {
      inputProps: $3ef42575df84b30b$export$9d1611c77c2fe928(focusableProps, fieldProps, {
        type: "range",
        tabIndex: !isDisabled ? 0 : void 0,
        min: state3.getThumbMinValue(index5),
        max: state3.getThumbMaxValue(index5),
        step: state3.step,
        value: value12,
        disabled: isDisabled,
        "aria-orientation": orientation,
        "aria-valuetext": state3.getThumbValueLabel(index5),
        "aria-required": isRequired || void 0,
        "aria-invalid": validationState === "invalid" || void 0,
        "aria-errormessage": opts["aria-errormessage"],
        onChange: (e) => {
          stateRef.current.setThumbValue(index5, parseFloat(e.target.value));
        }
      }),
      thumbProps: {
        ...interactions,
        style: {
          position: "absolute",
          [isVertical ? "top" : "left"]: `${thumbPosition * 100}%`,
          transform: "translate(-50%, -50%)",
          touchAction: "none"
        }
      },
      labelProps,
      isDragging: state3.isThumbDragging(index5),
      isDisabled,
      isFocused
    };
  }

  // output/Slider/foreign.js
  var __assign2 = function() {
    __assign2 = Object.assign || function(t) {
      for (var s3, i2 = 1, n = arguments.length; i2 < n; i2++) {
        s3 = arguments[i2];
        for (var p2 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p2))
            t[p2] = s3[p2];
      }
      return t;
    };
    return __assign2.apply(this, arguments);
  };
  function Thumb(props) {
    var state3 = props.state, trackRef = props.trackRef, index5 = props.index;
    var inputRef = import_react15.default.useRef(null);
    var _a = $47b897dc8cdb026b$export$8d15029008292ae({
      index: index5,
      trackRef,
      inputRef
    }, state3), thumbProps = _a.thumbProps, inputProps = _a.inputProps, isDragging = _a.isDragging;
    var _b = $f7dceffc5ad7768b$export$4e328f61c538687f(), focusProps = _b.focusProps, isFocusVisible = _b.isFocusVisible;
    return import_react15.default.createElement(
      "div",
      __assign2({}, thumbProps, { className: "thumb ".concat(isFocusVisible ? "focus" : "", " ").concat(isDragging ? "dragging" : "", " ").concat(props.selected ? "selected" : "") }),
      import_react15.default.createElement(
        $5c3e21d68f1c4674$export$439d29a4e110a164,
        null,
        import_react15.default.createElement("input", __assign2({ ref: inputRef }, $3ef42575df84b30b$export$9d1611c77c2fe928(inputProps, focusProps)))
      )
    );
  }
  function _rangeSlider(props) {
    var onChange = function(_a2) {
      var minThumb = _a2[0], maxThumb = _a2[1];
      return props.onChange({ minThumb, maxThumb });
    };
    var value12 = [props.value.minThumb, props.value.maxThumb];
    var trackRef = import_react15.default.useRef(null);
    var numberFormatter = $a916eb452884faea$export$b7a616150fdb9f44({
      useGrouping: false,
      maximumFractionDigits: 0
    });
    var state3 = $28f99e3e86e6ec45$export$e5fda3247f5d67f9({
      maxValue: props.maxValue,
      minValue: props.minValue,
      onChange,
      value: value12,
      numberFormatter,
      label: "Years"
    });
    var _a = $bcca50147b47f54d$export$56b2c08e277f365({
      value: value12,
      maxValue: props.maxValue,
      minValue: props.minValue,
      onChange,
      label: "Years"
    }, state3, trackRef), groupProps = _a.groupProps, trackProps = _a.trackProps, labelProps = _a.labelProps, outputProps = _a.outputProps;
    return import_react15.default.createElement(
      "div",
      __assign2({}, groupProps, { className: "slider ".concat(state3.orientation) }),
      import_react15.default.createElement(
        "div",
        __assign2({}, trackProps, { ref: trackRef, className: "track ".concat(state3.isDisabled ? "disabled" : "") }),
        import_react15.default.createElement(Thumb, { index: 0, state: state3, trackRef, selected: props.earlierLastSet }),
        import_react15.default.createElement(Thumb, { index: 1, state: state3, trackRef, selected: !props.earlierLastSet })
      )
    );
  }

  // output/Slider/index.js
  var pure6 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var make3 = /* @__PURE__ */ component("RangeSlider")(function(props) {
    return pure6(element(_rangeSlider)({
      step: 1,
      minValue: props.minValue,
      maxValue: props.maxValue,
      value: props.value,
      onChange: mkEffectFn1(props.onChange),
      earlierLastSet: props.earlierLastSet
    }));
  });

  // output/Temp.Data/foreign.js
  var allData = [
    {
      "year": 1913,
      "month": "January",
      "value": 9.8
    },
    {
      "year": 1913,
      "month": "February",
      "value": 9.8
    },
    {
      "year": 1913,
      "month": "March",
      "value": 9.8
    },
    {
      "year": 1913,
      "month": "April",
      "value": 9.8
    },
    {
      "year": 1913,
      "month": "May",
      "value": 9.7
    },
    {
      "year": 1913,
      "month": "June",
      "value": 9.8
    },
    {
      "year": 1913,
      "month": "July",
      "value": 9.9
    },
    {
      "year": 1913,
      "month": "August",
      "value": 9.9
    },
    {
      "year": 1913,
      "month": "September",
      "value": 10
    },
    {
      "year": 1913,
      "month": "October",
      "value": 10
    },
    {
      "year": 1913,
      "month": "November",
      "value": 10.1
    },
    {
      "year": 1913,
      "month": "December",
      "value": 10
    },
    {
      "year": 1914,
      "month": "January",
      "value": 10
    },
    {
      "year": 1914,
      "month": "February",
      "value": 9.9
    },
    {
      "year": 1914,
      "month": "March",
      "value": 9.9
    },
    {
      "year": 1914,
      "month": "April",
      "value": 9.8
    },
    {
      "year": 1914,
      "month": "May",
      "value": 9.9
    },
    {
      "year": 1914,
      "month": "June",
      "value": 9.9
    },
    {
      "year": 1914,
      "month": "July",
      "value": 10
    },
    {
      "year": 1914,
      "month": "August",
      "value": 10.2
    },
    {
      "year": 1914,
      "month": "September",
      "value": 10.2
    },
    {
      "year": 1914,
      "month": "October",
      "value": 10.1
    },
    {
      "year": 1914,
      "month": "November",
      "value": 10.2
    },
    {
      "year": 1914,
      "month": "December",
      "value": 10.1
    },
    {
      "year": 1915,
      "month": "January",
      "value": 10.1
    },
    {
      "year": 1915,
      "month": "February",
      "value": 10
    },
    {
      "year": 1915,
      "month": "March",
      "value": 9.9
    },
    {
      "year": 1915,
      "month": "April",
      "value": 10
    },
    {
      "year": 1915,
      "month": "May",
      "value": 10.1
    },
    {
      "year": 1915,
      "month": "June",
      "value": 10.1
    },
    {
      "year": 1915,
      "month": "July",
      "value": 10.1
    },
    {
      "year": 1915,
      "month": "August",
      "value": 10.1
    },
    {
      "year": 1915,
      "month": "September",
      "value": 10.1
    },
    {
      "year": 1915,
      "month": "October",
      "value": 10.2
    },
    {
      "year": 1915,
      "month": "November",
      "value": 10.3
    },
    {
      "year": 1915,
      "month": "December",
      "value": 10.3
    },
    {
      "year": 1916,
      "month": "January",
      "value": 10.4
    },
    {
      "year": 1916,
      "month": "February",
      "value": 10.4
    },
    {
      "year": 1916,
      "month": "March",
      "value": 10.5
    },
    {
      "year": 1916,
      "month": "April",
      "value": 10.6
    },
    {
      "year": 1916,
      "month": "May",
      "value": 10.7
    },
    {
      "year": 1916,
      "month": "June",
      "value": 10.8
    },
    {
      "year": 1916,
      "month": "July",
      "value": 10.8
    },
    {
      "year": 1916,
      "month": "August",
      "value": 10.9
    },
    {
      "year": 1916,
      "month": "September",
      "value": 11.1
    },
    {
      "year": 1916,
      "month": "October",
      "value": 11.3
    },
    {
      "year": 1916,
      "month": "November",
      "value": 11.5
    },
    {
      "year": 1916,
      "month": "December",
      "value": 11.6
    },
    {
      "year": 1917,
      "month": "January",
      "value": 11.7
    },
    {
      "year": 1917,
      "month": "February",
      "value": 12
    },
    {
      "year": 1917,
      "month": "March",
      "value": 12
    },
    {
      "year": 1917,
      "month": "April",
      "value": 12.6
    },
    {
      "year": 1917,
      "month": "May",
      "value": 12.8
    },
    {
      "year": 1917,
      "month": "June",
      "value": 13
    },
    {
      "year": 1917,
      "month": "July",
      "value": 12.8
    },
    {
      "year": 1917,
      "month": "August",
      "value": 13
    },
    {
      "year": 1917,
      "month": "September",
      "value": 13.3
    },
    {
      "year": 1917,
      "month": "October",
      "value": 13.5
    },
    {
      "year": 1917,
      "month": "November",
      "value": 13.5
    },
    {
      "year": 1917,
      "month": "December",
      "value": 13.7
    },
    {
      "year": 1918,
      "month": "January",
      "value": 14
    },
    {
      "year": 1918,
      "month": "February",
      "value": 14.1
    },
    {
      "year": 1918,
      "month": "March",
      "value": 14
    },
    {
      "year": 1918,
      "month": "April",
      "value": 14.2
    },
    {
      "year": 1918,
      "month": "May",
      "value": 14.5
    },
    {
      "year": 1918,
      "month": "June",
      "value": 14.7
    },
    {
      "year": 1918,
      "month": "July",
      "value": 15.1
    },
    {
      "year": 1918,
      "month": "August",
      "value": 15.4
    },
    {
      "year": 1918,
      "month": "September",
      "value": 15.7
    },
    {
      "year": 1918,
      "month": "October",
      "value": 16
    },
    {
      "year": 1918,
      "month": "November",
      "value": 16.3
    },
    {
      "year": 1918,
      "month": "December",
      "value": 16.5
    },
    {
      "year": 1919,
      "month": "January",
      "value": 16.5
    },
    {
      "year": 1919,
      "month": "February",
      "value": 16.2
    },
    {
      "year": 1919,
      "month": "March",
      "value": 16.4
    },
    {
      "year": 1919,
      "month": "April",
      "value": 16.7
    },
    {
      "year": 1919,
      "month": "May",
      "value": 16.9
    },
    {
      "year": 1919,
      "month": "June",
      "value": 16.9
    },
    {
      "year": 1919,
      "month": "July",
      "value": 17.4
    },
    {
      "year": 1919,
      "month": "August",
      "value": 17.7
    },
    {
      "year": 1919,
      "month": "September",
      "value": 17.8
    },
    {
      "year": 1919,
      "month": "October",
      "value": 18.1
    },
    {
      "year": 1919,
      "month": "November",
      "value": 18.5
    },
    {
      "year": 1919,
      "month": "December",
      "value": 18.9
    },
    {
      "year": 1920,
      "month": "January",
      "value": 19.3
    },
    {
      "year": 1920,
      "month": "February",
      "value": 19.5
    },
    {
      "year": 1920,
      "month": "March",
      "value": 19.7
    },
    {
      "year": 1920,
      "month": "April",
      "value": 20.3
    },
    {
      "year": 1920,
      "month": "May",
      "value": 20.6
    },
    {
      "year": 1920,
      "month": "June",
      "value": 20.9
    },
    {
      "year": 1920,
      "month": "July",
      "value": 20.8
    },
    {
      "year": 1920,
      "month": "August",
      "value": 20.3
    },
    {
      "year": 1920,
      "month": "September",
      "value": 20
    },
    {
      "year": 1920,
      "month": "October",
      "value": 19.9
    },
    {
      "year": 1920,
      "month": "November",
      "value": 19.8
    },
    {
      "year": 1920,
      "month": "December",
      "value": 19.4
    },
    {
      "year": 1921,
      "month": "January",
      "value": 19
    },
    {
      "year": 1921,
      "month": "February",
      "value": 18.4
    },
    {
      "year": 1921,
      "month": "March",
      "value": 18.3
    },
    {
      "year": 1921,
      "month": "April",
      "value": 18.1
    },
    {
      "year": 1921,
      "month": "May",
      "value": 17.7
    },
    {
      "year": 1921,
      "month": "June",
      "value": 17.6
    },
    {
      "year": 1921,
      "month": "July",
      "value": 17.7
    },
    {
      "year": 1921,
      "month": "August",
      "value": 17.7
    },
    {
      "year": 1921,
      "month": "September",
      "value": 17.5
    },
    {
      "year": 1921,
      "month": "October",
      "value": 17.5
    },
    {
      "year": 1921,
      "month": "November",
      "value": 17.4
    },
    {
      "year": 1921,
      "month": "December",
      "value": 17.3
    },
    {
      "year": 1922,
      "month": "January",
      "value": 16.9
    },
    {
      "year": 1922,
      "month": "February",
      "value": 16.9
    },
    {
      "year": 1922,
      "month": "March",
      "value": 16.7
    },
    {
      "year": 1922,
      "month": "April",
      "value": 16.7
    },
    {
      "year": 1922,
      "month": "May",
      "value": 16.7
    },
    {
      "year": 1922,
      "month": "June",
      "value": 16.7
    },
    {
      "year": 1922,
      "month": "July",
      "value": 16.8
    },
    {
      "year": 1922,
      "month": "August",
      "value": 16.6
    },
    {
      "year": 1922,
      "month": "September",
      "value": 16.6
    },
    {
      "year": 1922,
      "month": "October",
      "value": 16.7
    },
    {
      "year": 1922,
      "month": "November",
      "value": 16.8
    },
    {
      "year": 1922,
      "month": "December",
      "value": 16.9
    },
    {
      "year": 1923,
      "month": "January",
      "value": 16.8
    },
    {
      "year": 1923,
      "month": "February",
      "value": 16.8
    },
    {
      "year": 1923,
      "month": "March",
      "value": 16.8
    },
    {
      "year": 1923,
      "month": "April",
      "value": 16.9
    },
    {
      "year": 1923,
      "month": "May",
      "value": 16.9
    },
    {
      "year": 1923,
      "month": "June",
      "value": 17
    },
    {
      "year": 1923,
      "month": "July",
      "value": 17.2
    },
    {
      "year": 1923,
      "month": "August",
      "value": 17.1
    },
    {
      "year": 1923,
      "month": "September",
      "value": 17.2
    },
    {
      "year": 1923,
      "month": "October",
      "value": 17.3
    },
    {
      "year": 1923,
      "month": "November",
      "value": 17.3
    },
    {
      "year": 1923,
      "month": "December",
      "value": 17.3
    },
    {
      "year": 1924,
      "month": "January",
      "value": 17.3
    },
    {
      "year": 1924,
      "month": "February",
      "value": 17.2
    },
    {
      "year": 1924,
      "month": "March",
      "value": 17.1
    },
    {
      "year": 1924,
      "month": "April",
      "value": 17
    },
    {
      "year": 1924,
      "month": "May",
      "value": 17
    },
    {
      "year": 1924,
      "month": "June",
      "value": 17
    },
    {
      "year": 1924,
      "month": "July",
      "value": 17.1
    },
    {
      "year": 1924,
      "month": "August",
      "value": 17
    },
    {
      "year": 1924,
      "month": "September",
      "value": 17.1
    },
    {
      "year": 1924,
      "month": "October",
      "value": 17.2
    },
    {
      "year": 1924,
      "month": "November",
      "value": 17.2
    },
    {
      "year": 1924,
      "month": "December",
      "value": 17.3
    },
    {
      "year": 1925,
      "month": "January",
      "value": 17.3
    },
    {
      "year": 1925,
      "month": "February",
      "value": 17.2
    },
    {
      "year": 1925,
      "month": "March",
      "value": 17.3
    },
    {
      "year": 1925,
      "month": "April",
      "value": 17.2
    },
    {
      "year": 1925,
      "month": "May",
      "value": 17.3
    },
    {
      "year": 1925,
      "month": "June",
      "value": 17.5
    },
    {
      "year": 1925,
      "month": "July",
      "value": 17.7
    },
    {
      "year": 1925,
      "month": "August",
      "value": 17.7
    },
    {
      "year": 1925,
      "month": "September",
      "value": 17.7
    },
    {
      "year": 1925,
      "month": "October",
      "value": 17.7
    },
    {
      "year": 1925,
      "month": "November",
      "value": 18
    },
    {
      "year": 1925,
      "month": "December",
      "value": 17.9
    },
    {
      "year": 1926,
      "month": "January",
      "value": 17.9
    },
    {
      "year": 1926,
      "month": "February",
      "value": 17.9
    },
    {
      "year": 1926,
      "month": "March",
      "value": 17.8
    },
    {
      "year": 1926,
      "month": "April",
      "value": 17.9
    },
    {
      "year": 1926,
      "month": "May",
      "value": 17.8
    },
    {
      "year": 1926,
      "month": "June",
      "value": 17.7
    },
    {
      "year": 1926,
      "month": "July",
      "value": 17.5
    },
    {
      "year": 1926,
      "month": "August",
      "value": 17.4
    },
    {
      "year": 1926,
      "month": "September",
      "value": 17.5
    },
    {
      "year": 1926,
      "month": "October",
      "value": 17.6
    },
    {
      "year": 1926,
      "month": "November",
      "value": 17.7
    },
    {
      "year": 1926,
      "month": "December",
      "value": 17.7
    },
    {
      "year": 1927,
      "month": "January",
      "value": 17.5
    },
    {
      "year": 1927,
      "month": "February",
      "value": 17.4
    },
    {
      "year": 1927,
      "month": "March",
      "value": 17.3
    },
    {
      "year": 1927,
      "month": "April",
      "value": 17.3
    },
    {
      "year": 1927,
      "month": "May",
      "value": 17.4
    },
    {
      "year": 1927,
      "month": "June",
      "value": 17.6
    },
    {
      "year": 1927,
      "month": "July",
      "value": 17.3
    },
    {
      "year": 1927,
      "month": "August",
      "value": 17.2
    },
    {
      "year": 1927,
      "month": "September",
      "value": 17.3
    },
    {
      "year": 1927,
      "month": "October",
      "value": 17.4
    },
    {
      "year": 1927,
      "month": "November",
      "value": 17.3
    },
    {
      "year": 1927,
      "month": "December",
      "value": 17.3
    },
    {
      "year": 1928,
      "month": "January",
      "value": 17.3
    },
    {
      "year": 1928,
      "month": "February",
      "value": 17.1
    },
    {
      "year": 1928,
      "month": "March",
      "value": 17.1
    },
    {
      "year": 1928,
      "month": "April",
      "value": 17.1
    },
    {
      "year": 1928,
      "month": "May",
      "value": 17.2
    },
    {
      "year": 1928,
      "month": "June",
      "value": 17.1
    },
    {
      "year": 1928,
      "month": "July",
      "value": 17.1
    },
    {
      "year": 1928,
      "month": "August",
      "value": 17.1
    },
    {
      "year": 1928,
      "month": "September",
      "value": 17.3
    },
    {
      "year": 1928,
      "month": "October",
      "value": 17.2
    },
    {
      "year": 1928,
      "month": "November",
      "value": 17.2
    },
    {
      "year": 1928,
      "month": "December",
      "value": 17.1
    },
    {
      "year": 1929,
      "month": "January",
      "value": 17.1
    },
    {
      "year": 1929,
      "month": "February",
      "value": 17.1
    },
    {
      "year": 1929,
      "month": "March",
      "value": 17
    },
    {
      "year": 1929,
      "month": "April",
      "value": 16.9
    },
    {
      "year": 1929,
      "month": "May",
      "value": 17
    },
    {
      "year": 1929,
      "month": "June",
      "value": 17.1
    },
    {
      "year": 1929,
      "month": "July",
      "value": 17.3
    },
    {
      "year": 1929,
      "month": "August",
      "value": 17.3
    },
    {
      "year": 1929,
      "month": "September",
      "value": 17.3
    },
    {
      "year": 1929,
      "month": "October",
      "value": 17.3
    },
    {
      "year": 1929,
      "month": "November",
      "value": 17.3
    },
    {
      "year": 1929,
      "month": "December",
      "value": 17.2
    },
    {
      "year": 1930,
      "month": "January",
      "value": 17.1
    },
    {
      "year": 1930,
      "month": "February",
      "value": 17
    },
    {
      "year": 1930,
      "month": "March",
      "value": 16.9
    },
    {
      "year": 1930,
      "month": "April",
      "value": 17
    },
    {
      "year": 1930,
      "month": "May",
      "value": 16.9
    },
    {
      "year": 1930,
      "month": "June",
      "value": 16.8
    },
    {
      "year": 1930,
      "month": "July",
      "value": 16.6
    },
    {
      "year": 1930,
      "month": "August",
      "value": 16.5
    },
    {
      "year": 1930,
      "month": "September",
      "value": 16.6
    },
    {
      "year": 1930,
      "month": "October",
      "value": 16.5
    },
    {
      "year": 1930,
      "month": "November",
      "value": 16.4
    },
    {
      "year": 1930,
      "month": "December",
      "value": 16.1
    },
    {
      "year": 1931,
      "month": "January",
      "value": 15.9
    },
    {
      "year": 1931,
      "month": "February",
      "value": 15.7
    },
    {
      "year": 1931,
      "month": "March",
      "value": 15.6
    },
    {
      "year": 1931,
      "month": "April",
      "value": 15.5
    },
    {
      "year": 1931,
      "month": "May",
      "value": 15.3
    },
    {
      "year": 1931,
      "month": "June",
      "value": 15.1
    },
    {
      "year": 1931,
      "month": "July",
      "value": 15.1
    },
    {
      "year": 1931,
      "month": "August",
      "value": 15.1
    },
    {
      "year": 1931,
      "month": "September",
      "value": 15
    },
    {
      "year": 1931,
      "month": "October",
      "value": 14.9
    },
    {
      "year": 1931,
      "month": "November",
      "value": 14.7
    },
    {
      "year": 1931,
      "month": "December",
      "value": 14.6
    },
    {
      "year": 1932,
      "month": "January",
      "value": 14.3
    },
    {
      "year": 1932,
      "month": "February",
      "value": 14.1
    },
    {
      "year": 1932,
      "month": "March",
      "value": 14
    },
    {
      "year": 1932,
      "month": "April",
      "value": 13.9
    },
    {
      "year": 1932,
      "month": "May",
      "value": 13.7
    },
    {
      "year": 1932,
      "month": "June",
      "value": 13.6
    },
    {
      "year": 1932,
      "month": "July",
      "value": 13.6
    },
    {
      "year": 1932,
      "month": "August",
      "value": 13.5
    },
    {
      "year": 1932,
      "month": "September",
      "value": 13.4
    },
    {
      "year": 1932,
      "month": "October",
      "value": 13.3
    },
    {
      "year": 1932,
      "month": "November",
      "value": 13.2
    },
    {
      "year": 1932,
      "month": "December",
      "value": 13.1
    },
    {
      "year": 1933,
      "month": "January",
      "value": 12.9
    },
    {
      "year": 1933,
      "month": "February",
      "value": 12.7
    },
    {
      "year": 1933,
      "month": "March",
      "value": 12.6
    },
    {
      "year": 1933,
      "month": "April",
      "value": 12.6
    },
    {
      "year": 1933,
      "month": "May",
      "value": 12.6
    },
    {
      "year": 1933,
      "month": "June",
      "value": 12.7
    },
    {
      "year": 1933,
      "month": "July",
      "value": 13.1
    },
    {
      "year": 1933,
      "month": "August",
      "value": 13.2
    },
    {
      "year": 1933,
      "month": "September",
      "value": 13.2
    },
    {
      "year": 1933,
      "month": "October",
      "value": 13.2
    },
    {
      "year": 1933,
      "month": "November",
      "value": 13.2
    },
    {
      "year": 1933,
      "month": "December",
      "value": 13.2
    },
    {
      "year": 1934,
      "month": "January",
      "value": 13.2
    },
    {
      "year": 1934,
      "month": "February",
      "value": 13.3
    },
    {
      "year": 1934,
      "month": "March",
      "value": 13.3
    },
    {
      "year": 1934,
      "month": "April",
      "value": 13.3
    },
    {
      "year": 1934,
      "month": "May",
      "value": 13.3
    },
    {
      "year": 1934,
      "month": "June",
      "value": 13.4
    },
    {
      "year": 1934,
      "month": "July",
      "value": 13.4
    },
    {
      "year": 1934,
      "month": "August",
      "value": 13.4
    },
    {
      "year": 1934,
      "month": "September",
      "value": 13.6
    },
    {
      "year": 1934,
      "month": "October",
      "value": 13.5
    },
    {
      "year": 1934,
      "month": "November",
      "value": 13.5
    },
    {
      "year": 1934,
      "month": "December",
      "value": 13.4
    },
    {
      "year": 1935,
      "month": "January",
      "value": 13.6
    },
    {
      "year": 1935,
      "month": "February",
      "value": 13.7
    },
    {
      "year": 1935,
      "month": "March",
      "value": 13.7
    },
    {
      "year": 1935,
      "month": "April",
      "value": 13.8
    },
    {
      "year": 1935,
      "month": "May",
      "value": 13.8
    },
    {
      "year": 1935,
      "month": "June",
      "value": 13.7
    },
    {
      "year": 1935,
      "month": "July",
      "value": 13.7
    },
    {
      "year": 1935,
      "month": "August",
      "value": 13.7
    },
    {
      "year": 1935,
      "month": "September",
      "value": 13.7
    },
    {
      "year": 1935,
      "month": "October",
      "value": 13.7
    },
    {
      "year": 1935,
      "month": "November",
      "value": 13.8
    },
    {
      "year": 1935,
      "month": "December",
      "value": 13.8
    },
    {
      "year": 1936,
      "month": "January",
      "value": 13.8
    },
    {
      "year": 1936,
      "month": "February",
      "value": 13.8
    },
    {
      "year": 1936,
      "month": "March",
      "value": 13.7
    },
    {
      "year": 1936,
      "month": "April",
      "value": 13.7
    },
    {
      "year": 1936,
      "month": "May",
      "value": 13.7
    },
    {
      "year": 1936,
      "month": "June",
      "value": 13.8
    },
    {
      "year": 1936,
      "month": "July",
      "value": 13.9
    },
    {
      "year": 1936,
      "month": "August",
      "value": 14
    },
    {
      "year": 1936,
      "month": "September",
      "value": 14
    },
    {
      "year": 1936,
      "month": "October",
      "value": 14
    },
    {
      "year": 1936,
      "month": "November",
      "value": 14
    },
    {
      "year": 1936,
      "month": "December",
      "value": 14
    },
    {
      "year": 1937,
      "month": "January",
      "value": 14.1
    },
    {
      "year": 1937,
      "month": "February",
      "value": 14.1
    },
    {
      "year": 1937,
      "month": "March",
      "value": 14.2
    },
    {
      "year": 1937,
      "month": "April",
      "value": 14.3
    },
    {
      "year": 1937,
      "month": "May",
      "value": 14.4
    },
    {
      "year": 1937,
      "month": "June",
      "value": 14.4
    },
    {
      "year": 1937,
      "month": "July",
      "value": 14.5
    },
    {
      "year": 1937,
      "month": "August",
      "value": 14.5
    },
    {
      "year": 1937,
      "month": "September",
      "value": 14.6
    },
    {
      "year": 1937,
      "month": "October",
      "value": 14.6
    },
    {
      "year": 1937,
      "month": "November",
      "value": 14.5
    },
    {
      "year": 1937,
      "month": "December",
      "value": 14.4
    },
    {
      "year": 1938,
      "month": "January",
      "value": 14.2
    },
    {
      "year": 1938,
      "month": "February",
      "value": 14.1
    },
    {
      "year": 1938,
      "month": "March",
      "value": 14.1
    },
    {
      "year": 1938,
      "month": "April",
      "value": 14.2
    },
    {
      "year": 1938,
      "month": "May",
      "value": 14.1
    },
    {
      "year": 1938,
      "month": "June",
      "value": 14.1
    },
    {
      "year": 1938,
      "month": "July",
      "value": 14.1
    },
    {
      "year": 1938,
      "month": "August",
      "value": 14.1
    },
    {
      "year": 1938,
      "month": "September",
      "value": 14.1
    },
    {
      "year": 1938,
      "month": "October",
      "value": 14
    },
    {
      "year": 1938,
      "month": "November",
      "value": 14
    },
    {
      "year": 1938,
      "month": "December",
      "value": 14
    },
    {
      "year": 1939,
      "month": "January",
      "value": 14
    },
    {
      "year": 1939,
      "month": "February",
      "value": 13.9
    },
    {
      "year": 1939,
      "month": "March",
      "value": 13.9
    },
    {
      "year": 1939,
      "month": "April",
      "value": 13.8
    },
    {
      "year": 1939,
      "month": "May",
      "value": 13.8
    },
    {
      "year": 1939,
      "month": "June",
      "value": 13.8
    },
    {
      "year": 1939,
      "month": "July",
      "value": 13.8
    },
    {
      "year": 1939,
      "month": "August",
      "value": 13.8
    },
    {
      "year": 1939,
      "month": "September",
      "value": 14.1
    },
    {
      "year": 1939,
      "month": "October",
      "value": 14
    },
    {
      "year": 1939,
      "month": "November",
      "value": 14
    },
    {
      "year": 1939,
      "month": "December",
      "value": 14
    },
    {
      "year": 1940,
      "month": "January",
      "value": 13.9
    },
    {
      "year": 1940,
      "month": "February",
      "value": 14
    },
    {
      "year": 1940,
      "month": "March",
      "value": 14
    },
    {
      "year": 1940,
      "month": "April",
      "value": 14
    },
    {
      "year": 1940,
      "month": "May",
      "value": 14
    },
    {
      "year": 1940,
      "month": "June",
      "value": 14.1
    },
    {
      "year": 1940,
      "month": "July",
      "value": 14
    },
    {
      "year": 1940,
      "month": "August",
      "value": 14
    },
    {
      "year": 1940,
      "month": "September",
      "value": 14
    },
    {
      "year": 1940,
      "month": "October",
      "value": 14
    },
    {
      "year": 1940,
      "month": "November",
      "value": 14
    },
    {
      "year": 1940,
      "month": "December",
      "value": 14.1
    },
    {
      "year": 1941,
      "month": "January",
      "value": 14.1
    },
    {
      "year": 1941,
      "month": "February",
      "value": 14.1
    },
    {
      "year": 1941,
      "month": "March",
      "value": 14.2
    },
    {
      "year": 1941,
      "month": "April",
      "value": 14.3
    },
    {
      "year": 1941,
      "month": "May",
      "value": 14.4
    },
    {
      "year": 1941,
      "month": "June",
      "value": 14.7
    },
    {
      "year": 1941,
      "month": "July",
      "value": 14.7
    },
    {
      "year": 1941,
      "month": "August",
      "value": 14.9
    },
    {
      "year": 1941,
      "month": "September",
      "value": 15.1
    },
    {
      "year": 1941,
      "month": "October",
      "value": 15.3
    },
    {
      "year": 1941,
      "month": "November",
      "value": 15.4
    },
    {
      "year": 1941,
      "month": "December",
      "value": 15.5
    },
    {
      "year": 1942,
      "month": "January",
      "value": 15.7
    },
    {
      "year": 1942,
      "month": "February",
      "value": 15.8
    },
    {
      "year": 1942,
      "month": "March",
      "value": 16
    },
    {
      "year": 1942,
      "month": "April",
      "value": 16.1
    },
    {
      "year": 1942,
      "month": "May",
      "value": 16.3
    },
    {
      "year": 1942,
      "month": "June",
      "value": 16.3
    },
    {
      "year": 1942,
      "month": "July",
      "value": 16.4
    },
    {
      "year": 1942,
      "month": "August",
      "value": 16.5
    },
    {
      "year": 1942,
      "month": "September",
      "value": 16.5
    },
    {
      "year": 1942,
      "month": "October",
      "value": 16.7
    },
    {
      "year": 1942,
      "month": "November",
      "value": 16.8
    },
    {
      "year": 1942,
      "month": "December",
      "value": 16.9
    },
    {
      "year": 1943,
      "month": "January",
      "value": 16.9
    },
    {
      "year": 1943,
      "month": "February",
      "value": 16.9
    },
    {
      "year": 1943,
      "month": "March",
      "value": 17.2
    },
    {
      "year": 1943,
      "month": "April",
      "value": 17.4
    },
    {
      "year": 1943,
      "month": "May",
      "value": 17.5
    },
    {
      "year": 1943,
      "month": "June",
      "value": 17.5
    },
    {
      "year": 1943,
      "month": "July",
      "value": 17.4
    },
    {
      "year": 1943,
      "month": "August",
      "value": 17.3
    },
    {
      "year": 1943,
      "month": "September",
      "value": 17.4
    },
    {
      "year": 1943,
      "month": "October",
      "value": 17.4
    },
    {
      "year": 1943,
      "month": "November",
      "value": 17.4
    },
    {
      "year": 1943,
      "month": "December",
      "value": 17.4
    },
    {
      "year": 1944,
      "month": "January",
      "value": 17.4
    },
    {
      "year": 1944,
      "month": "February",
      "value": 17.4
    },
    {
      "year": 1944,
      "month": "March",
      "value": 17.4
    },
    {
      "year": 1944,
      "month": "April",
      "value": 17.5
    },
    {
      "year": 1944,
      "month": "May",
      "value": 17.5
    },
    {
      "year": 1944,
      "month": "June",
      "value": 17.6
    },
    {
      "year": 1944,
      "month": "July",
      "value": 17.7
    },
    {
      "year": 1944,
      "month": "August",
      "value": 17.7
    },
    {
      "year": 1944,
      "month": "September",
      "value": 17.7
    },
    {
      "year": 1944,
      "month": "October",
      "value": 17.7
    },
    {
      "year": 1944,
      "month": "November",
      "value": 17.7
    },
    {
      "year": 1944,
      "month": "December",
      "value": 17.8
    },
    {
      "year": 1945,
      "month": "January",
      "value": 17.8
    },
    {
      "year": 1945,
      "month": "February",
      "value": 17.8
    },
    {
      "year": 1945,
      "month": "March",
      "value": 17.8
    },
    {
      "year": 1945,
      "month": "April",
      "value": 17.8
    },
    {
      "year": 1945,
      "month": "May",
      "value": 17.9
    },
    {
      "year": 1945,
      "month": "June",
      "value": 18.1
    },
    {
      "year": 1945,
      "month": "July",
      "value": 18.1
    },
    {
      "year": 1945,
      "month": "August",
      "value": 18.1
    },
    {
      "year": 1945,
      "month": "September",
      "value": 18.1
    },
    {
      "year": 1945,
      "month": "October",
      "value": 18.1
    },
    {
      "year": 1945,
      "month": "November",
      "value": 18.1
    },
    {
      "year": 1945,
      "month": "December",
      "value": 18.2
    },
    {
      "year": 1946,
      "month": "January",
      "value": 18.2
    },
    {
      "year": 1946,
      "month": "February",
      "value": 18.1
    },
    {
      "year": 1946,
      "month": "March",
      "value": 18.3
    },
    {
      "year": 1946,
      "month": "April",
      "value": 18.4
    },
    {
      "year": 1946,
      "month": "May",
      "value": 18.5
    },
    {
      "year": 1946,
      "month": "June",
      "value": 18.7
    },
    {
      "year": 1946,
      "month": "July",
      "value": 19.8
    },
    {
      "year": 1946,
      "month": "August",
      "value": 20.2
    },
    {
      "year": 1946,
      "month": "September",
      "value": 20.4
    },
    {
      "year": 1946,
      "month": "October",
      "value": 20.8
    },
    {
      "year": 1946,
      "month": "November",
      "value": 21.3
    },
    {
      "year": 1946,
      "month": "December",
      "value": 21.5
    },
    {
      "year": 1947,
      "month": "January",
      "value": 21.5
    },
    {
      "year": 1947,
      "month": "February",
      "value": 21.5
    },
    {
      "year": 1947,
      "month": "March",
      "value": 21.9
    },
    {
      "year": 1947,
      "month": "April",
      "value": 21.9
    },
    {
      "year": 1947,
      "month": "May",
      "value": 21.9
    },
    {
      "year": 1947,
      "month": "June",
      "value": 22
    },
    {
      "year": 1947,
      "month": "July",
      "value": 22.2
    },
    {
      "year": 1947,
      "month": "August",
      "value": 22.5
    },
    {
      "year": 1947,
      "month": "September",
      "value": 23
    },
    {
      "year": 1947,
      "month": "October",
      "value": 23
    },
    {
      "year": 1947,
      "month": "November",
      "value": 23.1
    },
    {
      "year": 1947,
      "month": "December",
      "value": 23.4
    },
    {
      "year": 1948,
      "month": "January",
      "value": 23.7
    },
    {
      "year": 1948,
      "month": "February",
      "value": 23.5
    },
    {
      "year": 1948,
      "month": "March",
      "value": 23.4
    },
    {
      "year": 1948,
      "month": "April",
      "value": 23.8
    },
    {
      "year": 1948,
      "month": "May",
      "value": 23.9
    },
    {
      "year": 1948,
      "month": "June",
      "value": 24.1
    },
    {
      "year": 1948,
      "month": "July",
      "value": 24.4
    },
    {
      "year": 1948,
      "month": "August",
      "value": 24.5
    },
    {
      "year": 1948,
      "month": "September",
      "value": 24.5
    },
    {
      "year": 1948,
      "month": "October",
      "value": 24.4
    },
    {
      "year": 1948,
      "month": "November",
      "value": 24.2
    },
    {
      "year": 1948,
      "month": "December",
      "value": 24.1
    },
    {
      "year": 1949,
      "month": "January",
      "value": 24
    },
    {
      "year": 1949,
      "month": "February",
      "value": 23.8
    },
    {
      "year": 1949,
      "month": "March",
      "value": 23.8
    },
    {
      "year": 1949,
      "month": "April",
      "value": 23.9
    },
    {
      "year": 1949,
      "month": "May",
      "value": 23.8
    },
    {
      "year": 1949,
      "month": "June",
      "value": 23.9
    },
    {
      "year": 1949,
      "month": "July",
      "value": 23.7
    },
    {
      "year": 1949,
      "month": "August",
      "value": 23.8
    },
    {
      "year": 1949,
      "month": "September",
      "value": 23.9
    },
    {
      "year": 1949,
      "month": "October",
      "value": 23.7
    },
    {
      "year": 1949,
      "month": "November",
      "value": 23.8
    },
    {
      "year": 1949,
      "month": "December",
      "value": 23.6
    },
    {
      "year": 1950,
      "month": "January",
      "value": 23.5
    },
    {
      "year": 1950,
      "month": "February",
      "value": 23.5
    },
    {
      "year": 1950,
      "month": "March",
      "value": 23.6
    },
    {
      "year": 1950,
      "month": "April",
      "value": 23.6
    },
    {
      "year": 1950,
      "month": "May",
      "value": 23.7
    },
    {
      "year": 1950,
      "month": "June",
      "value": 23.8
    },
    {
      "year": 1950,
      "month": "July",
      "value": 24.1
    },
    {
      "year": 1950,
      "month": "August",
      "value": 24.3
    },
    {
      "year": 1950,
      "month": "September",
      "value": 24.4
    },
    {
      "year": 1950,
      "month": "October",
      "value": 24.6
    },
    {
      "year": 1950,
      "month": "November",
      "value": 24.7
    },
    {
      "year": 1950,
      "month": "December",
      "value": 25
    },
    {
      "year": 1951,
      "month": "January",
      "value": 25.4
    },
    {
      "year": 1951,
      "month": "February",
      "value": 25.7
    },
    {
      "year": 1951,
      "month": "March",
      "value": 25.8
    },
    {
      "year": 1951,
      "month": "April",
      "value": 25.8
    },
    {
      "year": 1951,
      "month": "May",
      "value": 25.9
    },
    {
      "year": 1951,
      "month": "June",
      "value": 25.9
    },
    {
      "year": 1951,
      "month": "July",
      "value": 25.9
    },
    {
      "year": 1951,
      "month": "August",
      "value": 25.9
    },
    {
      "year": 1951,
      "month": "September",
      "value": 26.1
    },
    {
      "year": 1951,
      "month": "October",
      "value": 26.2
    },
    {
      "year": 1951,
      "month": "November",
      "value": 26.4
    },
    {
      "year": 1951,
      "month": "December",
      "value": 26.5
    },
    {
      "year": 1952,
      "month": "January",
      "value": 26.5
    },
    {
      "year": 1952,
      "month": "February",
      "value": 26.3
    },
    {
      "year": 1952,
      "month": "March",
      "value": 26.3
    },
    {
      "year": 1952,
      "month": "April",
      "value": 26.4
    },
    {
      "year": 1952,
      "month": "May",
      "value": 26.4
    },
    {
      "year": 1952,
      "month": "June",
      "value": 26.5
    },
    {
      "year": 1952,
      "month": "July",
      "value": 26.7
    },
    {
      "year": 1952,
      "month": "August",
      "value": 26.7
    },
    {
      "year": 1952,
      "month": "September",
      "value": 26.7
    },
    {
      "year": 1952,
      "month": "October",
      "value": 26.7
    },
    {
      "year": 1952,
      "month": "November",
      "value": 26.7
    },
    {
      "year": 1952,
      "month": "December",
      "value": 26.7
    },
    {
      "year": 1953,
      "month": "January",
      "value": 26.6
    },
    {
      "year": 1953,
      "month": "February",
      "value": 26.5
    },
    {
      "year": 1953,
      "month": "March",
      "value": 26.6
    },
    {
      "year": 1953,
      "month": "April",
      "value": 26.6
    },
    {
      "year": 1953,
      "month": "May",
      "value": 26.7
    },
    {
      "year": 1953,
      "month": "June",
      "value": 26.8
    },
    {
      "year": 1953,
      "month": "July",
      "value": 26.8
    },
    {
      "year": 1953,
      "month": "August",
      "value": 26.9
    },
    {
      "year": 1953,
      "month": "September",
      "value": 26.9
    },
    {
      "year": 1953,
      "month": "October",
      "value": 27
    },
    {
      "year": 1953,
      "month": "November",
      "value": 26.9
    },
    {
      "year": 1953,
      "month": "December",
      "value": 26.9
    },
    {
      "year": 1954,
      "month": "January",
      "value": 26.9
    },
    {
      "year": 1954,
      "month": "February",
      "value": 26.9
    },
    {
      "year": 1954,
      "month": "March",
      "value": 26.9
    },
    {
      "year": 1954,
      "month": "April",
      "value": 26.8
    },
    {
      "year": 1954,
      "month": "May",
      "value": 26.9
    },
    {
      "year": 1954,
      "month": "June",
      "value": 26.9
    },
    {
      "year": 1954,
      "month": "July",
      "value": 26.9
    },
    {
      "year": 1954,
      "month": "August",
      "value": 26.9
    },
    {
      "year": 1954,
      "month": "September",
      "value": 26.8
    },
    {
      "year": 1954,
      "month": "October",
      "value": 26.8
    },
    {
      "year": 1954,
      "month": "November",
      "value": 26.8
    },
    {
      "year": 1954,
      "month": "December",
      "value": 26.7
    },
    {
      "year": 1955,
      "month": "January",
      "value": 26.7
    },
    {
      "year": 1955,
      "month": "February",
      "value": 26.7
    },
    {
      "year": 1955,
      "month": "March",
      "value": 26.7
    },
    {
      "year": 1955,
      "month": "April",
      "value": 26.7
    },
    {
      "year": 1955,
      "month": "May",
      "value": 26.7
    },
    {
      "year": 1955,
      "month": "June",
      "value": 26.7
    },
    {
      "year": 1955,
      "month": "July",
      "value": 26.8
    },
    {
      "year": 1955,
      "month": "August",
      "value": 26.8
    },
    {
      "year": 1955,
      "month": "September",
      "value": 26.9
    },
    {
      "year": 1955,
      "month": "October",
      "value": 26.9
    },
    {
      "year": 1955,
      "month": "November",
      "value": 26.9
    },
    {
      "year": 1955,
      "month": "December",
      "value": 26.8
    },
    {
      "year": 1956,
      "month": "January",
      "value": 26.8
    },
    {
      "year": 1956,
      "month": "February",
      "value": 26.8
    },
    {
      "year": 1956,
      "month": "March",
      "value": 26.8
    },
    {
      "year": 1956,
      "month": "April",
      "value": 26.9
    },
    {
      "year": 1956,
      "month": "May",
      "value": 27
    },
    {
      "year": 1956,
      "month": "June",
      "value": 27.2
    },
    {
      "year": 1956,
      "month": "July",
      "value": 27.4
    },
    {
      "year": 1956,
      "month": "August",
      "value": 27.3
    },
    {
      "year": 1956,
      "month": "September",
      "value": 27.4
    },
    {
      "year": 1956,
      "month": "October",
      "value": 27.5
    },
    {
      "year": 1956,
      "month": "November",
      "value": 27.5
    },
    {
      "year": 1956,
      "month": "December",
      "value": 27.6
    },
    {
      "year": 1957,
      "month": "January",
      "value": 27.6
    },
    {
      "year": 1957,
      "month": "February",
      "value": 27.7
    },
    {
      "year": 1957,
      "month": "March",
      "value": 27.8
    },
    {
      "year": 1957,
      "month": "April",
      "value": 27.9
    },
    {
      "year": 1957,
      "month": "May",
      "value": 28
    },
    {
      "year": 1957,
      "month": "June",
      "value": 28.1
    },
    {
      "year": 1957,
      "month": "July",
      "value": 28.3
    },
    {
      "year": 1957,
      "month": "August",
      "value": 28.3
    },
    {
      "year": 1957,
      "month": "September",
      "value": 28.3
    },
    {
      "year": 1957,
      "month": "October",
      "value": 28.3
    },
    {
      "year": 1957,
      "month": "November",
      "value": 28.4
    },
    {
      "year": 1957,
      "month": "December",
      "value": 28.4
    },
    {
      "year": 1958,
      "month": "January",
      "value": 28.6
    },
    {
      "year": 1958,
      "month": "February",
      "value": 28.6
    },
    {
      "year": 1958,
      "month": "March",
      "value": 28.8
    },
    {
      "year": 1958,
      "month": "April",
      "value": 28.9
    },
    {
      "year": 1958,
      "month": "May",
      "value": 28.9
    },
    {
      "year": 1958,
      "month": "June",
      "value": 28.9
    },
    {
      "year": 1958,
      "month": "July",
      "value": 29
    },
    {
      "year": 1958,
      "month": "August",
      "value": 28.9
    },
    {
      "year": 1958,
      "month": "September",
      "value": 28.9
    },
    {
      "year": 1958,
      "month": "October",
      "value": 28.9
    },
    {
      "year": 1958,
      "month": "November",
      "value": 29
    },
    {
      "year": 1958,
      "month": "December",
      "value": 28.9
    },
    {
      "year": 1959,
      "month": "January",
      "value": 29
    },
    {
      "year": 1959,
      "month": "February",
      "value": 28.9
    },
    {
      "year": 1959,
      "month": "March",
      "value": 28.9
    },
    {
      "year": 1959,
      "month": "April",
      "value": 29
    },
    {
      "year": 1959,
      "month": "May",
      "value": 29
    },
    {
      "year": 1959,
      "month": "June",
      "value": 29.1
    },
    {
      "year": 1959,
      "month": "July",
      "value": 29.2
    },
    {
      "year": 1959,
      "month": "August",
      "value": 29.2
    },
    {
      "year": 1959,
      "month": "September",
      "value": 29.3
    },
    {
      "year": 1959,
      "month": "October",
      "value": 29.4
    },
    {
      "year": 1959,
      "month": "November",
      "value": 29.4
    },
    {
      "year": 1959,
      "month": "December",
      "value": 29.4
    },
    {
      "year": 1960,
      "month": "January",
      "value": 29.3
    },
    {
      "year": 1960,
      "month": "February",
      "value": 29.4
    },
    {
      "year": 1960,
      "month": "March",
      "value": 29.4
    },
    {
      "year": 1960,
      "month": "April",
      "value": 29.5
    },
    {
      "year": 1960,
      "month": "May",
      "value": 29.5
    },
    {
      "year": 1960,
      "month": "June",
      "value": 29.6
    },
    {
      "year": 1960,
      "month": "July",
      "value": 29.6
    },
    {
      "year": 1960,
      "month": "August",
      "value": 29.6
    },
    {
      "year": 1960,
      "month": "September",
      "value": 29.6
    },
    {
      "year": 1960,
      "month": "October",
      "value": 29.8
    },
    {
      "year": 1960,
      "month": "November",
      "value": 29.8
    },
    {
      "year": 1960,
      "month": "December",
      "value": 29.8
    },
    {
      "year": 1961,
      "month": "January",
      "value": 29.8
    },
    {
      "year": 1961,
      "month": "February",
      "value": 29.8
    },
    {
      "year": 1961,
      "month": "March",
      "value": 29.8
    },
    {
      "year": 1961,
      "month": "April",
      "value": 29.8
    },
    {
      "year": 1961,
      "month": "May",
      "value": 29.8
    },
    {
      "year": 1961,
      "month": "June",
      "value": 29.8
    },
    {
      "year": 1961,
      "month": "July",
      "value": 30
    },
    {
      "year": 1961,
      "month": "August",
      "value": 29.9
    },
    {
      "year": 1961,
      "month": "September",
      "value": 30
    },
    {
      "year": 1961,
      "month": "October",
      "value": 30
    },
    {
      "year": 1961,
      "month": "November",
      "value": 30
    },
    {
      "year": 1961,
      "month": "December",
      "value": 30
    },
    {
      "year": 1962,
      "month": "January",
      "value": 30
    },
    {
      "year": 1962,
      "month": "February",
      "value": 30.1
    },
    {
      "year": 1962,
      "month": "March",
      "value": 30.1
    },
    {
      "year": 1962,
      "month": "April",
      "value": 30.2
    },
    {
      "year": 1962,
      "month": "May",
      "value": 30.2
    },
    {
      "year": 1962,
      "month": "June",
      "value": 30.2
    },
    {
      "year": 1962,
      "month": "July",
      "value": 30.3
    },
    {
      "year": 1962,
      "month": "August",
      "value": 30.3
    },
    {
      "year": 1962,
      "month": "September",
      "value": 30.4
    },
    {
      "year": 1962,
      "month": "October",
      "value": 30.4
    },
    {
      "year": 1962,
      "month": "November",
      "value": 30.4
    },
    {
      "year": 1962,
      "month": "December",
      "value": 30.4
    },
    {
      "year": 1963,
      "month": "January",
      "value": 30.4
    },
    {
      "year": 1963,
      "month": "February",
      "value": 30.4
    },
    {
      "year": 1963,
      "month": "March",
      "value": 30.5
    },
    {
      "year": 1963,
      "month": "April",
      "value": 30.5
    },
    {
      "year": 1963,
      "month": "May",
      "value": 30.5
    },
    {
      "year": 1963,
      "month": "June",
      "value": 30.6
    },
    {
      "year": 1963,
      "month": "July",
      "value": 30.7
    },
    {
      "year": 1963,
      "month": "August",
      "value": 30.7
    },
    {
      "year": 1963,
      "month": "September",
      "value": 30.7
    },
    {
      "year": 1963,
      "month": "October",
      "value": 30.8
    },
    {
      "year": 1963,
      "month": "November",
      "value": 30.8
    },
    {
      "year": 1963,
      "month": "December",
      "value": 30.9
    },
    {
      "year": 1964,
      "month": "January",
      "value": 30.9
    },
    {
      "year": 1964,
      "month": "February",
      "value": 30.9
    },
    {
      "year": 1964,
      "month": "March",
      "value": 30.9
    },
    {
      "year": 1964,
      "month": "April",
      "value": 30.9
    },
    {
      "year": 1964,
      "month": "May",
      "value": 30.9
    },
    {
      "year": 1964,
      "month": "June",
      "value": 31
    },
    {
      "year": 1964,
      "month": "July",
      "value": 31.1
    },
    {
      "year": 1964,
      "month": "August",
      "value": 31
    },
    {
      "year": 1964,
      "month": "September",
      "value": 31.1
    },
    {
      "year": 1964,
      "month": "October",
      "value": 31.1
    },
    {
      "year": 1964,
      "month": "November",
      "value": 31.2
    },
    {
      "year": 1964,
      "month": "December",
      "value": 31.2
    },
    {
      "year": 1965,
      "month": "January",
      "value": 31.2
    },
    {
      "year": 1965,
      "month": "February",
      "value": 31.2
    },
    {
      "year": 1965,
      "month": "March",
      "value": 31.3
    },
    {
      "year": 1965,
      "month": "April",
      "value": 31.4
    },
    {
      "year": 1965,
      "month": "May",
      "value": 31.4
    },
    {
      "year": 1965,
      "month": "June",
      "value": 31.6
    },
    {
      "year": 1965,
      "month": "July",
      "value": 31.6
    },
    {
      "year": 1965,
      "month": "August",
      "value": 31.6
    },
    {
      "year": 1965,
      "month": "September",
      "value": 31.6
    },
    {
      "year": 1965,
      "month": "October",
      "value": 31.7
    },
    {
      "year": 1965,
      "month": "November",
      "value": 31.7
    },
    {
      "year": 1965,
      "month": "December",
      "value": 31.8
    },
    {
      "year": 1966,
      "month": "January",
      "value": 31.8
    },
    {
      "year": 1966,
      "month": "February",
      "value": 32
    },
    {
      "year": 1966,
      "month": "March",
      "value": 32.1
    },
    {
      "year": 1966,
      "month": "April",
      "value": 32.3
    },
    {
      "year": 1966,
      "month": "May",
      "value": 32.3
    },
    {
      "year": 1966,
      "month": "June",
      "value": 32.4
    },
    {
      "year": 1966,
      "month": "July",
      "value": 32.5
    },
    {
      "year": 1966,
      "month": "August",
      "value": 32.7
    },
    {
      "year": 1966,
      "month": "September",
      "value": 32.7
    },
    {
      "year": 1966,
      "month": "October",
      "value": 32.9
    },
    {
      "year": 1966,
      "month": "November",
      "value": 32.9
    },
    {
      "year": 1966,
      "month": "December",
      "value": 32.9
    },
    {
      "year": 1967,
      "month": "January",
      "value": 32.9
    },
    {
      "year": 1967,
      "month": "February",
      "value": 32.9
    },
    {
      "year": 1967,
      "month": "March",
      "value": 33
    },
    {
      "year": 1967,
      "month": "April",
      "value": 33.1
    },
    {
      "year": 1967,
      "month": "May",
      "value": 33.2
    },
    {
      "year": 1967,
      "month": "June",
      "value": 33.3
    },
    {
      "year": 1967,
      "month": "July",
      "value": 33.4
    },
    {
      "year": 1967,
      "month": "August",
      "value": 33.5
    },
    {
      "year": 1967,
      "month": "September",
      "value": 33.6
    },
    {
      "year": 1967,
      "month": "October",
      "value": 33.7
    },
    {
      "year": 1967,
      "month": "November",
      "value": 33.8
    },
    {
      "year": 1967,
      "month": "December",
      "value": 33.9
    },
    {
      "year": 1968,
      "month": "January",
      "value": 34.1
    },
    {
      "year": 1968,
      "month": "February",
      "value": 34.2
    },
    {
      "year": 1968,
      "month": "March",
      "value": 34.3
    },
    {
      "year": 1968,
      "month": "April",
      "value": 34.4
    },
    {
      "year": 1968,
      "month": "May",
      "value": 34.5
    },
    {
      "year": 1968,
      "month": "June",
      "value": 34.7
    },
    {
      "year": 1968,
      "month": "July",
      "value": 34.9
    },
    {
      "year": 1968,
      "month": "August",
      "value": 35
    },
    {
      "year": 1968,
      "month": "September",
      "value": 35.1
    },
    {
      "year": 1968,
      "month": "October",
      "value": 35.3
    },
    {
      "year": 1968,
      "month": "November",
      "value": 35.4
    },
    {
      "year": 1968,
      "month": "December",
      "value": 35.5
    },
    {
      "year": 1969,
      "month": "January",
      "value": 35.6
    },
    {
      "year": 1969,
      "month": "February",
      "value": 35.8
    },
    {
      "year": 1969,
      "month": "March",
      "value": 36.1
    },
    {
      "year": 1969,
      "month": "April",
      "value": 36.3
    },
    {
      "year": 1969,
      "month": "May",
      "value": 36.4
    },
    {
      "year": 1969,
      "month": "June",
      "value": 36.6
    },
    {
      "year": 1969,
      "month": "July",
      "value": 36.8
    },
    {
      "year": 1969,
      "month": "August",
      "value": 37
    },
    {
      "year": 1969,
      "month": "September",
      "value": 37.1
    },
    {
      "year": 1969,
      "month": "October",
      "value": 37.3
    },
    {
      "year": 1969,
      "month": "November",
      "value": 37.5
    },
    {
      "year": 1969,
      "month": "December",
      "value": 37.7
    },
    {
      "year": 1970,
      "month": "January",
      "value": 37.8
    },
    {
      "year": 1970,
      "month": "February",
      "value": 38
    },
    {
      "year": 1970,
      "month": "March",
      "value": 38.2
    },
    {
      "year": 1970,
      "month": "April",
      "value": 38.5
    },
    {
      "year": 1970,
      "month": "May",
      "value": 38.6
    },
    {
      "year": 1970,
      "month": "June",
      "value": 38.8
    },
    {
      "year": 1970,
      "month": "July",
      "value": 39
    },
    {
      "year": 1970,
      "month": "August",
      "value": 39
    },
    {
      "year": 1970,
      "month": "September",
      "value": 39.2
    },
    {
      "year": 1970,
      "month": "October",
      "value": 39.4
    },
    {
      "year": 1970,
      "month": "November",
      "value": 39.6
    },
    {
      "year": 1970,
      "month": "December",
      "value": 39.8
    },
    {
      "year": 1971,
      "month": "January",
      "value": 39.8
    },
    {
      "year": 1971,
      "month": "February",
      "value": 39.9
    },
    {
      "year": 1971,
      "month": "March",
      "value": 40
    },
    {
      "year": 1971,
      "month": "April",
      "value": 40.1
    },
    {
      "year": 1971,
      "month": "May",
      "value": 40.3
    },
    {
      "year": 1971,
      "month": "June",
      "value": 40.6
    },
    {
      "year": 1971,
      "month": "July",
      "value": 40.7
    },
    {
      "year": 1971,
      "month": "August",
      "value": 40.8
    },
    {
      "year": 1971,
      "month": "September",
      "value": 40.8
    },
    {
      "year": 1971,
      "month": "October",
      "value": 40.9
    },
    {
      "year": 1971,
      "month": "November",
      "value": 40.9
    },
    {
      "year": 1971,
      "month": "December",
      "value": 41.1
    },
    {
      "year": 1972,
      "month": "January",
      "value": 41.1
    },
    {
      "year": 1972,
      "month": "February",
      "value": 41.3
    },
    {
      "year": 1972,
      "month": "March",
      "value": 41.4
    },
    {
      "year": 1972,
      "month": "April",
      "value": 41.5
    },
    {
      "year": 1972,
      "month": "May",
      "value": 41.6
    },
    {
      "year": 1972,
      "month": "June",
      "value": 41.7
    },
    {
      "year": 1972,
      "month": "July",
      "value": 41.9
    },
    {
      "year": 1972,
      "month": "August",
      "value": 42
    },
    {
      "year": 1972,
      "month": "September",
      "value": 42.1
    },
    {
      "year": 1972,
      "month": "October",
      "value": 42.3
    },
    {
      "year": 1972,
      "month": "November",
      "value": 42.4
    },
    {
      "year": 1972,
      "month": "December",
      "value": 42.5
    },
    {
      "year": 1973,
      "month": "January",
      "value": 42.6
    },
    {
      "year": 1973,
      "month": "February",
      "value": 42.9
    },
    {
      "year": 1973,
      "month": "March",
      "value": 43.3
    },
    {
      "year": 1973,
      "month": "April",
      "value": 43.6
    },
    {
      "year": 1973,
      "month": "May",
      "value": 43.9
    },
    {
      "year": 1973,
      "month": "June",
      "value": 44.2
    },
    {
      "year": 1973,
      "month": "July",
      "value": 44.3
    },
    {
      "year": 1973,
      "month": "August",
      "value": 45.1
    },
    {
      "year": 1973,
      "month": "September",
      "value": 45.2
    },
    {
      "year": 1973,
      "month": "October",
      "value": 45.6
    },
    {
      "year": 1973,
      "month": "November",
      "value": 45.9
    },
    {
      "year": 1973,
      "month": "December",
      "value": 46.2
    },
    {
      "year": 1974,
      "month": "January",
      "value": 46.6
    },
    {
      "year": 1974,
      "month": "February",
      "value": 47.2
    },
    {
      "year": 1974,
      "month": "March",
      "value": 47.8
    },
    {
      "year": 1974,
      "month": "April",
      "value": 48
    },
    {
      "year": 1974,
      "month": "May",
      "value": 48.6
    },
    {
      "year": 1974,
      "month": "June",
      "value": 49
    },
    {
      "year": 1974,
      "month": "July",
      "value": 49.4
    },
    {
      "year": 1974,
      "month": "August",
      "value": 50
    },
    {
      "year": 1974,
      "month": "September",
      "value": 50.6
    },
    {
      "year": 1974,
      "month": "October",
      "value": 51.1
    },
    {
      "year": 1974,
      "month": "November",
      "value": 51.5
    },
    {
      "year": 1974,
      "month": "December",
      "value": 51.9
    },
    {
      "year": 1975,
      "month": "January",
      "value": 52.1
    },
    {
      "year": 1975,
      "month": "February",
      "value": 52.5
    },
    {
      "year": 1975,
      "month": "March",
      "value": 52.7
    },
    {
      "year": 1975,
      "month": "April",
      "value": 52.9
    },
    {
      "year": 1975,
      "month": "May",
      "value": 53.2
    },
    {
      "year": 1975,
      "month": "June",
      "value": 53.6
    },
    {
      "year": 1975,
      "month": "July",
      "value": 54.2
    },
    {
      "year": 1975,
      "month": "August",
      "value": 54.3
    },
    {
      "year": 1975,
      "month": "September",
      "value": 54.6
    },
    {
      "year": 1975,
      "month": "October",
      "value": 54.9
    },
    {
      "year": 1975,
      "month": "November",
      "value": 55.3
    },
    {
      "year": 1975,
      "month": "December",
      "value": 55.5
    },
    {
      "year": 1976,
      "month": "January",
      "value": 55.6
    },
    {
      "year": 1976,
      "month": "February",
      "value": 55.8
    },
    {
      "year": 1976,
      "month": "March",
      "value": 55.9
    },
    {
      "year": 1976,
      "month": "April",
      "value": 56.1
    },
    {
      "year": 1976,
      "month": "May",
      "value": 56.5
    },
    {
      "year": 1976,
      "month": "June",
      "value": 56.8
    },
    {
      "year": 1976,
      "month": "July",
      "value": 57.1
    },
    {
      "year": 1976,
      "month": "August",
      "value": 57.4
    },
    {
      "year": 1976,
      "month": "September",
      "value": 57.6
    },
    {
      "year": 1976,
      "month": "October",
      "value": 57.9
    },
    {
      "year": 1976,
      "month": "November",
      "value": 58
    },
    {
      "year": 1976,
      "month": "December",
      "value": 58.2
    },
    {
      "year": 1977,
      "month": "January",
      "value": 58.5
    },
    {
      "year": 1977,
      "month": "February",
      "value": 59.1
    },
    {
      "year": 1977,
      "month": "March",
      "value": 59.5
    },
    {
      "year": 1977,
      "month": "April",
      "value": 60
    },
    {
      "year": 1977,
      "month": "May",
      "value": 60.3
    },
    {
      "year": 1977,
      "month": "June",
      "value": 60.7
    },
    {
      "year": 1977,
      "month": "July",
      "value": 61
    },
    {
      "year": 1977,
      "month": "August",
      "value": 61.2
    },
    {
      "year": 1977,
      "month": "September",
      "value": 61.4
    },
    {
      "year": 1977,
      "month": "October",
      "value": 61.6
    },
    {
      "year": 1977,
      "month": "November",
      "value": 61.9
    },
    {
      "year": 1977,
      "month": "December",
      "value": 62.1
    },
    {
      "year": 1978,
      "month": "January",
      "value": 62.5
    },
    {
      "year": 1978,
      "month": "February",
      "value": 62.9
    },
    {
      "year": 1978,
      "month": "March",
      "value": 63.4
    },
    {
      "year": 1978,
      "month": "April",
      "value": 63.9
    },
    {
      "year": 1978,
      "month": "May",
      "value": 64.5
    },
    {
      "year": 1978,
      "month": "June",
      "value": 65.2
    },
    {
      "year": 1978,
      "month": "July",
      "value": 65.7
    },
    {
      "year": 1978,
      "month": "August",
      "value": 66
    },
    {
      "year": 1978,
      "month": "September",
      "value": 66.5
    },
    {
      "year": 1978,
      "month": "October",
      "value": 67.1
    },
    {
      "year": 1978,
      "month": "November",
      "value": 67.4
    },
    {
      "year": 1978,
      "month": "December",
      "value": 67.7
    },
    {
      "year": 1979,
      "month": "January",
      "value": 68.3
    },
    {
      "year": 1979,
      "month": "February",
      "value": 69.1
    },
    {
      "year": 1979,
      "month": "March",
      "value": 69.8
    },
    {
      "year": 1979,
      "month": "April",
      "value": 70.6
    },
    {
      "year": 1979,
      "month": "May",
      "value": 71.5
    },
    {
      "year": 1979,
      "month": "June",
      "value": 72.3
    },
    {
      "year": 1979,
      "month": "July",
      "value": 73.1
    },
    {
      "year": 1979,
      "month": "August",
      "value": 73.8
    },
    {
      "year": 1979,
      "month": "September",
      "value": 74.6
    },
    {
      "year": 1979,
      "month": "October",
      "value": 75.2
    },
    {
      "year": 1979,
      "month": "November",
      "value": 75.9
    },
    {
      "year": 1979,
      "month": "December",
      "value": 76.7
    },
    {
      "year": 1980,
      "month": "January",
      "value": 77.8
    },
    {
      "year": 1980,
      "month": "February",
      "value": 78.9
    },
    {
      "year": 1980,
      "month": "March",
      "value": 80.1
    },
    {
      "year": 1980,
      "month": "April",
      "value": 81
    },
    {
      "year": 1980,
      "month": "May",
      "value": 81.8
    },
    {
      "year": 1980,
      "month": "June",
      "value": 82.7
    },
    {
      "year": 1980,
      "month": "July",
      "value": 82.7
    },
    {
      "year": 1980,
      "month": "August",
      "value": 83.3
    },
    {
      "year": 1980,
      "month": "September",
      "value": 84
    },
    {
      "year": 1980,
      "month": "October",
      "value": 84.8
    },
    {
      "year": 1980,
      "month": "November",
      "value": 85.5
    },
    {
      "year": 1980,
      "month": "December",
      "value": 86.3
    },
    {
      "year": 1981,
      "month": "January",
      "value": 87
    },
    {
      "year": 1981,
      "month": "February",
      "value": 87.9
    },
    {
      "year": 1981,
      "month": "March",
      "value": 88.5
    },
    {
      "year": 1981,
      "month": "April",
      "value": 89.1
    },
    {
      "year": 1981,
      "month": "May",
      "value": 89.8
    },
    {
      "year": 1981,
      "month": "June",
      "value": 90.6
    },
    {
      "year": 1981,
      "month": "July",
      "value": 91.6
    },
    {
      "year": 1981,
      "month": "August",
      "value": 92.3
    },
    {
      "year": 1981,
      "month": "September",
      "value": 93.2
    },
    {
      "year": 1981,
      "month": "October",
      "value": 93.4
    },
    {
      "year": 1981,
      "month": "November",
      "value": 93.7
    },
    {
      "year": 1981,
      "month": "December",
      "value": 94
    },
    {
      "year": 1982,
      "month": "January",
      "value": 94.3
    },
    {
      "year": 1982,
      "month": "February",
      "value": 94.6
    },
    {
      "year": 1982,
      "month": "March",
      "value": 94.5
    },
    {
      "year": 1982,
      "month": "April",
      "value": 94.9
    },
    {
      "year": 1982,
      "month": "May",
      "value": 95.8
    },
    {
      "year": 1982,
      "month": "June",
      "value": 97
    },
    {
      "year": 1982,
      "month": "July",
      "value": 97.5
    },
    {
      "year": 1982,
      "month": "August",
      "value": 97.7
    },
    {
      "year": 1982,
      "month": "September",
      "value": 97.9
    },
    {
      "year": 1982,
      "month": "October",
      "value": 98.2
    },
    {
      "year": 1982,
      "month": "November",
      "value": 98
    },
    {
      "year": 1982,
      "month": "December",
      "value": 97.6
    },
    {
      "year": 1983,
      "month": "January",
      "value": 97.8
    },
    {
      "year": 1983,
      "month": "February",
      "value": 97.9
    },
    {
      "year": 1983,
      "month": "March",
      "value": 97.9
    },
    {
      "year": 1983,
      "month": "April",
      "value": 98.6
    },
    {
      "year": 1983,
      "month": "May",
      "value": 99.2
    },
    {
      "year": 1983,
      "month": "June",
      "value": 99.5
    },
    {
      "year": 1983,
      "month": "July",
      "value": 99.9
    },
    {
      "year": 1983,
      "month": "August",
      "value": 100.2
    },
    {
      "year": 1983,
      "month": "September",
      "value": 100.7
    },
    {
      "year": 1983,
      "month": "October",
      "value": 101
    },
    {
      "year": 1983,
      "month": "November",
      "value": 101.2
    },
    {
      "year": 1983,
      "month": "December",
      "value": 101.3
    },
    {
      "year": 1984,
      "month": "January",
      "value": 101.9
    },
    {
      "year": 1984,
      "month": "February",
      "value": 102.4
    },
    {
      "year": 1984,
      "month": "March",
      "value": 102.6
    },
    {
      "year": 1984,
      "month": "April",
      "value": 103.1
    },
    {
      "year": 1984,
      "month": "May",
      "value": 103.4
    },
    {
      "year": 1984,
      "month": "June",
      "value": 103.7
    },
    {
      "year": 1984,
      "month": "July",
      "value": 104.1
    },
    {
      "year": 1984,
      "month": "August",
      "value": 104.5
    },
    {
      "year": 1984,
      "month": "September",
      "value": 105
    },
    {
      "year": 1984,
      "month": "October",
      "value": 105.3
    },
    {
      "year": 1984,
      "month": "November",
      "value": 105.3
    },
    {
      "year": 1984,
      "month": "December",
      "value": 105.3
    },
    {
      "year": 1985,
      "month": "January",
      "value": 105.5
    },
    {
      "year": 1985,
      "month": "February",
      "value": 106
    },
    {
      "year": 1985,
      "month": "March",
      "value": 106.4
    },
    {
      "year": 1985,
      "month": "April",
      "value": 106.9
    },
    {
      "year": 1985,
      "month": "May",
      "value": 107.3
    },
    {
      "year": 1985,
      "month": "June",
      "value": 107.6
    },
    {
      "year": 1985,
      "month": "July",
      "value": 107.8
    },
    {
      "year": 1985,
      "month": "August",
      "value": 108
    },
    {
      "year": 1985,
      "month": "September",
      "value": 108.3
    },
    {
      "year": 1985,
      "month": "October",
      "value": 108.7
    },
    {
      "year": 1985,
      "month": "November",
      "value": 109
    },
    {
      "year": 1985,
      "month": "December",
      "value": 109.3
    },
    {
      "year": 1986,
      "month": "January",
      "value": 109.6
    },
    {
      "year": 1986,
      "month": "February",
      "value": 109.3
    },
    {
      "year": 1986,
      "month": "March",
      "value": 108.8
    },
    {
      "year": 1986,
      "month": "April",
      "value": 108.6
    },
    {
      "year": 1986,
      "month": "May",
      "value": 108.9
    },
    {
      "year": 1986,
      "month": "June",
      "value": 109.5
    },
    {
      "year": 1986,
      "month": "July",
      "value": 109.5
    },
    {
      "year": 1986,
      "month": "August",
      "value": 109.7
    },
    {
      "year": 1986,
      "month": "September",
      "value": 110.2
    },
    {
      "year": 1986,
      "month": "October",
      "value": 110.3
    },
    {
      "year": 1986,
      "month": "November",
      "value": 110.4
    },
    {
      "year": 1986,
      "month": "December",
      "value": 110.5
    },
    {
      "year": 1987,
      "month": "January",
      "value": 111.2
    },
    {
      "year": 1987,
      "month": "February",
      "value": 111.6
    },
    {
      "year": 1987,
      "month": "March",
      "value": 112.1
    },
    {
      "year": 1987,
      "month": "April",
      "value": 112.7
    },
    {
      "year": 1987,
      "month": "May",
      "value": 113.1
    },
    {
      "year": 1987,
      "month": "June",
      "value": 113.5
    },
    {
      "year": 1987,
      "month": "July",
      "value": 113.8
    },
    {
      "year": 1987,
      "month": "August",
      "value": 114.4
    },
    {
      "year": 1987,
      "month": "September",
      "value": 115
    },
    {
      "year": 1987,
      "month": "October",
      "value": 115.3
    },
    {
      "year": 1987,
      "month": "November",
      "value": 115.4
    },
    {
      "year": 1987,
      "month": "December",
      "value": 115.4
    },
    {
      "year": 1988,
      "month": "January",
      "value": 115.7
    },
    {
      "year": 1988,
      "month": "February",
      "value": 116
    },
    {
      "year": 1988,
      "month": "March",
      "value": 116.5
    },
    {
      "year": 1988,
      "month": "April",
      "value": 117.1
    },
    {
      "year": 1988,
      "month": "May",
      "value": 117.5
    },
    {
      "year": 1988,
      "month": "June",
      "value": 118
    },
    {
      "year": 1988,
      "month": "July",
      "value": 118.5
    },
    {
      "year": 1988,
      "month": "August",
      "value": 119
    },
    {
      "year": 1988,
      "month": "September",
      "value": 119.8
    },
    {
      "year": 1988,
      "month": "October",
      "value": 120.2
    },
    {
      "year": 1988,
      "month": "November",
      "value": 120.3
    },
    {
      "year": 1988,
      "month": "December",
      "value": 120.5
    },
    {
      "year": 1989,
      "month": "January",
      "value": 121.1
    },
    {
      "year": 1989,
      "month": "February",
      "value": 121.6
    },
    {
      "year": 1989,
      "month": "March",
      "value": 122.3
    },
    {
      "year": 1989,
      "month": "April",
      "value": 123.1
    },
    {
      "year": 1989,
      "month": "May",
      "value": 123.8
    },
    {
      "year": 1989,
      "month": "June",
      "value": 124.1
    },
    {
      "year": 1989,
      "month": "July",
      "value": 124.4
    },
    {
      "year": 1989,
      "month": "August",
      "value": 124.6
    },
    {
      "year": 1989,
      "month": "September",
      "value": 125
    },
    {
      "year": 1989,
      "month": "October",
      "value": 125.6
    },
    {
      "year": 1989,
      "month": "November",
      "value": 125.9
    },
    {
      "year": 1989,
      "month": "December",
      "value": 126.1
    },
    {
      "year": 1990,
      "month": "January",
      "value": 127.4
    },
    {
      "year": 1990,
      "month": "February",
      "value": 128
    },
    {
      "year": 1990,
      "month": "March",
      "value": 128.7
    },
    {
      "year": 1990,
      "month": "April",
      "value": 128.9
    },
    {
      "year": 1990,
      "month": "May",
      "value": 129.2
    },
    {
      "year": 1990,
      "month": "June",
      "value": 129.9
    },
    {
      "year": 1990,
      "month": "July",
      "value": 130.4
    },
    {
      "year": 1990,
      "month": "August",
      "value": 131.6
    },
    {
      "year": 1990,
      "month": "September",
      "value": 132.7
    },
    {
      "year": 1990,
      "month": "October",
      "value": 133.5
    },
    {
      "year": 1990,
      "month": "November",
      "value": 133.8
    },
    {
      "year": 1990,
      "month": "December",
      "value": 133.8
    },
    {
      "year": 1991,
      "month": "January",
      "value": 134.6
    },
    {
      "year": 1991,
      "month": "February",
      "value": 134.8
    },
    {
      "year": 1991,
      "month": "March",
      "value": 135
    },
    {
      "year": 1991,
      "month": "April",
      "value": 135.2
    },
    {
      "year": 1991,
      "month": "May",
      "value": 135.6
    },
    {
      "year": 1991,
      "month": "June",
      "value": 136
    },
    {
      "year": 1991,
      "month": "July",
      "value": 136.2
    },
    {
      "year": 1991,
      "month": "August",
      "value": 136.6
    },
    {
      "year": 1991,
      "month": "September",
      "value": 137.2
    },
    {
      "year": 1991,
      "month": "October",
      "value": 137.4
    },
    {
      "year": 1991,
      "month": "November",
      "value": 137.8
    },
    {
      "year": 1991,
      "month": "December",
      "value": 137.9
    },
    {
      "year": 1992,
      "month": "January",
      "value": 138.1
    },
    {
      "year": 1992,
      "month": "February",
      "value": 138.6
    },
    {
      "year": 1992,
      "month": "March",
      "value": 139.3
    },
    {
      "year": 1992,
      "month": "April",
      "value": 139.5
    },
    {
      "year": 1992,
      "month": "May",
      "value": 139.7
    },
    {
      "year": 1992,
      "month": "June",
      "value": 140.2
    },
    {
      "year": 1992,
      "month": "July",
      "value": 140.5
    },
    {
      "year": 1992,
      "month": "August",
      "value": 140.9
    },
    {
      "year": 1992,
      "month": "September",
      "value": 141.3
    },
    {
      "year": 1992,
      "month": "October",
      "value": 141.8
    },
    {
      "year": 1992,
      "month": "November",
      "value": 142
    },
    {
      "year": 1992,
      "month": "December",
      "value": 141.9
    },
    {
      "year": 1993,
      "month": "January",
      "value": 142.6
    },
    {
      "year": 1993,
      "month": "February",
      "value": 143.1
    },
    {
      "year": 1993,
      "month": "March",
      "value": 143.6
    },
    {
      "year": 1993,
      "month": "April",
      "value": 144
    },
    {
      "year": 1993,
      "month": "May",
      "value": 144.2
    },
    {
      "year": 1993,
      "month": "June",
      "value": 144.4
    },
    {
      "year": 1993,
      "month": "July",
      "value": 144.4
    },
    {
      "year": 1993,
      "month": "August",
      "value": 144.8
    },
    {
      "year": 1993,
      "month": "September",
      "value": 145.1
    },
    {
      "year": 1993,
      "month": "October",
      "value": 145.7
    },
    {
      "year": 1993,
      "month": "November",
      "value": 145.8
    },
    {
      "year": 1993,
      "month": "December",
      "value": 145.8
    },
    {
      "year": 1994,
      "month": "January",
      "value": 146.2
    },
    {
      "year": 1994,
      "month": "February",
      "value": 146.7
    },
    {
      "year": 1994,
      "month": "March",
      "value": 147.2
    },
    {
      "year": 1994,
      "month": "April",
      "value": 147.4
    },
    {
      "year": 1994,
      "month": "May",
      "value": 147.5
    },
    {
      "year": 1994,
      "month": "June",
      "value": 148
    },
    {
      "year": 1994,
      "month": "July",
      "value": 148.4
    },
    {
      "year": 1994,
      "month": "August",
      "value": 149
    },
    {
      "year": 1994,
      "month": "September",
      "value": 149.4
    },
    {
      "year": 1994,
      "month": "October",
      "value": 149.5
    },
    {
      "year": 1994,
      "month": "November",
      "value": 149.7
    },
    {
      "year": 1994,
      "month": "December",
      "value": 149.7
    },
    {
      "year": 1995,
      "month": "January",
      "value": 150.3
    },
    {
      "year": 1995,
      "month": "February",
      "value": 150.9
    },
    {
      "year": 1995,
      "month": "March",
      "value": 151.4
    },
    {
      "year": 1995,
      "month": "April",
      "value": 151.9
    },
    {
      "year": 1995,
      "month": "May",
      "value": 152.2
    },
    {
      "year": 1995,
      "month": "June",
      "value": 152.5
    },
    {
      "year": 1995,
      "month": "July",
      "value": 152.5
    },
    {
      "year": 1995,
      "month": "August",
      "value": 152.9
    },
    {
      "year": 1995,
      "month": "September",
      "value": 153.2
    },
    {
      "year": 1995,
      "month": "October",
      "value": 153.7
    },
    {
      "year": 1995,
      "month": "November",
      "value": 153.6
    },
    {
      "year": 1995,
      "month": "December",
      "value": 153.5
    },
    {
      "year": 1996,
      "month": "January",
      "value": 154.4
    },
    {
      "year": 1996,
      "month": "February",
      "value": 154.9
    },
    {
      "year": 1996,
      "month": "March",
      "value": 155.7
    },
    {
      "year": 1996,
      "month": "April",
      "value": 156.3
    },
    {
      "year": 1996,
      "month": "May",
      "value": 156.6
    },
    {
      "year": 1996,
      "month": "June",
      "value": 156.7
    },
    {
      "year": 1996,
      "month": "July",
      "value": 157
    },
    {
      "year": 1996,
      "month": "August",
      "value": 157.3
    },
    {
      "year": 1996,
      "month": "September",
      "value": 157.8
    },
    {
      "year": 1996,
      "month": "October",
      "value": 158.3
    },
    {
      "year": 1996,
      "month": "November",
      "value": 158.6
    },
    {
      "year": 1996,
      "month": "December",
      "value": 158.6
    },
    {
      "year": 1997,
      "month": "January",
      "value": 159.1
    },
    {
      "year": 1997,
      "month": "February",
      "value": 159.6
    },
    {
      "year": 1997,
      "month": "March",
      "value": 160
    },
    {
      "year": 1997,
      "month": "April",
      "value": 160.2
    },
    {
      "year": 1997,
      "month": "May",
      "value": 160.1
    },
    {
      "year": 1997,
      "month": "June",
      "value": 160.3
    },
    {
      "year": 1997,
      "month": "July",
      "value": 160.5
    },
    {
      "year": 1997,
      "month": "August",
      "value": 160.8
    },
    {
      "year": 1997,
      "month": "September",
      "value": 161.2
    },
    {
      "year": 1997,
      "month": "October",
      "value": 161.6
    },
    {
      "year": 1997,
      "month": "November",
      "value": 161.5
    },
    {
      "year": 1997,
      "month": "December",
      "value": 161.3
    },
    {
      "year": 1998,
      "month": "January",
      "value": 161.6
    },
    {
      "year": 1998,
      "month": "February",
      "value": 161.9
    },
    {
      "year": 1998,
      "month": "March",
      "value": 162.2
    },
    {
      "year": 1998,
      "month": "April",
      "value": 162.5
    },
    {
      "year": 1998,
      "month": "May",
      "value": 162.8
    },
    {
      "year": 1998,
      "month": "June",
      "value": 163
    },
    {
      "year": 1998,
      "month": "July",
      "value": 163.2
    },
    {
      "year": 1998,
      "month": "August",
      "value": 163.4
    },
    {
      "year": 1998,
      "month": "September",
      "value": 163.6
    },
    {
      "year": 1998,
      "month": "October",
      "value": 164
    },
    {
      "year": 1998,
      "month": "November",
      "value": 164
    },
    {
      "year": 1998,
      "month": "December",
      "value": 163.9
    },
    {
      "year": 1999,
      "month": "January",
      "value": 164.3
    },
    {
      "year": 1999,
      "month": "February",
      "value": 164.5
    },
    {
      "year": 1999,
      "month": "March",
      "value": 165
    },
    {
      "year": 1999,
      "month": "April",
      "value": 166.2
    },
    {
      "year": 1999,
      "month": "May",
      "value": 166.2
    },
    {
      "year": 1999,
      "month": "June",
      "value": 166.2
    },
    {
      "year": 1999,
      "month": "July",
      "value": 166.7
    },
    {
      "year": 1999,
      "month": "August",
      "value": 167.1
    },
    {
      "year": 1999,
      "month": "September",
      "value": 167.9
    },
    {
      "year": 1999,
      "month": "October",
      "value": 168.2
    },
    {
      "year": 1999,
      "month": "November",
      "value": 168.3
    },
    {
      "year": 1999,
      "month": "December",
      "value": 168.3
    },
    {
      "year": 2e3,
      "month": "January",
      "value": 168.8
    },
    {
      "year": 2e3,
      "month": "February",
      "value": 169.8
    },
    {
      "year": 2e3,
      "month": "March",
      "value": 171.2
    },
    {
      "year": 2e3,
      "month": "April",
      "value": 171.3
    },
    {
      "year": 2e3,
      "month": "May",
      "value": 171.5
    },
    {
      "year": 2e3,
      "month": "June",
      "value": 172.4
    },
    {
      "year": 2e3,
      "month": "July",
      "value": 172.8
    },
    {
      "year": 2e3,
      "month": "August",
      "value": 172.8
    },
    {
      "year": 2e3,
      "month": "September",
      "value": 173.7
    },
    {
      "year": 2e3,
      "month": "October",
      "value": 174
    },
    {
      "year": 2e3,
      "month": "November",
      "value": 174.1
    },
    {
      "year": 2e3,
      "month": "December",
      "value": 174
    },
    {
      "year": 2001,
      "month": "January",
      "value": 175.1
    },
    {
      "year": 2001,
      "month": "February",
      "value": 175.8
    },
    {
      "year": 2001,
      "month": "March",
      "value": 176.2
    },
    {
      "year": 2001,
      "month": "April",
      "value": 176.9
    },
    {
      "year": 2001,
      "month": "May",
      "value": 177.7
    },
    {
      "year": 2001,
      "month": "June",
      "value": 178
    },
    {
      "year": 2001,
      "month": "July",
      "value": 177.5
    },
    {
      "year": 2001,
      "month": "August",
      "value": 177.5
    },
    {
      "year": 2001,
      "month": "September",
      "value": 178.3
    },
    {
      "year": 2001,
      "month": "October",
      "value": 177.7
    },
    {
      "year": 2001,
      "month": "November",
      "value": 177.4
    },
    {
      "year": 2001,
      "month": "December",
      "value": 176.7
    },
    {
      "year": 2002,
      "month": "January",
      "value": 177.1
    },
    {
      "year": 2002,
      "month": "February",
      "value": 177.8
    },
    {
      "year": 2002,
      "month": "March",
      "value": 178.8
    },
    {
      "year": 2002,
      "month": "April",
      "value": 179.8
    },
    {
      "year": 2002,
      "month": "May",
      "value": 179.8
    },
    {
      "year": 2002,
      "month": "June",
      "value": 179.9
    },
    {
      "year": 2002,
      "month": "July",
      "value": 180.1
    },
    {
      "year": 2002,
      "month": "August",
      "value": 180.7
    },
    {
      "year": 2002,
      "month": "September",
      "value": 181
    },
    {
      "year": 2002,
      "month": "October",
      "value": 181.3
    },
    {
      "year": 2002,
      "month": "November",
      "value": 181.3
    },
    {
      "year": 2002,
      "month": "December",
      "value": 180.9
    },
    {
      "year": 2003,
      "month": "January",
      "value": 181.7
    },
    {
      "year": 2003,
      "month": "February",
      "value": 183.1
    },
    {
      "year": 2003,
      "month": "March",
      "value": 184.2
    },
    {
      "year": 2003,
      "month": "April",
      "value": 183.8
    },
    {
      "year": 2003,
      "month": "May",
      "value": 183.5
    },
    {
      "year": 2003,
      "month": "June",
      "value": 183.7
    },
    {
      "year": 2003,
      "month": "July",
      "value": 183.9
    },
    {
      "year": 2003,
      "month": "August",
      "value": 184.6
    },
    {
      "year": 2003,
      "month": "September",
      "value": 185.2
    },
    {
      "year": 2003,
      "month": "October",
      "value": 185
    },
    {
      "year": 2003,
      "month": "November",
      "value": 184.5
    },
    {
      "year": 2003,
      "month": "December",
      "value": 184.3
    },
    {
      "year": 2004,
      "month": "January",
      "value": 185.2
    },
    {
      "year": 2004,
      "month": "February",
      "value": 186.2
    },
    {
      "year": 2004,
      "month": "March",
      "value": 187.4
    },
    {
      "year": 2004,
      "month": "April",
      "value": 188
    },
    {
      "year": 2004,
      "month": "May",
      "value": 189.1
    },
    {
      "year": 2004,
      "month": "June",
      "value": 189.7
    },
    {
      "year": 2004,
      "month": "July",
      "value": 189.4
    },
    {
      "year": 2004,
      "month": "August",
      "value": 189.5
    },
    {
      "year": 2004,
      "month": "September",
      "value": 189.9
    },
    {
      "year": 2004,
      "month": "October",
      "value": 190.9
    },
    {
      "year": 2004,
      "month": "November",
      "value": 191
    },
    {
      "year": 2004,
      "month": "December",
      "value": 190.3
    },
    {
      "year": 2005,
      "month": "January",
      "value": 190.7
    },
    {
      "year": 2005,
      "month": "February",
      "value": 191.8
    },
    {
      "year": 2005,
      "month": "March",
      "value": 193.3
    },
    {
      "year": 2005,
      "month": "April",
      "value": 194.6
    },
    {
      "year": 2005,
      "month": "May",
      "value": 194.4
    },
    {
      "year": 2005,
      "month": "June",
      "value": 194.5
    },
    {
      "year": 2005,
      "month": "July",
      "value": 195.4
    },
    {
      "year": 2005,
      "month": "August",
      "value": 196.4
    },
    {
      "year": 2005,
      "month": "September",
      "value": 198.8
    },
    {
      "year": 2005,
      "month": "October",
      "value": 199.2
    },
    {
      "year": 2005,
      "month": "November",
      "value": 197.6
    },
    {
      "year": 2005,
      "month": "December",
      "value": 196.8
    },
    {
      "year": 2006,
      "month": "January",
      "value": 198.3
    },
    {
      "year": 2006,
      "month": "February",
      "value": 198.7
    },
    {
      "year": 2006,
      "month": "March",
      "value": 199.8
    },
    {
      "year": 2006,
      "month": "April",
      "value": 201.5
    },
    {
      "year": 2006,
      "month": "May",
      "value": 202.5
    },
    {
      "year": 2006,
      "month": "June",
      "value": 202.9
    },
    {
      "year": 2006,
      "month": "July",
      "value": 203.5
    },
    {
      "year": 2006,
      "month": "August",
      "value": 203.9
    },
    {
      "year": 2006,
      "month": "September",
      "value": 202.9
    },
    {
      "year": 2006,
      "month": "October",
      "value": 201.8
    },
    {
      "year": 2006,
      "month": "November",
      "value": 201.5
    },
    {
      "year": 2006,
      "month": "December",
      "value": 201.8
    },
    {
      "year": 2007,
      "month": "January",
      "value": 202.416
    },
    {
      "year": 2007,
      "month": "February",
      "value": 203.499
    },
    {
      "year": 2007,
      "month": "March",
      "value": 205.352
    },
    {
      "year": 2007,
      "month": "April",
      "value": 206.686
    },
    {
      "year": 2007,
      "month": "May",
      "value": 207.949
    },
    {
      "year": 2007,
      "month": "June",
      "value": 208.352
    },
    {
      "year": 2007,
      "month": "July",
      "value": 208.299
    },
    {
      "year": 2007,
      "month": "August",
      "value": 207.917
    },
    {
      "year": 2007,
      "month": "September",
      "value": 208.49
    },
    {
      "year": 2007,
      "month": "October",
      "value": 208.936
    },
    {
      "year": 2007,
      "month": "November",
      "value": 210.177
    },
    {
      "year": 2007,
      "month": "December",
      "value": 210.036
    },
    {
      "year": 2008,
      "month": "January",
      "value": 211.08
    },
    {
      "year": 2008,
      "month": "February",
      "value": 211.693
    },
    {
      "year": 2008,
      "month": "March",
      "value": 213.528
    },
    {
      "year": 2008,
      "month": "April",
      "value": 214.823
    },
    {
      "year": 2008,
      "month": "May",
      "value": 216.632
    },
    {
      "year": 2008,
      "month": "June",
      "value": 218.815
    },
    {
      "year": 2008,
      "month": "July",
      "value": 219.964
    },
    {
      "year": 2008,
      "month": "August",
      "value": 219.086
    },
    {
      "year": 2008,
      "month": "September",
      "value": 218.783
    },
    {
      "year": 2008,
      "month": "October",
      "value": 216.573
    },
    {
      "year": 2008,
      "month": "November",
      "value": 212.425
    },
    {
      "year": 2008,
      "month": "December",
      "value": 210.228
    },
    {
      "year": 2009,
      "month": "January",
      "value": 211.143
    },
    {
      "year": 2009,
      "month": "February",
      "value": 212.193
    },
    {
      "year": 2009,
      "month": "March",
      "value": 212.709
    },
    {
      "year": 2009,
      "month": "April",
      "value": 213.24
    },
    {
      "year": 2009,
      "month": "May",
      "value": 213.856
    },
    {
      "year": 2009,
      "month": "June",
      "value": 215.693
    },
    {
      "year": 2009,
      "month": "July",
      "value": 215.351
    },
    {
      "year": 2009,
      "month": "August",
      "value": 215.834
    },
    {
      "year": 2009,
      "month": "September",
      "value": 215.969
    },
    {
      "year": 2009,
      "month": "October",
      "value": 216.177
    },
    {
      "year": 2009,
      "month": "November",
      "value": 216.33
    },
    {
      "year": 2009,
      "month": "December",
      "value": 215.949
    },
    {
      "year": 2010,
      "month": "January",
      "value": 216.687
    },
    {
      "year": 2010,
      "month": "February",
      "value": 216.741
    },
    {
      "year": 2010,
      "month": "March",
      "value": 217.631
    },
    {
      "year": 2010,
      "month": "April",
      "value": 218.009
    },
    {
      "year": 2010,
      "month": "May",
      "value": 218.178
    },
    {
      "year": 2010,
      "month": "June",
      "value": 217.965
    },
    {
      "year": 2010,
      "month": "July",
      "value": 218.011
    },
    {
      "year": 2010,
      "month": "August",
      "value": 218.312
    },
    {
      "year": 2010,
      "month": "September",
      "value": 218.439
    },
    {
      "year": 2010,
      "month": "October",
      "value": 218.711
    },
    {
      "year": 2010,
      "month": "November",
      "value": 218.803
    },
    {
      "year": 2010,
      "month": "December",
      "value": 219.179
    },
    {
      "year": 2011,
      "month": "January",
      "value": 220.223
    },
    {
      "year": 2011,
      "month": "February",
      "value": 221.309
    },
    {
      "year": 2011,
      "month": "March",
      "value": 223.467
    },
    {
      "year": 2011,
      "month": "April",
      "value": 224.906
    },
    {
      "year": 2011,
      "month": "May",
      "value": 225.964
    },
    {
      "year": 2011,
      "month": "June",
      "value": 225.722
    },
    {
      "year": 2011,
      "month": "July",
      "value": 225.922
    },
    {
      "year": 2011,
      "month": "August",
      "value": 226.545
    },
    {
      "year": 2011,
      "month": "September",
      "value": 226.889
    },
    {
      "year": 2011,
      "month": "October",
      "value": 226.421
    },
    {
      "year": 2011,
      "month": "November",
      "value": 226.23
    },
    {
      "year": 2011,
      "month": "December",
      "value": 225.672
    },
    {
      "year": 2012,
      "month": "January",
      "value": 226.665
    },
    {
      "year": 2012,
      "month": "February",
      "value": 227.663
    },
    {
      "year": 2012,
      "month": "March",
      "value": 229.392
    },
    {
      "year": 2012,
      "month": "April",
      "value": 230.085
    },
    {
      "year": 2012,
      "month": "May",
      "value": 229.815
    },
    {
      "year": 2012,
      "month": "June",
      "value": 229.478
    },
    {
      "year": 2012,
      "month": "July",
      "value": 229.104
    },
    {
      "year": 2012,
      "month": "August",
      "value": 230.379
    },
    {
      "year": 2012,
      "month": "September",
      "value": 231.407
    },
    {
      "year": 2012,
      "month": "October",
      "value": 231.317
    },
    {
      "year": 2012,
      "month": "November",
      "value": 230.221
    },
    {
      "year": 2012,
      "month": "December",
      "value": 229.601
    },
    {
      "year": 2013,
      "month": "January",
      "value": 230.28
    },
    {
      "year": 2013,
      "month": "February",
      "value": 232.166
    },
    {
      "year": 2013,
      "month": "March",
      "value": 232.773
    },
    {
      "year": 2013,
      "month": "April",
      "value": 232.531
    },
    {
      "year": 2013,
      "month": "May",
      "value": 232.945
    },
    {
      "year": 2013,
      "month": "June",
      "value": 233.504
    },
    {
      "year": 2013,
      "month": "July",
      "value": 233.596
    },
    {
      "year": 2013,
      "month": "August",
      "value": 233.877
    },
    {
      "year": 2013,
      "month": "September",
      "value": 234.149
    },
    {
      "year": 2013,
      "month": "October",
      "value": 233.546
    },
    {
      "year": 2013,
      "month": "November",
      "value": 233.069
    },
    {
      "year": 2013,
      "month": "December",
      "value": 233.049
    },
    {
      "year": 2014,
      "month": "January",
      "value": 233.916
    },
    {
      "year": 2014,
      "month": "February",
      "value": 234.781
    },
    {
      "year": 2014,
      "month": "March",
      "value": 236.293
    },
    {
      "year": 2014,
      "month": "April",
      "value": 237.072
    },
    {
      "year": 2014,
      "month": "May",
      "value": 237.9
    },
    {
      "year": 2014,
      "month": "June",
      "value": 238.343
    },
    {
      "year": 2014,
      "month": "July",
      "value": 238.25
    },
    {
      "year": 2014,
      "month": "August",
      "value": 237.852
    },
    {
      "year": 2014,
      "month": "September",
      "value": 238.031
    },
    {
      "year": 2014,
      "month": "October",
      "value": 237.433
    },
    {
      "year": 2014,
      "month": "November",
      "value": 236.151
    },
    {
      "year": 2014,
      "month": "December",
      "value": 234.812
    },
    {
      "year": 2015,
      "month": "January",
      "value": 233.707
    },
    {
      "year": 2015,
      "month": "February",
      "value": 234.722
    },
    {
      "year": 2015,
      "month": "March",
      "value": 236.119
    },
    {
      "year": 2015,
      "month": "April",
      "value": 236.599
    },
    {
      "year": 2015,
      "month": "May",
      "value": 237.805
    },
    {
      "year": 2015,
      "month": "June",
      "value": 238.638
    },
    {
      "year": 2015,
      "month": "July",
      "value": 238.654
    },
    {
      "year": 2015,
      "month": "August",
      "value": 238.316
    },
    {
      "year": 2015,
      "month": "September",
      "value": 237.945
    },
    {
      "year": 2015,
      "month": "October",
      "value": 237.838
    },
    {
      "year": 2015,
      "month": "November",
      "value": 237.336
    },
    {
      "year": 2015,
      "month": "December",
      "value": 236.525
    },
    {
      "year": 2016,
      "month": "January",
      "value": 236.916
    },
    {
      "year": 2016,
      "month": "February",
      "value": 237.111
    },
    {
      "year": 2016,
      "month": "March",
      "value": 238.132
    },
    {
      "year": 2016,
      "month": "April",
      "value": 239.261
    },
    {
      "year": 2016,
      "month": "May",
      "value": 240.229
    },
    {
      "year": 2016,
      "month": "June",
      "value": 241.018
    },
    {
      "year": 2016,
      "month": "July",
      "value": 240.628
    },
    {
      "year": 2016,
      "month": "August",
      "value": 240.849
    },
    {
      "year": 2016,
      "month": "September",
      "value": 241.428
    },
    {
      "year": 2016,
      "month": "October",
      "value": 241.729
    },
    {
      "year": 2016,
      "month": "November",
      "value": 241.353
    },
    {
      "year": 2016,
      "month": "December",
      "value": 241.432
    },
    {
      "year": 2017,
      "month": "January",
      "value": 242.839
    },
    {
      "year": 2017,
      "month": "February",
      "value": 243.603
    },
    {
      "year": 2017,
      "month": "March",
      "value": 243.801
    },
    {
      "year": 2017,
      "month": "April",
      "value": 244.524
    },
    {
      "year": 2017,
      "month": "May",
      "value": 244.733
    },
    {
      "year": 2017,
      "month": "June",
      "value": 244.955
    },
    {
      "year": 2017,
      "month": "July",
      "value": 244.786
    },
    {
      "year": 2017,
      "month": "August",
      "value": 245.519
    },
    {
      "year": 2017,
      "month": "September",
      "value": 246.819
    },
    {
      "year": 2017,
      "month": "October",
      "value": 246.663
    },
    {
      "year": 2017,
      "month": "November",
      "value": 246.669
    },
    {
      "year": 2017,
      "month": "December",
      "value": 246.524
    },
    {
      "year": 2018,
      "month": "January",
      "value": 247.867
    },
    {
      "year": 2018,
      "month": "February",
      "value": 248.991
    },
    {
      "year": 2018,
      "month": "March",
      "value": 249.554
    },
    {
      "year": 2018,
      "month": "April",
      "value": 250.546
    },
    {
      "year": 2018,
      "month": "May",
      "value": 251.588
    },
    {
      "year": 2018,
      "month": "June",
      "value": 251.989
    },
    {
      "year": 2018,
      "month": "July",
      "value": 252.006
    },
    {
      "year": 2018,
      "month": "August",
      "value": 252.146
    },
    {
      "year": 2018,
      "month": "September",
      "value": 252.439
    },
    {
      "year": 2018,
      "month": "October",
      "value": 252.885
    },
    {
      "year": 2018,
      "month": "November",
      "value": 252.038
    },
    {
      "year": 2018,
      "month": "December",
      "value": 251.233
    },
    {
      "year": 2019,
      "month": "January",
      "value": 251.712
    },
    {
      "year": 2019,
      "month": "February",
      "value": 252.776
    },
    {
      "year": 2019,
      "month": "March",
      "value": 254.202
    },
    {
      "year": 2019,
      "month": "April",
      "value": 255.548
    },
    {
      "year": 2019,
      "month": "May",
      "value": 256.092
    },
    {
      "year": 2019,
      "month": "June",
      "value": 256.143
    },
    {
      "year": 2019,
      "month": "July",
      "value": 256.571
    },
    {
      "year": 2019,
      "month": "August",
      "value": 256.558
    },
    {
      "year": 2019,
      "month": "September",
      "value": 256.759
    },
    {
      "year": 2019,
      "month": "October",
      "value": 257.346
    },
    {
      "year": 2019,
      "month": "November",
      "value": 257.208
    },
    {
      "year": 2019,
      "month": "December",
      "value": 256.974
    },
    {
      "year": 2020,
      "month": "January",
      "value": 257.971
    },
    {
      "year": 2020,
      "month": "February",
      "value": 258.678
    },
    {
      "year": 2020,
      "month": "March",
      "value": 258.115
    },
    {
      "year": 2020,
      "month": "April",
      "value": 256.389
    },
    {
      "year": 2020,
      "month": "May",
      "value": 256.394
    },
    {
      "year": 2020,
      "month": "June",
      "value": 257.797
    },
    {
      "year": 2020,
      "month": "July",
      "value": 259.101
    },
    {
      "year": 2020,
      "month": "August",
      "value": 259.918
    },
    {
      "year": 2020,
      "month": "September",
      "value": 260.28
    },
    {
      "year": 2020,
      "month": "October",
      "value": 260.388
    },
    {
      "year": 2020,
      "month": "November",
      "value": 260.229
    },
    {
      "year": 2020,
      "month": "December",
      "value": 260.474
    },
    {
      "year": 2021,
      "month": "January",
      "value": 261.582
    },
    {
      "year": 2021,
      "month": "February",
      "value": 263.014
    },
    {
      "year": 2021,
      "month": "March",
      "value": 264.877
    },
    {
      "year": 2021,
      "month": "April",
      "value": 267.054
    },
    {
      "year": 2021,
      "month": "May",
      "value": 269.195
    },
    {
      "year": 2021,
      "month": "June",
      "value": 271.696
    },
    {
      "year": 2021,
      "month": "July",
      "value": 273.003
    },
    {
      "year": 2021,
      "month": "August",
      "value": 273.567
    },
    {
      "year": 2021,
      "month": "September",
      "value": 274.31
    },
    {
      "year": 2021,
      "month": "October",
      "value": 276.589
    },
    {
      "year": 2021,
      "month": "November",
      "value": 277.948
    },
    {
      "year": 2021,
      "month": "December",
      "value": 278.802
    },
    {
      "year": 2022,
      "month": "January",
      "value": 281.148
    },
    {
      "year": 2022,
      "month": "February",
      "value": 283.716
    },
    {
      "year": 2022,
      "month": "March",
      "value": 287.504
    },
    {
      "year": 2022,
      "month": "April",
      "value": 289.109
    },
    {
      "year": 2022,
      "month": "May",
      "value": 292.296
    },
    {
      "year": 2022,
      "month": "June",
      "value": 296.311
    },
    {
      "year": 2022,
      "month": "July",
      "value": 296.276
    },
    {
      "year": 2022,
      "month": "August",
      "value": 296.171
    },
    {
      "year": 2022,
      "month": "September",
      "value": 296.808
    },
    {
      "year": 2022,
      "month": "October",
      "value": 298.012
    }
  ];

  // output/TimelineChart/foreign.js
  var import_react16 = __toESM(require_react(), 1);
  var __assign3 = function() {
    __assign3 = Object.assign || function(t) {
      for (var s3, i2 = 1, n = arguments.length; i2 < n; i2++) {
        s3 = arguments[i2];
        for (var p2 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p2))
            t[p2] = s3[p2];
      }
      return t;
    };
    return __assign3.apply(this, arguments);
  };
  function _timelineChart(props) {
    var ref = import_react16.default.useRef();
    import_react16.default.useEffect(function() {
      var chart = plot({
        width: props.width,
        style: {
          background: "transparent"
        },
        y: {
          domain: [-0.02, 0.02],
          axis: null
        },
        height: 160,
        marginTop: 40,
        marginBottom: 40,
        marginLeft: 0,
        marginRight: 0,
        marks: [
          areaY(props.data.map(function(d) {
            return __assign3(__assign3({}, d), { x: timeParse("%B, %Y")("".concat(d.month, ", ").concat(d.year)) });
          }), windowY({
            x: function(d) {
              return d.x;
            },
            y: function(d) {
              return d.value;
            },
            fill: "tomato",
            opacity: 0.2,
            k: 12
          })),
          lineY(props.data.map(function(d) {
            return __assign3(__assign3({}, d), { x: timeParse("%B, %Y")("".concat(d.month, ", ").concat(d.year)) });
          }), windowY({
            x: function(d) {
              return d.x;
            },
            y: function(d) {
              return d.value;
            },
            strokeWidth: 1,
            k: 12
          }))
        ]
      });
      ref.current.append(chart);
      return function() {
        return chart.remove();
      };
    }, [props]);
    return import_react16.default.createElement("div", { ref });
  }

  // output/TimelineChart/index.js
  var make4 = /* @__PURE__ */ pure(applicativeEffect)(/* @__PURE__ */ element(_timelineChart));

  // output/App/index.js
  var show2 = /* @__PURE__ */ show(showInt);
  var map12 = /* @__PURE__ */ map(functorMaybe);
  var show1 = /* @__PURE__ */ show(showMonth);
  var fromEnum7 = /* @__PURE__ */ fromEnum(boundedEnumYear);
  var fromFoldable4 = /* @__PURE__ */ fromFoldable(foldableSet);
  var bind13 = /* @__PURE__ */ bind2(ixBindRender);
  var discard5 = /* @__PURE__ */ discard2(ixBindRender);
  var bind23 = /* @__PURE__ */ bind(bindMaybe);
  var ordTuple2 = /* @__PURE__ */ ordTuple(ordYear)(ordMonth);
  var lookup2 = /* @__PURE__ */ lookup(ordTuple2);
  var pure7 = /* @__PURE__ */ pure(applicativeMaybe);
  var for_3 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var mempty3 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidUnit));
  var pure22 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var mapFlipped3 = /* @__PURE__ */ mapFlipped(functorArray);
  var bottom5 = /* @__PURE__ */ bottom(boundedDay);
  var eq4 = /* @__PURE__ */ eq(/* @__PURE__ */ eqTuple(eqYear)(eqMonth));
  var section3 = /* @__PURE__ */ section();
  var div1 = /* @__PURE__ */ div2();
  var guard3 = /* @__PURE__ */ guard(monoidString);
  var input2 = /* @__PURE__ */ input();
  var traverse_2 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableMaybe);
  var bind32 = /* @__PURE__ */ bind(bindEither);
  var toEnum3 = /* @__PURE__ */ toEnum(boundedEnumYear);
  var pure32 = /* @__PURE__ */ pure(applicativeEither);
  var fromFoldable1 = /* @__PURE__ */ fromFoldable2(ordTuple2)(foldableArray);
  var BadYear = /* @__PURE__ */ function() {
    function BadYear2(value0) {
      this.value0 = value0;
    }
    ;
    BadYear2.create = function(value0) {
      return new BadYear2(value0);
    };
    return BadYear2;
  }();
  var BadMonth = /* @__PURE__ */ function() {
    function BadMonth2(value0) {
      this.value0 = value0;
    }
    ;
    BadMonth2.create = function(value0) {
      return new BadMonth2(value0);
    };
    return BadMonth2;
  }();
  var EmptyMap = /* @__PURE__ */ function() {
    function EmptyMap2() {
    }
    ;
    EmptyMap2.value = new EmptyMap2();
    return EmptyMap2;
  }();
  var Earlier = /* @__PURE__ */ function() {
    function Earlier2(value0) {
      this.value0 = value0;
    }
    ;
    Earlier2.create = function(value0) {
      return new Earlier2(value0);
    };
    return Earlier2;
  }();
  var Later = /* @__PURE__ */ function() {
    function Later2(value0) {
      this.value0 = value0;
    }
    ;
    Later2.create = function(value0) {
      return new Later2(value0);
    };
    return Later2;
  }();
  var SetThumbs = /* @__PURE__ */ function() {
    function SetThumbs2(value0) {
      this.value0 = value0;
    }
    ;
    SetThumbs2.create = function(value0) {
      return new SetThumbs2(value0);
    };
    return SetThumbs2;
  }();
  var printInvariantError = function(v) {
    if (v instanceof BadYear) {
      return "Received bad year: " + show2(v.value0);
    }
    ;
    if (v instanceof BadMonth) {
      return "Received bad month: " + v.value0;
    }
    ;
    if (v instanceof EmptyMap) {
      return "Empty map";
    }
    ;
    throw new Error("Failed pattern match at App (line 55, column 23 - line 58, column 26): " + [v.constructor.name]);
  };
  var mkReducer2 = /* @__PURE__ */ mkReducer(function(state3) {
    return function(v) {
      if (v instanceof Earlier) {
        var scalar = function(n) {
          return floor2(state3.thumbs.maxThumb.value / state3.thumbs.minThumb.value * toNumber(n));
        };
        return {
          earlier: formatString(v.value0),
          later: fromMaybe(state3.later)(map12(function($84) {
            return format(scalar($84));
          })(unformat(v.value0))),
          earlierLastSet: true,
          thumbs: state3.thumbs
        };
      }
      ;
      if (v instanceof Later) {
        var scalar = function(n) {
          return floor2(state3.thumbs.minThumb.value / state3.thumbs.maxThumb.value * toNumber(n));
        };
        return {
          earlier: fromMaybe(state3.earlier)(map12(function($85) {
            return format(scalar($85));
          })(unformat(v.value0))),
          later: formatString(v.value0),
          earlierLastSet: false,
          thumbs: state3.thumbs
        };
      }
      ;
      if (v instanceof SetThumbs) {
        var d = function() {
          if (state3.earlierLastSet) {
            return state3.thumbs.maxThumb.value / state3.thumbs.minThumb.value;
          }
          ;
          return state3.thumbs.minThumb.value / state3.thumbs.maxThumb.value;
        }();
        var scalar = function(n) {
          return floor2(d * toNumber(n));
        };
        return {
          earlier: function() {
            if (state3.earlierLastSet) {
              return state3.earlier;
            }
            ;
            return fromMaybe(state3.earlier)(map12(function($86) {
              return format(scalar($86));
            })(unformat(state3.later)));
          }(),
          later: function() {
            var $67 = !state3.earlierLastSet;
            if ($67) {
              return state3.later;
            }
            ;
            return fromMaybe(state3.later)(map12(function($87) {
              return format(scalar($87));
            })(unformat(state3.earlier)));
          }(),
          earlierLastSet: state3.earlierLastSet,
          thumbs: v.value0
        };
      }
      ;
      throw new Error("Failed pattern match at App (line 115, column 39 - line 147, column 6): " + [v.constructor.name]);
    };
  });
  var displayYearMonth = function(v) {
    return show1(v.value1) + (" " + show2(fromEnum7(v.value0)));
  };
  var mkAppContents = function __do() {
    var largeChart = make();
    var timelineChart = make4();
    var rangeSlider = make3();
    var resizeSection = make2();
    var reducer2 = mkReducer2();
    return component("AppContents")(function(props) {
      var keys3 = fromFoldable4(keys2(props.allData));
      var maxKeyIndex = length(keys3) - 1 | 0;
      var initialState = {
        earlier: "",
        later: "",
        thumbs: props.thumbs,
        earlierLastSet: true
      };
      return bind13(useReducer(initialState)(reducer2))(function(v) {
        var scalar = function(n) {
          if (v.value0.earlierLastSet) {
            return toNumber(fromMaybe(0)(unformat(v.value0.earlier))) / v.value0.thumbs.minThumb.value * n;
          }
          ;
          return toNumber(fromMaybe(0)(unformat(v.value0.later))) / v.value0.thumbs.maxThumb.value * n;
        };
        return discard5(useEffectOnce(function() {
          var maybeThumbs = bind23(bind23(index(keys3)(800))(function(key) {
            return bind23(lookup2(key)(props.allData))(function(value12) {
              return pure7({
                key,
                value: value12
              });
            });
          }))(function(min$prime) {
            return bind23(bind23(last(keys3))(function(key) {
              return bind23(lookup2(key)(props.allData))(function(value12) {
                return pure7({
                  key,
                  value: value12
                });
              });
            }))(function(max$prime) {
              return pure7({
                minThumb: min$prime,
                maxThumb: max$prime
              });
            });
          });
          return function __do4() {
            for_3(maybeThumbs)(function($88) {
              return v.value1(SetThumbs.create($88));
            })();
            v.value1(new Earlier("100"))();
            return mempty3;
          };
        }()))(function() {
          return pure22(main_([resizeSection(function(contentBox) {
            return [largeChart({
              data: mapFlipped3(allData)(function(datum2) {
                return {
                  value: scalar(datum2.value),
                  month: datum2.month,
                  year: datum2.year
                };
              }),
              width: contentBox.width,
              height: contentBox.height,
              min: uncurry(canonicalDate)(v.value0.thumbs.minThumb.key)(bottom5),
              max: uncurry(canonicalDate)(v.value0.thumbs.maxThumb.key)(bottom5)
            })];
          }), resizeSection(function(contentBox) {
            return [function() {
              var data$prime2 = zipWith(function(a3) {
                return function(b2) {
                  return {
                    value: (b2.value - a3.value) / a3.value,
                    month: b2.month,
                    year: b2.year
                  };
                };
              })(allData)(drop(1)(allData));
              return timelineChart({
                data: data$prime2,
                width: contentBox.width
              });
            }(), rangeSlider({
              minValue: 0,
              maxValue: maxKeyIndex,
              value: function() {
                var minThumb = fromMaybe(0)(findIndex(function(v1) {
                  return eq4(v1)(v.value0.thumbs.minThumb.key);
                })(keys3));
                var maxThumb = fromMaybe(maxKeyIndex)(findIndex(function(v1) {
                  return eq4(v1)(v.value0.thumbs.maxThumb.key);
                })(keys3));
                return {
                  minThumb,
                  maxThumb
                };
              }(),
              earlierLastSet: v.value0.earlierLastSet,
              onChange: function(v1) {
                var maybeThumbs = bind23(bind23(index(keys3)(v1.minThumb))(function(key) {
                  return bind23(lookup2(key)(props.allData))(function(value12) {
                    return pure7({
                      key,
                      value: value12
                    });
                  });
                }))(function(min$prime) {
                  return bind23(bind23(index(keys3)(v1.maxThumb))(function(key) {
                    return bind23(lookup2(key)(props.allData))(function(value12) {
                      return pure7({
                        key,
                        value: value12
                      });
                    });
                  }))(function(max$prime) {
                    return pure7({
                      minThumb: min$prime,
                      maxThumb: max$prime
                    });
                  });
                });
                return for_3(maybeThumbs)(function($89) {
                  return v.value1(SetThumbs.create($89));
                });
              }
            })];
          }), section3({
            className: "inputs",
            children: [div1({
              className: "dollar-input-group" + guard3(v.value0.earlierLastSet)(" selected"),
              children: [text("$"), input2({
                value: v.value0.earlier,
                onChange: handler(targetValue)(traverse_2(function(value12) {
                  return v.value1(new Earlier(value12));
                })),
                type: "text",
                className: "dollar",
                inputMode: "numeric"
              })]
            }), output_([text(displayYearMonth(v.value0.thumbs.minThumb.key))]), div1({
              className: "dollar-input-group" + guard3(!v.value0.earlierLastSet)(" selected"),
              children: [text("$"), input2({
                value: v.value0.later,
                onChange: handler(targetValue)(traverse_2(function(value12) {
                  return v.value1(new Later(value12));
                })),
                type: "text",
                className: "dollar",
                inputMode: "numeric"
              })]
            }), output_([text(displayYearMonth(v.value0.thumbs.maxThumb.key))])]
          })]));
        });
      });
    })();
  };
  var appData = /* @__PURE__ */ bind32(/* @__PURE__ */ $$for(applicativeEither)(traversableArray)(allData)(function(datum2) {
    return bind32(note(new BadYear(datum2.year))(toEnum3(datum2.year)))(function(v) {
      return bind32(note(new BadMonth(datum2.month))(function() {
        if (datum2.month === "January") {
          return new Just(January.value);
        }
        ;
        if (datum2.month === "February") {
          return new Just(February.value);
        }
        ;
        if (datum2.month === "March") {
          return new Just(March.value);
        }
        ;
        if (datum2.month === "April") {
          return new Just(April.value);
        }
        ;
        if (datum2.month === "May") {
          return new Just(May.value);
        }
        ;
        if (datum2.month === "June") {
          return new Just(June.value);
        }
        ;
        if (datum2.month === "July") {
          return new Just(July.value);
        }
        ;
        if (datum2.month === "August") {
          return new Just(August.value);
        }
        ;
        if (datum2.month === "September") {
          return new Just(September.value);
        }
        ;
        if (datum2.month === "October") {
          return new Just(October.value);
        }
        ;
        if (datum2.month === "November") {
          return new Just(November.value);
        }
        ;
        if (datum2.month === "December") {
          return new Just(December.value);
        }
        ;
        return Nothing.value;
      }()))(function(month3) {
        return pure32(new Tuple(new Tuple(v, month3), datum2.value));
      });
    });
  }))(function(dataArray) {
    var dataMap = fromFoldable1(dataArray);
    return bind32(note(EmptyMap.value)(bind23(findMin(dataMap))(function(minThumb) {
      return bind23(findMax(dataMap))(function(maxThumb) {
        return pure7({
          minThumb,
          maxThumb
        });
      });
    })))(function(thumbs) {
      return pure32({
        thumbs,
        allData: dataMap
      });
    });
  });
  var mkApp = function __do2() {
    var appContents = mkAppContents();
    return component("App")(function(v) {
      return pure22(function() {
        if (appData instanceof Left) {
          return pre_([text(printInvariantError(appData.value0))]);
        }
        ;
        if (appData instanceof Right) {
          return appContents(appData.value0);
        }
        ;
        throw new Error("Failed pattern match at App (line 92, column 10 - line 94, column 55): " + [appData.constructor.name]);
      }());
    })();
  };

  // output/React.Basic.DOM.Client/foreign.js
  var import_client = __toESM(require_client(), 1);
  var createRoot = (container) => () => import_client.default.createRoot(container);
  var renderRoot = (root2) => (children3) => () => root2.render(children3);

  // output/Web.DOM.NonElementParentNode/foreign.js
  function _getElementById(id3) {
    return function(node) {
      return function() {
        return node.getElementById(id3);
      };
    };
  }

  // output/Web.DOM.NonElementParentNode/index.js
  var map13 = /* @__PURE__ */ map(functorEffect);
  var getElementById = function(eid) {
    var $2 = map13(toMaybe);
    var $3 = _getElementById(eid);
    return function($4) {
      return $2($3($4));
    };
  };

  // output/Web.HTML/foreign.js
  var windowImpl = function() {
    return window;
  };

  // output/Web.HTML.HTMLDocument/index.js
  var toNonElementParentNode = unsafeCoerce2;

  // output/Web.HTML.Window/foreign.js
  function document2(window3) {
    return function() {
      return window3.document;
    };
  }

  // output/Main/index.js
  var bind6 = /* @__PURE__ */ bind(bindEffect);
  var main2 = function __do3() {
    var maybeRoot = bind6(bind6(windowImpl)(document2))(function() {
      var $4 = getElementById("root");
      return function($5) {
        return $4(toNonElementParentNode($5));
      };
    }())();
    if (maybeRoot instanceof Nothing) {
      return $$throw("Root element not found.")();
    }
    ;
    if (maybeRoot instanceof Just) {
      var app = mkApp();
      var reactRoot = createRoot(maybeRoot.value0)();
      return renderRoot(reactRoot)(app(unit))();
    }
    ;
    throw new Error("Failed pattern match at Main (line 21, column 3 - line 26, column 45): " + [maybeRoot.constructor.name]);
  };

  // <stdin>
  main2();
})();
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
